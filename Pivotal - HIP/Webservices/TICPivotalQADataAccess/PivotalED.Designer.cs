//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3615
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TICPivotalQADataAccess {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("PivotalED")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class PivotalED : global::System.Data.DataSet {
        
        private UserDataTable tableUser;
        
        private ConstructionProjectFilterDataTable tableConstructionProjectFilter;
        
        private PhaseFilterDataTable tablePhaseFilter;
        
        private InspTemplateFilterDataTable tableInspTemplateFilter;
        
        private ScheduledInspectionsDataTable tableScheduledInspections;
        
        private InspectionStepTemplateDataTable tableInspectionStepTemplate;
        
        private InspectionTemplateDataTable tableInspectionTemplate;
        
        private ExplodedUnitsDataTable tableExplodedUnits;
        
        private InspectionDataTable tableInspection;
        
        private InspectionStepDataTable tableInspectionStep;
        
        private ScopeItemsDataTable tableScopeItems;
        
        private InspectionListDataTable tableInspectionList;
        
        private MiscellaneousCategoryDataTable tableMiscellaneousCategory;
        
        private QADocumentsDataTable tableQADocuments;
        
        private QAWeblinksDataTable tableQAWeblinks;
        
        private InspectionStatusDataTable tableInspectionStatus;
        
        private InspectionStatusesDataTable tableInspectionStatuses;
        
        private ContactDataTable tableContact;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PivotalED() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected PivotalED(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["ConstructionProjectFilter"] != null)) {
                    base.Tables.Add(new ConstructionProjectFilterDataTable(ds.Tables["ConstructionProjectFilter"]));
                }
                if ((ds.Tables["PhaseFilter"] != null)) {
                    base.Tables.Add(new PhaseFilterDataTable(ds.Tables["PhaseFilter"]));
                }
                if ((ds.Tables["InspTemplateFilter"] != null)) {
                    base.Tables.Add(new InspTemplateFilterDataTable(ds.Tables["InspTemplateFilter"]));
                }
                if ((ds.Tables["ScheduledInspections"] != null)) {
                    base.Tables.Add(new ScheduledInspectionsDataTable(ds.Tables["ScheduledInspections"]));
                }
                if ((ds.Tables["InspectionStepTemplate"] != null)) {
                    base.Tables.Add(new InspectionStepTemplateDataTable(ds.Tables["InspectionStepTemplate"]));
                }
                if ((ds.Tables["InspectionTemplate"] != null)) {
                    base.Tables.Add(new InspectionTemplateDataTable(ds.Tables["InspectionTemplate"]));
                }
                if ((ds.Tables["ExplodedUnits"] != null)) {
                    base.Tables.Add(new ExplodedUnitsDataTable(ds.Tables["ExplodedUnits"]));
                }
                if ((ds.Tables["Inspection"] != null)) {
                    base.Tables.Add(new InspectionDataTable(ds.Tables["Inspection"]));
                }
                if ((ds.Tables["InspectionStep"] != null)) {
                    base.Tables.Add(new InspectionStepDataTable(ds.Tables["InspectionStep"]));
                }
                if ((ds.Tables["ScopeItems"] != null)) {
                    base.Tables.Add(new ScopeItemsDataTable(ds.Tables["ScopeItems"]));
                }
                if ((ds.Tables["InspectionList"] != null)) {
                    base.Tables.Add(new InspectionListDataTable(ds.Tables["InspectionList"]));
                }
                if ((ds.Tables["MiscellaneousCategory"] != null)) {
                    base.Tables.Add(new MiscellaneousCategoryDataTable(ds.Tables["MiscellaneousCategory"]));
                }
                if ((ds.Tables["QADocuments"] != null)) {
                    base.Tables.Add(new QADocumentsDataTable(ds.Tables["QADocuments"]));
                }
                if ((ds.Tables["QAWeblinks"] != null)) {
                    base.Tables.Add(new QAWeblinksDataTable(ds.Tables["QAWeblinks"]));
                }
                if ((ds.Tables["InspectionStatus"] != null)) {
                    base.Tables.Add(new InspectionStatusDataTable(ds.Tables["InspectionStatus"]));
                }
                if ((ds.Tables["InspectionStatuses"] != null)) {
                    base.Tables.Add(new InspectionStatusesDataTable(ds.Tables["InspectionStatuses"]));
                }
                if ((ds.Tables["Contact"] != null)) {
                    base.Tables.Add(new ContactDataTable(ds.Tables["Contact"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConstructionProjectFilterDataTable ConstructionProjectFilter {
            get {
                return this.tableConstructionProjectFilter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PhaseFilterDataTable PhaseFilter {
            get {
                return this.tablePhaseFilter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspTemplateFilterDataTable InspTemplateFilter {
            get {
                return this.tableInspTemplateFilter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScheduledInspectionsDataTable ScheduledInspections {
            get {
                return this.tableScheduledInspections;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectionStepTemplateDataTable InspectionStepTemplate {
            get {
                return this.tableInspectionStepTemplate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectionTemplateDataTable InspectionTemplate {
            get {
                return this.tableInspectionTemplate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExplodedUnitsDataTable ExplodedUnits {
            get {
                return this.tableExplodedUnits;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectionDataTable Inspection {
            get {
                return this.tableInspection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectionStepDataTable InspectionStep {
            get {
                return this.tableInspectionStep;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScopeItemsDataTable ScopeItems {
            get {
                return this.tableScopeItems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectionListDataTable InspectionList {
            get {
                return this.tableInspectionList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MiscellaneousCategoryDataTable MiscellaneousCategory {
            get {
                return this.tableMiscellaneousCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QADocumentsDataTable QADocuments {
            get {
                return this.tableQADocuments;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public QAWeblinksDataTable QAWeblinks {
            get {
                return this.tableQAWeblinks;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectionStatusDataTable InspectionStatus {
            get {
                return this.tableInspectionStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public InspectionStatusesDataTable InspectionStatuses {
            get {
                return this.tableInspectionStatuses;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContactDataTable Contact {
            get {
                return this.tableContact;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            PivotalED cln = ((PivotalED)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["ConstructionProjectFilter"] != null)) {
                    base.Tables.Add(new ConstructionProjectFilterDataTable(ds.Tables["ConstructionProjectFilter"]));
                }
                if ((ds.Tables["PhaseFilter"] != null)) {
                    base.Tables.Add(new PhaseFilterDataTable(ds.Tables["PhaseFilter"]));
                }
                if ((ds.Tables["InspTemplateFilter"] != null)) {
                    base.Tables.Add(new InspTemplateFilterDataTable(ds.Tables["InspTemplateFilter"]));
                }
                if ((ds.Tables["ScheduledInspections"] != null)) {
                    base.Tables.Add(new ScheduledInspectionsDataTable(ds.Tables["ScheduledInspections"]));
                }
                if ((ds.Tables["InspectionStepTemplate"] != null)) {
                    base.Tables.Add(new InspectionStepTemplateDataTable(ds.Tables["InspectionStepTemplate"]));
                }
                if ((ds.Tables["InspectionTemplate"] != null)) {
                    base.Tables.Add(new InspectionTemplateDataTable(ds.Tables["InspectionTemplate"]));
                }
                if ((ds.Tables["ExplodedUnits"] != null)) {
                    base.Tables.Add(new ExplodedUnitsDataTable(ds.Tables["ExplodedUnits"]));
                }
                if ((ds.Tables["Inspection"] != null)) {
                    base.Tables.Add(new InspectionDataTable(ds.Tables["Inspection"]));
                }
                if ((ds.Tables["InspectionStep"] != null)) {
                    base.Tables.Add(new InspectionStepDataTable(ds.Tables["InspectionStep"]));
                }
                if ((ds.Tables["ScopeItems"] != null)) {
                    base.Tables.Add(new ScopeItemsDataTable(ds.Tables["ScopeItems"]));
                }
                if ((ds.Tables["InspectionList"] != null)) {
                    base.Tables.Add(new InspectionListDataTable(ds.Tables["InspectionList"]));
                }
                if ((ds.Tables["MiscellaneousCategory"] != null)) {
                    base.Tables.Add(new MiscellaneousCategoryDataTable(ds.Tables["MiscellaneousCategory"]));
                }
                if ((ds.Tables["QADocuments"] != null)) {
                    base.Tables.Add(new QADocumentsDataTable(ds.Tables["QADocuments"]));
                }
                if ((ds.Tables["QAWeblinks"] != null)) {
                    base.Tables.Add(new QAWeblinksDataTable(ds.Tables["QAWeblinks"]));
                }
                if ((ds.Tables["InspectionStatus"] != null)) {
                    base.Tables.Add(new InspectionStatusDataTable(ds.Tables["InspectionStatus"]));
                }
                if ((ds.Tables["InspectionStatuses"] != null)) {
                    base.Tables.Add(new InspectionStatusesDataTable(ds.Tables["InspectionStatuses"]));
                }
                if ((ds.Tables["Contact"] != null)) {
                    base.Tables.Add(new ContactDataTable(ds.Tables["Contact"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.tableConstructionProjectFilter = ((ConstructionProjectFilterDataTable)(base.Tables["ConstructionProjectFilter"]));
            if ((initTable == true)) {
                if ((this.tableConstructionProjectFilter != null)) {
                    this.tableConstructionProjectFilter.InitVars();
                }
            }
            this.tablePhaseFilter = ((PhaseFilterDataTable)(base.Tables["PhaseFilter"]));
            if ((initTable == true)) {
                if ((this.tablePhaseFilter != null)) {
                    this.tablePhaseFilter.InitVars();
                }
            }
            this.tableInspTemplateFilter = ((InspTemplateFilterDataTable)(base.Tables["InspTemplateFilter"]));
            if ((initTable == true)) {
                if ((this.tableInspTemplateFilter != null)) {
                    this.tableInspTemplateFilter.InitVars();
                }
            }
            this.tableScheduledInspections = ((ScheduledInspectionsDataTable)(base.Tables["ScheduledInspections"]));
            if ((initTable == true)) {
                if ((this.tableScheduledInspections != null)) {
                    this.tableScheduledInspections.InitVars();
                }
            }
            this.tableInspectionStepTemplate = ((InspectionStepTemplateDataTable)(base.Tables["InspectionStepTemplate"]));
            if ((initTable == true)) {
                if ((this.tableInspectionStepTemplate != null)) {
                    this.tableInspectionStepTemplate.InitVars();
                }
            }
            this.tableInspectionTemplate = ((InspectionTemplateDataTable)(base.Tables["InspectionTemplate"]));
            if ((initTable == true)) {
                if ((this.tableInspectionTemplate != null)) {
                    this.tableInspectionTemplate.InitVars();
                }
            }
            this.tableExplodedUnits = ((ExplodedUnitsDataTable)(base.Tables["ExplodedUnits"]));
            if ((initTable == true)) {
                if ((this.tableExplodedUnits != null)) {
                    this.tableExplodedUnits.InitVars();
                }
            }
            this.tableInspection = ((InspectionDataTable)(base.Tables["Inspection"]));
            if ((initTable == true)) {
                if ((this.tableInspection != null)) {
                    this.tableInspection.InitVars();
                }
            }
            this.tableInspectionStep = ((InspectionStepDataTable)(base.Tables["InspectionStep"]));
            if ((initTable == true)) {
                if ((this.tableInspectionStep != null)) {
                    this.tableInspectionStep.InitVars();
                }
            }
            this.tableScopeItems = ((ScopeItemsDataTable)(base.Tables["ScopeItems"]));
            if ((initTable == true)) {
                if ((this.tableScopeItems != null)) {
                    this.tableScopeItems.InitVars();
                }
            }
            this.tableInspectionList = ((InspectionListDataTable)(base.Tables["InspectionList"]));
            if ((initTable == true)) {
                if ((this.tableInspectionList != null)) {
                    this.tableInspectionList.InitVars();
                }
            }
            this.tableMiscellaneousCategory = ((MiscellaneousCategoryDataTable)(base.Tables["MiscellaneousCategory"]));
            if ((initTable == true)) {
                if ((this.tableMiscellaneousCategory != null)) {
                    this.tableMiscellaneousCategory.InitVars();
                }
            }
            this.tableQADocuments = ((QADocumentsDataTable)(base.Tables["QADocuments"]));
            if ((initTable == true)) {
                if ((this.tableQADocuments != null)) {
                    this.tableQADocuments.InitVars();
                }
            }
            this.tableQAWeblinks = ((QAWeblinksDataTable)(base.Tables["QAWeblinks"]));
            if ((initTable == true)) {
                if ((this.tableQAWeblinks != null)) {
                    this.tableQAWeblinks.InitVars();
                }
            }
            this.tableInspectionStatus = ((InspectionStatusDataTable)(base.Tables["InspectionStatus"]));
            if ((initTable == true)) {
                if ((this.tableInspectionStatus != null)) {
                    this.tableInspectionStatus.InitVars();
                }
            }
            this.tableInspectionStatuses = ((InspectionStatusesDataTable)(base.Tables["InspectionStatuses"]));
            if ((initTable == true)) {
                if ((this.tableInspectionStatuses != null)) {
                    this.tableInspectionStatuses.InitVars();
                }
            }
            this.tableContact = ((ContactDataTable)(base.Tables["Contact"]));
            if ((initTable == true)) {
                if ((this.tableContact != null)) {
                    this.tableContact.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "PivotalED";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/PivotalED.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            this.tableConstructionProjectFilter = new ConstructionProjectFilterDataTable();
            base.Tables.Add(this.tableConstructionProjectFilter);
            this.tablePhaseFilter = new PhaseFilterDataTable();
            base.Tables.Add(this.tablePhaseFilter);
            this.tableInspTemplateFilter = new InspTemplateFilterDataTable();
            base.Tables.Add(this.tableInspTemplateFilter);
            this.tableScheduledInspections = new ScheduledInspectionsDataTable();
            base.Tables.Add(this.tableScheduledInspections);
            this.tableInspectionStepTemplate = new InspectionStepTemplateDataTable();
            base.Tables.Add(this.tableInspectionStepTemplate);
            this.tableInspectionTemplate = new InspectionTemplateDataTable();
            base.Tables.Add(this.tableInspectionTemplate);
            this.tableExplodedUnits = new ExplodedUnitsDataTable();
            base.Tables.Add(this.tableExplodedUnits);
            this.tableInspection = new InspectionDataTable();
            base.Tables.Add(this.tableInspection);
            this.tableInspectionStep = new InspectionStepDataTable();
            base.Tables.Add(this.tableInspectionStep);
            this.tableScopeItems = new ScopeItemsDataTable();
            base.Tables.Add(this.tableScopeItems);
            this.tableInspectionList = new InspectionListDataTable();
            base.Tables.Add(this.tableInspectionList);
            this.tableMiscellaneousCategory = new MiscellaneousCategoryDataTable();
            base.Tables.Add(this.tableMiscellaneousCategory);
            this.tableQADocuments = new QADocumentsDataTable();
            base.Tables.Add(this.tableQADocuments);
            this.tableQAWeblinks = new QAWeblinksDataTable();
            base.Tables.Add(this.tableQAWeblinks);
            this.tableInspectionStatus = new InspectionStatusDataTable();
            base.Tables.Add(this.tableInspectionStatus);
            this.tableInspectionStatuses = new InspectionStatusesDataTable();
            base.Tables.Add(this.tableInspectionStatuses);
            this.tableContact = new ContactDataTable();
            base.Tables.Add(this.tableContact);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConstructionProjectFilter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePhaseFilter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspTemplateFilter() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScheduledInspections() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectionStepTemplate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectionTemplate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExplodedUnits() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspection() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectionStep() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeScopeItems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectionList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMiscellaneousCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQADocuments() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeQAWeblinks() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectionStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeInspectionStatuses() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContact() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            PivotalED ds = new PivotalED();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void ConstructionProjectFilterRowChangeEventHandler(object sender, ConstructionProjectFilterRowChangeEvent e);
        
        public delegate void PhaseFilterRowChangeEventHandler(object sender, PhaseFilterRowChangeEvent e);
        
        public delegate void InspTemplateFilterRowChangeEventHandler(object sender, InspTemplateFilterRowChangeEvent e);
        
        public delegate void ScheduledInspectionsRowChangeEventHandler(object sender, ScheduledInspectionsRowChangeEvent e);
        
        public delegate void InspectionStepTemplateRowChangeEventHandler(object sender, InspectionStepTemplateRowChangeEvent e);
        
        public delegate void InspectionTemplateRowChangeEventHandler(object sender, InspectionTemplateRowChangeEvent e);
        
        public delegate void ExplodedUnitsRowChangeEventHandler(object sender, ExplodedUnitsRowChangeEvent e);
        
        public delegate void InspectionRowChangeEventHandler(object sender, InspectionRowChangeEvent e);
        
        public delegate void InspectionStepRowChangeEventHandler(object sender, InspectionStepRowChangeEvent e);
        
        public delegate void ScopeItemsRowChangeEventHandler(object sender, ScopeItemsRowChangeEvent e);
        
        public delegate void InspectionListRowChangeEventHandler(object sender, InspectionListRowChangeEvent e);
        
        public delegate void MiscellaneousCategoryRowChangeEventHandler(object sender, MiscellaneousCategoryRowChangeEvent e);
        
        public delegate void QADocumentsRowChangeEventHandler(object sender, QADocumentsRowChangeEvent e);
        
        public delegate void QAWeblinksRowChangeEventHandler(object sender, QAWeblinksRowChangeEvent e);
        
        public delegate void InspectionStatusRowChangeEventHandler(object sender, InspectionStatusRowChangeEvent e);
        
        public delegate void InspectionStatusesRowChangeEventHandler(object sender, InspectionStatusesRowChangeEvent e);
        
        public delegate void ContactRowChangeEventHandler(object sender, ContactRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : global::System.Data.TypedTableBase<UserRow> {
            
            private global::System.Data.DataColumn columncontact_id;
            
            private global::System.Data.DataColumn columnlogin_name;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columnpassword_encrypt;
            
            private global::System.Data.DataColumn columnfirst_name;
            
            private global::System.Data.DataColumn columnlast_name;
            
            private global::System.Data.DataColumn columnmiddle_initial;
            
            private global::System.Data.DataColumn columntitle;
            
            private global::System.Data.DataColumn columnsuffix;
            
            private global::System.Data.DataColumn columncompany_name;
            
            private global::System.Data.DataColumn columnemail1;
            
            private global::System.Data.DataColumn columncontact_id_int;
            
            private global::System.Data.DataColumn columncompany_type;
            
            private global::System.Data.DataColumn columnrole;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contact_idColumn {
                get {
                    return this.columncontact_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn login_nameColumn {
                get {
                    return this.columnlogin_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn password_encryptColumn {
                get {
                    return this.columnpassword_encrypt;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn first_nameColumn {
                get {
                    return this.columnfirst_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn last_nameColumn {
                get {
                    return this.columnlast_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn middle_initialColumn {
                get {
                    return this.columnmiddle_initial;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn titleColumn {
                get {
                    return this.columntitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn suffixColumn {
                get {
                    return this.columnsuffix;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn company_nameColumn {
                get {
                    return this.columncompany_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn email1Column {
                get {
                    return this.columnemail1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contact_id_intColumn {
                get {
                    return this.columncontact_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn company_typeColumn {
                get {
                    return this.columncompany_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn roleColumn {
                get {
                    return this.columnrole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(byte[] contact_id, string login_name, string email, string password_encrypt, string first_name, string last_name, string middle_initial, string title, string suffix, string company_name, string email1, int contact_id_int, string company_type, string role) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        contact_id,
                        login_name,
                        email,
                        password_encrypt,
                        first_name,
                        last_name,
                        middle_initial,
                        title,
                        suffix,
                        company_name,
                        email1,
                        contact_id_int,
                        company_type,
                        role};
                rowUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow FindBycontact_id(byte[] contact_id) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            contact_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncontact_id = base.Columns["contact_id"];
                this.columnlogin_name = base.Columns["login_name"];
                this.columnemail = base.Columns["email"];
                this.columnpassword_encrypt = base.Columns["password_encrypt"];
                this.columnfirst_name = base.Columns["first_name"];
                this.columnlast_name = base.Columns["last_name"];
                this.columnmiddle_initial = base.Columns["middle_initial"];
                this.columntitle = base.Columns["title"];
                this.columnsuffix = base.Columns["suffix"];
                this.columncompany_name = base.Columns["company_name"];
                this.columnemail1 = base.Columns["email1"];
                this.columncontact_id_int = base.Columns["contact_id_int"];
                this.columncompany_type = base.Columns["company_type"];
                this.columnrole = base.Columns["role"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncontact_id = new global::System.Data.DataColumn("contact_id", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontact_id);
                this.columnlogin_name = new global::System.Data.DataColumn("login_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin_name);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columnpassword_encrypt = new global::System.Data.DataColumn("password_encrypt", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpassword_encrypt);
                this.columnfirst_name = new global::System.Data.DataColumn("first_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfirst_name);
                this.columnlast_name = new global::System.Data.DataColumn("last_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlast_name);
                this.columnmiddle_initial = new global::System.Data.DataColumn("middle_initial", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmiddle_initial);
                this.columntitle = new global::System.Data.DataColumn("title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntitle);
                this.columnsuffix = new global::System.Data.DataColumn("suffix", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsuffix);
                this.columncompany_name = new global::System.Data.DataColumn("company_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncompany_name);
                this.columnemail1 = new global::System.Data.DataColumn("email1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail1);
                this.columncontact_id_int = new global::System.Data.DataColumn("contact_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontact_id_int);
                this.columncompany_type = new global::System.Data.DataColumn("company_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncompany_type);
                this.columnrole = new global::System.Data.DataColumn("role", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrole);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columncontact_id}, true));
                this.columncontact_id.AllowDBNull = false;
                this.columncontact_id.Unique = true;
                this.columnlogin_name.MaxLength = 32;
                this.columnemail.MaxLength = 100;
                this.columnpassword_encrypt.MaxLength = 32;
                this.columnfirst_name.MaxLength = 30;
                this.columnlast_name.MaxLength = 30;
                this.columnmiddle_initial.MaxLength = 10;
                this.columntitle.MaxLength = 9;
                this.columnsuffix.MaxLength = 20;
                this.columncompany_name.MaxLength = 80;
                this.columnemail1.MaxLength = 100;
                this.columncontact_id_int.ReadOnly = true;
                this.columncompany_type.MaxLength = 25;
                this.columnrole.MaxLength = 40;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConstructionProjectFilterDataTable : global::System.Data.TypedTableBase<ConstructionProjectFilterRow> {
            
            private global::System.Data.DataColumn columntic_construction_project_id;
            
            private global::System.Data.DataColumn columntic_construction_project_name;
            
            private global::System.Data.DataColumn columnTIC_Inspection_Scope;
            
            private global::System.Data.DataColumn columntic_construction_project_id_int;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstructionProjectFilterDataTable() {
                this.TableName = "ConstructionProjectFilter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConstructionProjectFilterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConstructionProjectFilterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_idColumn {
                get {
                    return this.columntic_construction_project_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_nameColumn {
                get {
                    return this.columntic_construction_project_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Inspection_ScopeColumn {
                get {
                    return this.columnTIC_Inspection_Scope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_id_intColumn {
                get {
                    return this.columntic_construction_project_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstructionProjectFilterRow this[int index] {
                get {
                    return ((ConstructionProjectFilterRow)(this.Rows[index]));
                }
            }
            
            public event ConstructionProjectFilterRowChangeEventHandler ConstructionProjectFilterRowChanging;
            
            public event ConstructionProjectFilterRowChangeEventHandler ConstructionProjectFilterRowChanged;
            
            public event ConstructionProjectFilterRowChangeEventHandler ConstructionProjectFilterRowDeleting;
            
            public event ConstructionProjectFilterRowChangeEventHandler ConstructionProjectFilterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConstructionProjectFilterRow(ConstructionProjectFilterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstructionProjectFilterRow AddConstructionProjectFilterRow(byte[] tic_construction_project_id, string tic_construction_project_name, string TIC_Inspection_Scope, int tic_construction_project_id_int) {
                ConstructionProjectFilterRow rowConstructionProjectFilterRow = ((ConstructionProjectFilterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tic_construction_project_id,
                        tic_construction_project_name,
                        TIC_Inspection_Scope,
                        tic_construction_project_id_int};
                rowConstructionProjectFilterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConstructionProjectFilterRow);
                return rowConstructionProjectFilterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstructionProjectFilterRow FindBytic_construction_project_id(byte[] tic_construction_project_id) {
                return ((ConstructionProjectFilterRow)(this.Rows.Find(new object[] {
                            tic_construction_project_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConstructionProjectFilterDataTable cln = ((ConstructionProjectFilterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConstructionProjectFilterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntic_construction_project_id = base.Columns["tic_construction_project_id"];
                this.columntic_construction_project_name = base.Columns["tic_construction_project_name"];
                this.columnTIC_Inspection_Scope = base.Columns["TIC_Inspection_Scope"];
                this.columntic_construction_project_id_int = base.Columns["tic_construction_project_id_int"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntic_construction_project_id = new global::System.Data.DataColumn("tic_construction_project_id", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_id);
                this.columntic_construction_project_name = new global::System.Data.DataColumn("tic_construction_project_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_name);
                this.columnTIC_Inspection_Scope = new global::System.Data.DataColumn("TIC_Inspection_Scope", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Inspection_Scope);
                this.columntic_construction_project_id_int = new global::System.Data.DataColumn("tic_construction_project_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_id_int);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columntic_construction_project_id}, true));
                this.columntic_construction_project_id.AllowDBNull = false;
                this.columntic_construction_project_id.Unique = true;
                this.columntic_construction_project_name.MaxLength = 100;
                this.columnTIC_Inspection_Scope.MaxLength = 20;
                this.columntic_construction_project_id_int.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstructionProjectFilterRow NewConstructionProjectFilterRow() {
                return ((ConstructionProjectFilterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConstructionProjectFilterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConstructionProjectFilterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConstructionProjectFilterRowChanged != null)) {
                    this.ConstructionProjectFilterRowChanged(this, new ConstructionProjectFilterRowChangeEvent(((ConstructionProjectFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConstructionProjectFilterRowChanging != null)) {
                    this.ConstructionProjectFilterRowChanging(this, new ConstructionProjectFilterRowChangeEvent(((ConstructionProjectFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConstructionProjectFilterRowDeleted != null)) {
                    this.ConstructionProjectFilterRowDeleted(this, new ConstructionProjectFilterRowChangeEvent(((ConstructionProjectFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConstructionProjectFilterRowDeleting != null)) {
                    this.ConstructionProjectFilterRowDeleting(this, new ConstructionProjectFilterRowChangeEvent(((ConstructionProjectFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConstructionProjectFilterRow(ConstructionProjectFilterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConstructionProjectFilterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PhaseFilterDataTable : global::System.Data.TypedTableBase<PhaseFilterRow> {
            
            private global::System.Data.DataColumn columntic_construction_project_id_int;
            
            private global::System.Data.DataColumn columnconstruction_phase_id;
            
            private global::System.Data.DataColumn columnconstruction_phase_number;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhaseFilterDataTable() {
                this.TableName = "PhaseFilter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PhaseFilterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PhaseFilterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_id_intColumn {
                get {
                    return this.columntic_construction_project_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn construction_phase_idColumn {
                get {
                    return this.columnconstruction_phase_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn construction_phase_numberColumn {
                get {
                    return this.columnconstruction_phase_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhaseFilterRow this[int index] {
                get {
                    return ((PhaseFilterRow)(this.Rows[index]));
                }
            }
            
            public event PhaseFilterRowChangeEventHandler PhaseFilterRowChanging;
            
            public event PhaseFilterRowChangeEventHandler PhaseFilterRowChanged;
            
            public event PhaseFilterRowChangeEventHandler PhaseFilterRowDeleting;
            
            public event PhaseFilterRowChangeEventHandler PhaseFilterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPhaseFilterRow(PhaseFilterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhaseFilterRow AddPhaseFilterRow(int tic_construction_project_id_int, byte[] construction_phase_id, string construction_phase_number) {
                PhaseFilterRow rowPhaseFilterRow = ((PhaseFilterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tic_construction_project_id_int,
                        construction_phase_id,
                        construction_phase_number};
                rowPhaseFilterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPhaseFilterRow);
                return rowPhaseFilterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PhaseFilterDataTable cln = ((PhaseFilterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PhaseFilterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntic_construction_project_id_int = base.Columns["tic_construction_project_id_int"];
                this.columnconstruction_phase_id = base.Columns["construction_phase_id"];
                this.columnconstruction_phase_number = base.Columns["construction_phase_number"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntic_construction_project_id_int = new global::System.Data.DataColumn("tic_construction_project_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_id_int);
                this.columnconstruction_phase_id = new global::System.Data.DataColumn("construction_phase_id", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstruction_phase_id);
                this.columnconstruction_phase_number = new global::System.Data.DataColumn("construction_phase_number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstruction_phase_number);
                this.columntic_construction_project_id_int.ReadOnly = true;
                this.columnconstruction_phase_number.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhaseFilterRow NewPhaseFilterRow() {
                return ((PhaseFilterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PhaseFilterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PhaseFilterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PhaseFilterRowChanged != null)) {
                    this.PhaseFilterRowChanged(this, new PhaseFilterRowChangeEvent(((PhaseFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PhaseFilterRowChanging != null)) {
                    this.PhaseFilterRowChanging(this, new PhaseFilterRowChangeEvent(((PhaseFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PhaseFilterRowDeleted != null)) {
                    this.PhaseFilterRowDeleted(this, new PhaseFilterRowChangeEvent(((PhaseFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PhaseFilterRowDeleting != null)) {
                    this.PhaseFilterRowDeleting(this, new PhaseFilterRowChangeEvent(((PhaseFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePhaseFilterRow(PhaseFilterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PhaseFilterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspTemplateFilterDataTable : global::System.Data.TypedTableBase<InspTemplateFilterRow> {
            
            private global::System.Data.DataColumn columndate_description;
            
            private global::System.Data.DataColumn columntic_construction_project_id_int;
            
            private global::System.Data.DataColumn columntic_inspection_type_id_int;
            
            private global::System.Data.DataColumn columnuniqueKey;
            
            private global::System.Data.DataColumn columnTIC_Const_Phase_Number;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspTemplateFilterDataTable() {
                this.TableName = "InspTemplateFilter";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspTemplateFilterDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspTemplateFilterDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_descriptionColumn {
                get {
                    return this.columndate_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_id_intColumn {
                get {
                    return this.columntic_construction_project_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_inspection_type_id_intColumn {
                get {
                    return this.columntic_inspection_type_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn uniqueKeyColumn {
                get {
                    return this.columnuniqueKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Const_Phase_NumberColumn {
                get {
                    return this.columnTIC_Const_Phase_Number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspTemplateFilterRow this[int index] {
                get {
                    return ((InspTemplateFilterRow)(this.Rows[index]));
                }
            }
            
            public event InspTemplateFilterRowChangeEventHandler InspTemplateFilterRowChanging;
            
            public event InspTemplateFilterRowChangeEventHandler InspTemplateFilterRowChanged;
            
            public event InspTemplateFilterRowChangeEventHandler InspTemplateFilterRowDeleting;
            
            public event InspTemplateFilterRowChangeEventHandler InspTemplateFilterRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspTemplateFilterRow(InspTemplateFilterRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspTemplateFilterRow AddInspTemplateFilterRow(string date_description, int tic_construction_project_id_int, int tic_inspection_type_id_int, int TIC_Const_Phase_Number) {
                InspTemplateFilterRow rowInspTemplateFilterRow = ((InspTemplateFilterRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        date_description,
                        tic_construction_project_id_int,
                        tic_inspection_type_id_int,
                        null,
                        TIC_Const_Phase_Number};
                rowInspTemplateFilterRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspTemplateFilterRow);
                return rowInspTemplateFilterRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspTemplateFilterDataTable cln = ((InspTemplateFilterDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspTemplateFilterDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndate_description = base.Columns["date_description"];
                this.columntic_construction_project_id_int = base.Columns["tic_construction_project_id_int"];
                this.columntic_inspection_type_id_int = base.Columns["tic_inspection_type_id_int"];
                this.columnuniqueKey = base.Columns["uniqueKey"];
                this.columnTIC_Const_Phase_Number = base.Columns["TIC_Const_Phase_Number"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndate_description = new global::System.Data.DataColumn("date_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_description);
                this.columntic_construction_project_id_int = new global::System.Data.DataColumn("tic_construction_project_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_id_int);
                this.columntic_inspection_type_id_int = new global::System.Data.DataColumn("tic_inspection_type_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_inspection_type_id_int);
                this.columnuniqueKey = new global::System.Data.DataColumn("uniqueKey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuniqueKey);
                this.columnTIC_Const_Phase_Number = new global::System.Data.DataColumn("TIC_Const_Phase_Number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Const_Phase_Number);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnuniqueKey}, false));
                this.columndate_description.MaxLength = 100;
                this.columntic_construction_project_id_int.ReadOnly = true;
                this.columntic_inspection_type_id_int.ReadOnly = true;
                this.columnuniqueKey.AutoIncrement = true;
                this.columnuniqueKey.AutoIncrementSeed = -1;
                this.columnuniqueKey.AutoIncrementStep = -1;
                this.columnuniqueKey.Unique = true;
                this.columnTIC_Const_Phase_Number.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspTemplateFilterRow NewInspTemplateFilterRow() {
                return ((InspTemplateFilterRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspTemplateFilterRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspTemplateFilterRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspTemplateFilterRowChanged != null)) {
                    this.InspTemplateFilterRowChanged(this, new InspTemplateFilterRowChangeEvent(((InspTemplateFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspTemplateFilterRowChanging != null)) {
                    this.InspTemplateFilterRowChanging(this, new InspTemplateFilterRowChangeEvent(((InspTemplateFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspTemplateFilterRowDeleted != null)) {
                    this.InspTemplateFilterRowDeleted(this, new InspTemplateFilterRowChangeEvent(((InspTemplateFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspTemplateFilterRowDeleting != null)) {
                    this.InspTemplateFilterRowDeleting(this, new InspTemplateFilterRowChangeEvent(((InspTemplateFilterRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspTemplateFilterRow(InspTemplateFilterRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspTemplateFilterDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScheduledInspectionsDataTable : global::System.Data.TypedTableBase<ScheduledInspectionsRow> {
            
            private global::System.Data.DataColumn columntic_construction_project_name;
            
            private global::System.Data.DataColumn columnphase_name;
            
            private global::System.Data.DataColumn columnlot_number;
            
            private global::System.Data.DataColumn columndate_description;
            
            private global::System.Data.DataColumn columntract;
            
            private global::System.Data.DataColumn columnScheduled_Date;
            
            private global::System.Data.DataColumn columnUnit;
            
            private global::System.Data.DataColumn columnUniqueScheduledInspectionID;
            
            private global::System.Data.DataColumn columnbuilding;
            
            private global::System.Data.DataColumn columntic_construction_project_int;
            
            private global::System.Data.DataColumn columntic_construction_dt_lookup_id_int;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInspectionsDataTable() {
                this.TableName = "ScheduledInspections";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduledInspectionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScheduledInspectionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_nameColumn {
                get {
                    return this.columntic_construction_project_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phase_nameColumn {
                get {
                    return this.columnphase_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lot_numberColumn {
                get {
                    return this.columnlot_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_descriptionColumn {
                get {
                    return this.columndate_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tractColumn {
                get {
                    return this.columntract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Scheduled_DateColumn {
                get {
                    return this.columnScheduled_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitColumn {
                get {
                    return this.columnUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueScheduledInspectionIDColumn {
                get {
                    return this.columnUniqueScheduledInspectionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn buildingColumn {
                get {
                    return this.columnbuilding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_intColumn {
                get {
                    return this.columntic_construction_project_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_dt_lookup_id_intColumn {
                get {
                    return this.columntic_construction_dt_lookup_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInspectionsRow this[int index] {
                get {
                    return ((ScheduledInspectionsRow)(this.Rows[index]));
                }
            }
            
            public event ScheduledInspectionsRowChangeEventHandler ScheduledInspectionsRowChanging;
            
            public event ScheduledInspectionsRowChangeEventHandler ScheduledInspectionsRowChanged;
            
            public event ScheduledInspectionsRowChangeEventHandler ScheduledInspectionsRowDeleting;
            
            public event ScheduledInspectionsRowChangeEventHandler ScheduledInspectionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScheduledInspectionsRow(ScheduledInspectionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInspectionsRow AddScheduledInspectionsRow(string tic_construction_project_name, string phase_name, string lot_number, string date_description, string tract, System.DateTime Scheduled_Date, string Unit, string building, int tic_construction_project_int, int tic_construction_dt_lookup_id_int) {
                ScheduledInspectionsRow rowScheduledInspectionsRow = ((ScheduledInspectionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tic_construction_project_name,
                        phase_name,
                        lot_number,
                        date_description,
                        tract,
                        Scheduled_Date,
                        Unit,
                        null,
                        building,
                        tic_construction_project_int,
                        tic_construction_dt_lookup_id_int};
                rowScheduledInspectionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScheduledInspectionsRow);
                return rowScheduledInspectionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInspectionsRow FindByUniqueScheduledInspectionID(int UniqueScheduledInspectionID) {
                return ((ScheduledInspectionsRow)(this.Rows.Find(new object[] {
                            UniqueScheduledInspectionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScheduledInspectionsDataTable cln = ((ScheduledInspectionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScheduledInspectionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntic_construction_project_name = base.Columns["tic_construction_project_name"];
                this.columnphase_name = base.Columns["phase_name"];
                this.columnlot_number = base.Columns["lot_number"];
                this.columndate_description = base.Columns["date_description"];
                this.columntract = base.Columns["tract"];
                this.columnScheduled_Date = base.Columns["Scheduled_Date"];
                this.columnUnit = base.Columns["Unit"];
                this.columnUniqueScheduledInspectionID = base.Columns["UniqueScheduledInspectionID"];
                this.columnbuilding = base.Columns["building"];
                this.columntic_construction_project_int = base.Columns["tic_construction_project_int"];
                this.columntic_construction_dt_lookup_id_int = base.Columns["tic_construction_dt_lookup_id_int"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntic_construction_project_name = new global::System.Data.DataColumn("tic_construction_project_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_name);
                this.columnphase_name = new global::System.Data.DataColumn("phase_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphase_name);
                this.columnlot_number = new global::System.Data.DataColumn("lot_number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlot_number);
                this.columndate_description = new global::System.Data.DataColumn("date_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_description);
                this.columntract = new global::System.Data.DataColumn("tract", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntract);
                this.columnScheduled_Date = new global::System.Data.DataColumn("Scheduled_Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnScheduled_Date);
                this.columnUnit = new global::System.Data.DataColumn("Unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnit);
                this.columnUniqueScheduledInspectionID = new global::System.Data.DataColumn("UniqueScheduledInspectionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueScheduledInspectionID);
                this.columnbuilding = new global::System.Data.DataColumn("building", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuilding);
                this.columntic_construction_project_int = new global::System.Data.DataColumn("tic_construction_project_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_int);
                this.columntic_construction_dt_lookup_id_int = new global::System.Data.DataColumn("tic_construction_dt_lookup_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_dt_lookup_id_int);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUniqueScheduledInspectionID}, true));
                this.columntic_construction_project_name.MaxLength = 100;
                this.columnphase_name.MaxLength = 40;
                this.columnlot_number.MaxLength = 10;
                this.columndate_description.MaxLength = 100;
                this.columntract.MaxLength = 10;
                this.columnUniqueScheduledInspectionID.AutoIncrement = true;
                this.columnUniqueScheduledInspectionID.AutoIncrementSeed = -1;
                this.columnUniqueScheduledInspectionID.AutoIncrementStep = -1;
                this.columnUniqueScheduledInspectionID.AllowDBNull = false;
                this.columnUniqueScheduledInspectionID.Unique = true;
                this.columntic_construction_project_int.ReadOnly = true;
                this.columntic_construction_dt_lookup_id_int.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInspectionsRow NewScheduledInspectionsRow() {
                return ((ScheduledInspectionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScheduledInspectionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScheduledInspectionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScheduledInspectionsRowChanged != null)) {
                    this.ScheduledInspectionsRowChanged(this, new ScheduledInspectionsRowChangeEvent(((ScheduledInspectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScheduledInspectionsRowChanging != null)) {
                    this.ScheduledInspectionsRowChanging(this, new ScheduledInspectionsRowChangeEvent(((ScheduledInspectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScheduledInspectionsRowDeleted != null)) {
                    this.ScheduledInspectionsRowDeleted(this, new ScheduledInspectionsRowChangeEvent(((ScheduledInspectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScheduledInspectionsRowDeleting != null)) {
                    this.ScheduledInspectionsRowDeleting(this, new ScheduledInspectionsRowChangeEvent(((ScheduledInspectionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScheduledInspectionsRow(ScheduledInspectionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScheduledInspectionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectionStepTemplateDataTable : global::System.Data.TypedTableBase<InspectionStepTemplateRow> {
            
            private global::System.Data.DataColumn columninspection_template_id;
            
            private global::System.Data.DataColumn columninspection_step_template_id;
            
            private global::System.Data.DataColumn columnTIC_Inspection_Item;
            
            private global::System.Data.DataColumn columninspection_step_template_int;
            
            private global::System.Data.DataColumn columncategory_desc;
            
            private global::System.Data.DataColumn columncategory_id;
            
            private global::System.Data.DataColumn columncategory_ordinal;
            
            private global::System.Data.DataColumn columntic_Ordinal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepTemplateDataTable() {
                this.TableName = "InspectionStepTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionStepTemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectionStepTemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_template_idColumn {
                get {
                    return this.columninspection_template_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_step_template_idColumn {
                get {
                    return this.columninspection_step_template_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Inspection_ItemColumn {
                get {
                    return this.columnTIC_Inspection_Item;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_step_template_intColumn {
                get {
                    return this.columninspection_step_template_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_descColumn {
                get {
                    return this.columncategory_desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_idColumn {
                get {
                    return this.columncategory_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_ordinalColumn {
                get {
                    return this.columncategory_ordinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_OrdinalColumn {
                get {
                    return this.columntic_Ordinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepTemplateRow this[int index] {
                get {
                    return ((InspectionStepTemplateRow)(this.Rows[index]));
                }
            }
            
            public event InspectionStepTemplateRowChangeEventHandler InspectionStepTemplateRowChanging;
            
            public event InspectionStepTemplateRowChangeEventHandler InspectionStepTemplateRowChanged;
            
            public event InspectionStepTemplateRowChangeEventHandler InspectionStepTemplateRowDeleting;
            
            public event InspectionStepTemplateRowChangeEventHandler InspectionStepTemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectionStepTemplateRow(InspectionStepTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepTemplateRow AddInspectionStepTemplateRow(byte[] inspection_template_id, byte[] inspection_step_template_id, string TIC_Inspection_Item, int inspection_step_template_int, string category_desc, int category_id, int category_ordinal, int tic_Ordinal) {
                InspectionStepTemplateRow rowInspectionStepTemplateRow = ((InspectionStepTemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inspection_template_id,
                        inspection_step_template_id,
                        TIC_Inspection_Item,
                        inspection_step_template_int,
                        category_desc,
                        category_id,
                        category_ordinal,
                        tic_Ordinal};
                rowInspectionStepTemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectionStepTemplateRow);
                return rowInspectionStepTemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepTemplateRow FindByinspection_step_template_id(byte[] inspection_step_template_id) {
                return ((InspectionStepTemplateRow)(this.Rows.Find(new object[] {
                            inspection_step_template_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectionStepTemplateDataTable cln = ((InspectionStepTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectionStepTemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninspection_template_id = base.Columns["inspection_template_id"];
                this.columninspection_step_template_id = base.Columns["inspection_step_template_id"];
                this.columnTIC_Inspection_Item = base.Columns["TIC_Inspection_Item"];
                this.columninspection_step_template_int = base.Columns["inspection_step_template_int"];
                this.columncategory_desc = base.Columns["category_desc"];
                this.columncategory_id = base.Columns["category_id"];
                this.columncategory_ordinal = base.Columns["category_ordinal"];
                this.columntic_Ordinal = base.Columns["tic_Ordinal"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninspection_template_id = new global::System.Data.DataColumn("inspection_template_id", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_template_id);
                this.columninspection_step_template_id = new global::System.Data.DataColumn("inspection_step_template_id", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_step_template_id);
                this.columnTIC_Inspection_Item = new global::System.Data.DataColumn("TIC_Inspection_Item", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Inspection_Item);
                this.columninspection_step_template_int = new global::System.Data.DataColumn("inspection_step_template_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_step_template_int);
                this.columncategory_desc = new global::System.Data.DataColumn("category_desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_desc);
                this.columncategory_id = new global::System.Data.DataColumn("category_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_id);
                this.columncategory_ordinal = new global::System.Data.DataColumn("category_ordinal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_ordinal);
                this.columntic_Ordinal = new global::System.Data.DataColumn("tic_Ordinal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_Ordinal);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninspection_step_template_id}, true));
                this.columninspection_step_template_id.AllowDBNull = false;
                this.columninspection_step_template_id.Unique = true;
                this.columnTIC_Inspection_Item.MaxLength = 150;
                this.columninspection_step_template_int.ReadOnly = true;
                this.columncategory_desc.MaxLength = 150;
                this.columncategory_id.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepTemplateRow NewInspectionStepTemplateRow() {
                return ((InspectionStepTemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectionStepTemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectionStepTemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectionStepTemplateRowChanged != null)) {
                    this.InspectionStepTemplateRowChanged(this, new InspectionStepTemplateRowChangeEvent(((InspectionStepTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectionStepTemplateRowChanging != null)) {
                    this.InspectionStepTemplateRowChanging(this, new InspectionStepTemplateRowChangeEvent(((InspectionStepTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectionStepTemplateRowDeleted != null)) {
                    this.InspectionStepTemplateRowDeleted(this, new InspectionStepTemplateRowChangeEvent(((InspectionStepTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectionStepTemplateRowDeleting != null)) {
                    this.InspectionStepTemplateRowDeleting(this, new InspectionStepTemplateRowChangeEvent(((InspectionStepTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectionStepTemplateRow(InspectionStepTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectionStepTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectionTemplateDataTable : global::System.Data.TypedTableBase<InspectionTemplateRow> {
            
            private global::System.Data.DataColumn columninspection_template_id;
            
            private global::System.Data.DataColumn columninspection_template_id_int;
            
            private global::System.Data.DataColumn columninspection_type;
            
            private global::System.Data.DataColumn columnTIC_Template_Status;
            
            private global::System.Data.DataColumn columnTIC_Template_Version;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionTemplateDataTable() {
                this.TableName = "InspectionTemplate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionTemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectionTemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_template_idColumn {
                get {
                    return this.columninspection_template_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_template_id_intColumn {
                get {
                    return this.columninspection_template_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_typeColumn {
                get {
                    return this.columninspection_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Template_StatusColumn {
                get {
                    return this.columnTIC_Template_Status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Template_VersionColumn {
                get {
                    return this.columnTIC_Template_Version;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionTemplateRow this[int index] {
                get {
                    return ((InspectionTemplateRow)(this.Rows[index]));
                }
            }
            
            public event InspectionTemplateRowChangeEventHandler InspectionTemplateRowChanging;
            
            public event InspectionTemplateRowChangeEventHandler InspectionTemplateRowChanged;
            
            public event InspectionTemplateRowChangeEventHandler InspectionTemplateRowDeleting;
            
            public event InspectionTemplateRowChangeEventHandler InspectionTemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectionTemplateRow(InspectionTemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionTemplateRow AddInspectionTemplateRow(byte[] inspection_template_id, int inspection_template_id_int, string inspection_type, string TIC_Template_Status, string TIC_Template_Version) {
                InspectionTemplateRow rowInspectionTemplateRow = ((InspectionTemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inspection_template_id,
                        inspection_template_id_int,
                        inspection_type,
                        TIC_Template_Status,
                        TIC_Template_Version};
                rowInspectionTemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectionTemplateRow);
                return rowInspectionTemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionTemplateRow FindByinspection_template_id(byte[] inspection_template_id) {
                return ((InspectionTemplateRow)(this.Rows.Find(new object[] {
                            inspection_template_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectionTemplateDataTable cln = ((InspectionTemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectionTemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninspection_template_id = base.Columns["inspection_template_id"];
                this.columninspection_template_id_int = base.Columns["inspection_template_id_int"];
                this.columninspection_type = base.Columns["inspection_type"];
                this.columnTIC_Template_Status = base.Columns["TIC_Template_Status"];
                this.columnTIC_Template_Version = base.Columns["TIC_Template_Version"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninspection_template_id = new global::System.Data.DataColumn("inspection_template_id", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_template_id);
                this.columninspection_template_id_int = new global::System.Data.DataColumn("inspection_template_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_template_id_int);
                this.columninspection_type = new global::System.Data.DataColumn("inspection_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_type);
                this.columnTIC_Template_Status = new global::System.Data.DataColumn("TIC_Template_Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Template_Status);
                this.columnTIC_Template_Version = new global::System.Data.DataColumn("TIC_Template_Version", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Template_Version);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninspection_template_id}, true));
                this.columninspection_template_id.AllowDBNull = false;
                this.columninspection_template_id.Unique = true;
                this.columninspection_template_id_int.ReadOnly = true;
                this.columninspection_type.MaxLength = 100;
                this.columnTIC_Template_Status.MaxLength = 20;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionTemplateRow NewInspectionTemplateRow() {
                return ((InspectionTemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectionTemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectionTemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectionTemplateRowChanged != null)) {
                    this.InspectionTemplateRowChanged(this, new InspectionTemplateRowChangeEvent(((InspectionTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectionTemplateRowChanging != null)) {
                    this.InspectionTemplateRowChanging(this, new InspectionTemplateRowChangeEvent(((InspectionTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectionTemplateRowDeleted != null)) {
                    this.InspectionTemplateRowDeleted(this, new InspectionTemplateRowChangeEvent(((InspectionTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectionTemplateRowDeleting != null)) {
                    this.InspectionTemplateRowDeleting(this, new InspectionTemplateRowChangeEvent(((InspectionTemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectionTemplateRow(InspectionTemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectionTemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExplodedUnitsDataTable : global::System.Data.TypedTableBase<ExplodedUnitsRow> {
            
            private global::System.Data.DataColumn columntic_construction_project_name;
            
            private global::System.Data.DataColumn columnlot_number;
            
            private global::System.Data.DataColumn columnbuilding;
            
            private global::System.Data.DataColumn columnunit;
            
            private global::System.Data.DataColumn columndate_description;
            
            private global::System.Data.DataColumn columnphase;
            
            private global::System.Data.DataColumn columninspection_status;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExplodedUnitsDataTable() {
                this.TableName = "ExplodedUnits";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExplodedUnitsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExplodedUnitsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_nameColumn {
                get {
                    return this.columntic_construction_project_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn lot_numberColumn {
                get {
                    return this.columnlot_number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn buildingColumn {
                get {
                    return this.columnbuilding;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn unitColumn {
                get {
                    return this.columnunit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_descriptionColumn {
                get {
                    return this.columndate_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phaseColumn {
                get {
                    return this.columnphase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_statusColumn {
                get {
                    return this.columninspection_status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExplodedUnitsRow this[int index] {
                get {
                    return ((ExplodedUnitsRow)(this.Rows[index]));
                }
            }
            
            public event ExplodedUnitsRowChangeEventHandler ExplodedUnitsRowChanging;
            
            public event ExplodedUnitsRowChangeEventHandler ExplodedUnitsRowChanged;
            
            public event ExplodedUnitsRowChangeEventHandler ExplodedUnitsRowDeleting;
            
            public event ExplodedUnitsRowChangeEventHandler ExplodedUnitsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExplodedUnitsRow(ExplodedUnitsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExplodedUnitsRow AddExplodedUnitsRow(string tic_construction_project_name, string lot_number, string building, string unit, string date_description, string phase, string inspection_status) {
                ExplodedUnitsRow rowExplodedUnitsRow = ((ExplodedUnitsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tic_construction_project_name,
                        lot_number,
                        building,
                        unit,
                        date_description,
                        phase,
                        inspection_status};
                rowExplodedUnitsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExplodedUnitsRow);
                return rowExplodedUnitsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExplodedUnitsDataTable cln = ((ExplodedUnitsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExplodedUnitsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntic_construction_project_name = base.Columns["tic_construction_project_name"];
                this.columnlot_number = base.Columns["lot_number"];
                this.columnbuilding = base.Columns["building"];
                this.columnunit = base.Columns["unit"];
                this.columndate_description = base.Columns["date_description"];
                this.columnphase = base.Columns["phase"];
                this.columninspection_status = base.Columns["inspection_status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntic_construction_project_name = new global::System.Data.DataColumn("tic_construction_project_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_name);
                this.columnlot_number = new global::System.Data.DataColumn("lot_number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlot_number);
                this.columnbuilding = new global::System.Data.DataColumn("building", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbuilding);
                this.columnunit = new global::System.Data.DataColumn("unit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnunit);
                this.columndate_description = new global::System.Data.DataColumn("date_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_description);
                this.columnphase = new global::System.Data.DataColumn("phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphase);
                this.columninspection_status = new global::System.Data.DataColumn("inspection_status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_status);
                this.columntic_construction_project_name.MaxLength = 100;
                this.columnlot_number.MaxLength = 10;
                this.columnbuilding.MaxLength = 20;
                this.columnunit.MaxLength = 10;
                this.columndate_description.MaxLength = 100;
                this.columnphase.MaxLength = 40;
                this.columninspection_status.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExplodedUnitsRow NewExplodedUnitsRow() {
                return ((ExplodedUnitsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExplodedUnitsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExplodedUnitsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExplodedUnitsRowChanged != null)) {
                    this.ExplodedUnitsRowChanged(this, new ExplodedUnitsRowChangeEvent(((ExplodedUnitsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExplodedUnitsRowChanging != null)) {
                    this.ExplodedUnitsRowChanging(this, new ExplodedUnitsRowChangeEvent(((ExplodedUnitsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExplodedUnitsRowDeleted != null)) {
                    this.ExplodedUnitsRowDeleted(this, new ExplodedUnitsRowChangeEvent(((ExplodedUnitsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExplodedUnitsRowDeleting != null)) {
                    this.ExplodedUnitsRowDeleting(this, new ExplodedUnitsRowChangeEvent(((ExplodedUnitsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExplodedUnitsRow(ExplodedUnitsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExplodedUnitsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectionDataTable : global::System.Data.TypedTableBase<InspectionRow> {
            
            private global::System.Data.DataColumn columnUniqueKey;
            
            private global::System.Data.DataColumn columninspection_id_int;
            
            private global::System.Data.DataColumn columninspection_name;
            
            private global::System.Data.DataColumn columnconstruction_project_id_int;
            
            private global::System.Data.DataColumn columntic_construction_project_name;
            
            private global::System.Data.DataColumn columntic_inspector_id_int;
            
            private global::System.Data.DataColumn columntic_inspector_name;
            
            private global::System.Data.DataColumn columntic_created_by_id_int;
            
            private global::System.Data.DataColumn columntic_created_by_name;
            
            private global::System.Data.DataColumn columntic_supervisor_id_int;
            
            private global::System.Data.DataColumn columntic_sign_off_user_id_int;
            
            private global::System.Data.DataColumn columntic_sign_off_user_name;
            
            private global::System.Data.DataColumn columntic_reinsp_sign_off_user_id;
            
            private global::System.Data.DataColumn columntic_reinsp_sign_off_user_name;
            
            private global::System.Data.DataColumn columntic_esc_user_sign_off_Id_int;
            
            private global::System.Data.DataColumn columntic_esc_user_sign_off_name;
            
            private global::System.Data.DataColumn columntic_Construction_Phase;
            
            private global::System.Data.DataColumn columntic_inspection_type_id_int;
            
            private global::System.Data.DataColumn columntic_inspection_type;
            
            private global::System.Data.DataColumn columntic_scope;
            
            private global::System.Data.DataColumn columnTIC_Corrective_Action_Required;
            
            private global::System.Data.DataColumn columnDate_Complete;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columntic_supervisor_name;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnTIC_Corr_Action_Doc_Location;
            
            private global::System.Data.DataColumn columnTIC_Corrective_Action_Status;
            
            private global::System.Data.DataColumn columntic_submitted_by_id;
            
            private global::System.Data.DataColumn columntic_submitted_by_user_name;
            
            private global::System.Data.DataColumn columnTIC_Reinsp_Submitted_By_Id;
            
            private global::System.Data.DataColumn columnTIC_Reinsp_Submitted_By_name;
            
            private global::System.Data.DataColumn columntic_reinspection_due_date;
            
            private global::System.Data.DataColumn columntic_reinspection_complete_date;
            
            private global::System.Data.DataColumn columnscheduled_date;
            
            private global::System.Data.DataColumn columndate_assigned;
            
            private global::System.Data.DataColumn columnTIC_Last_Saved_By_Id;
            
            private global::System.Data.DataColumn columnTIC_Last_Saved_By_Name;
            
            private global::System.Data.DataColumn columnTIC_Reinspected_By_Id;
            
            private global::System.Data.DataColumn columnTIC_Reinspected_By_Name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionDataTable() {
                this.TableName = "Inspection";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UniqueKeyColumn {
                get {
                    return this.columnUniqueKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_id_intColumn {
                get {
                    return this.columninspection_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_nameColumn {
                get {
                    return this.columninspection_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn construction_project_id_intColumn {
                get {
                    return this.columnconstruction_project_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_nameColumn {
                get {
                    return this.columntic_construction_project_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_inspector_id_intColumn {
                get {
                    return this.columntic_inspector_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_inspector_nameColumn {
                get {
                    return this.columntic_inspector_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_created_by_id_intColumn {
                get {
                    return this.columntic_created_by_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_created_by_nameColumn {
                get {
                    return this.columntic_created_by_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_supervisor_id_intColumn {
                get {
                    return this.columntic_supervisor_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_sign_off_user_id_intColumn {
                get {
                    return this.columntic_sign_off_user_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_sign_off_user_nameColumn {
                get {
                    return this.columntic_sign_off_user_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_reinsp_sign_off_user_idColumn {
                get {
                    return this.columntic_reinsp_sign_off_user_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_reinsp_sign_off_user_nameColumn {
                get {
                    return this.columntic_reinsp_sign_off_user_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_esc_user_sign_off_Id_intColumn {
                get {
                    return this.columntic_esc_user_sign_off_Id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_esc_user_sign_off_nameColumn {
                get {
                    return this.columntic_esc_user_sign_off_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_Construction_PhaseColumn {
                get {
                    return this.columntic_Construction_Phase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_inspection_type_id_intColumn {
                get {
                    return this.columntic_inspection_type_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_inspection_typeColumn {
                get {
                    return this.columntic_inspection_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_scopeColumn {
                get {
                    return this.columntic_scope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Corrective_Action_RequiredColumn {
                get {
                    return this.columnTIC_Corrective_Action_Required;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Date_CompleteColumn {
                get {
                    return this.columnDate_Complete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_supervisor_nameColumn {
                get {
                    return this.columntic_supervisor_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Corr_Action_Doc_LocationColumn {
                get {
                    return this.columnTIC_Corr_Action_Doc_Location;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Corrective_Action_StatusColumn {
                get {
                    return this.columnTIC_Corrective_Action_Status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_submitted_by_idColumn {
                get {
                    return this.columntic_submitted_by_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_submitted_by_user_nameColumn {
                get {
                    return this.columntic_submitted_by_user_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Reinsp_Submitted_By_IdColumn {
                get {
                    return this.columnTIC_Reinsp_Submitted_By_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Reinsp_Submitted_By_nameColumn {
                get {
                    return this.columnTIC_Reinsp_Submitted_By_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_reinspection_due_dateColumn {
                get {
                    return this.columntic_reinspection_due_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_reinspection_complete_dateColumn {
                get {
                    return this.columntic_reinspection_complete_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scheduled_dateColumn {
                get {
                    return this.columnscheduled_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_assignedColumn {
                get {
                    return this.columndate_assigned;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Last_Saved_By_IdColumn {
                get {
                    return this.columnTIC_Last_Saved_By_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Last_Saved_By_NameColumn {
                get {
                    return this.columnTIC_Last_Saved_By_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Reinspected_By_IdColumn {
                get {
                    return this.columnTIC_Reinspected_By_Id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Reinspected_By_NameColumn {
                get {
                    return this.columnTIC_Reinspected_By_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionRow this[int index] {
                get {
                    return ((InspectionRow)(this.Rows[index]));
                }
            }
            
            public event InspectionRowChangeEventHandler InspectionRowChanging;
            
            public event InspectionRowChangeEventHandler InspectionRowChanged;
            
            public event InspectionRowChangeEventHandler InspectionRowDeleting;
            
            public event InspectionRowChangeEventHandler InspectionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectionRow(InspectionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionRow AddInspectionRow(
                        int inspection_id_int, 
                        string inspection_name, 
                        int construction_project_id_int, 
                        string tic_construction_project_name, 
                        int tic_inspector_id_int, 
                        string tic_inspector_name, 
                        int tic_created_by_id_int, 
                        string tic_created_by_name, 
                        int tic_supervisor_id_int, 
                        int tic_sign_off_user_id_int, 
                        string tic_sign_off_user_name, 
                        int tic_reinsp_sign_off_user_id, 
                        string tic_reinsp_sign_off_user_name, 
                        int tic_esc_user_sign_off_Id_int, 
                        string tic_esc_user_sign_off_name, 
                        string tic_Construction_Phase, 
                        int tic_inspection_type_id_int, 
                        string tic_inspection_type, 
                        string tic_scope, 
                        byte TIC_Corrective_Action_Required, 
                        System.DateTime Date_Complete, 
                        string Notes, 
                        string tic_supervisor_name, 
                        string status, 
                        string TIC_Corr_Action_Doc_Location, 
                        string TIC_Corrective_Action_Status, 
                        int tic_submitted_by_id, 
                        string tic_submitted_by_user_name, 
                        int TIC_Reinsp_Submitted_By_Id, 
                        string TIC_Reinsp_Submitted_By_name, 
                        System.DateTime tic_reinspection_due_date, 
                        System.DateTime tic_reinspection_complete_date, 
                        System.DateTime scheduled_date, 
                        System.DateTime date_assigned, 
                        int TIC_Last_Saved_By_Id, 
                        string TIC_Last_Saved_By_Name, 
                        int TIC_Reinspected_By_Id, 
                        string TIC_Reinspected_By_Name) {
                InspectionRow rowInspectionRow = ((InspectionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        inspection_id_int,
                        inspection_name,
                        construction_project_id_int,
                        tic_construction_project_name,
                        tic_inspector_id_int,
                        tic_inspector_name,
                        tic_created_by_id_int,
                        tic_created_by_name,
                        tic_supervisor_id_int,
                        tic_sign_off_user_id_int,
                        tic_sign_off_user_name,
                        tic_reinsp_sign_off_user_id,
                        tic_reinsp_sign_off_user_name,
                        tic_esc_user_sign_off_Id_int,
                        tic_esc_user_sign_off_name,
                        tic_Construction_Phase,
                        tic_inspection_type_id_int,
                        tic_inspection_type,
                        tic_scope,
                        TIC_Corrective_Action_Required,
                        Date_Complete,
                        Notes,
                        tic_supervisor_name,
                        status,
                        TIC_Corr_Action_Doc_Location,
                        TIC_Corrective_Action_Status,
                        tic_submitted_by_id,
                        tic_submitted_by_user_name,
                        TIC_Reinsp_Submitted_By_Id,
                        TIC_Reinsp_Submitted_By_name,
                        tic_reinspection_due_date,
                        tic_reinspection_complete_date,
                        scheduled_date,
                        date_assigned,
                        TIC_Last_Saved_By_Id,
                        TIC_Last_Saved_By_Name,
                        TIC_Reinspected_By_Id,
                        TIC_Reinspected_By_Name};
                rowInspectionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectionRow);
                return rowInspectionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionRow FindByUniqueKey(int UniqueKey) {
                return ((InspectionRow)(this.Rows.Find(new object[] {
                            UniqueKey})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectionDataTable cln = ((InspectionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUniqueKey = base.Columns["UniqueKey"];
                this.columninspection_id_int = base.Columns["inspection_id_int"];
                this.columninspection_name = base.Columns["inspection_name"];
                this.columnconstruction_project_id_int = base.Columns["construction_project_id_int"];
                this.columntic_construction_project_name = base.Columns["tic_construction_project_name"];
                this.columntic_inspector_id_int = base.Columns["tic_inspector_id_int"];
                this.columntic_inspector_name = base.Columns["tic_inspector_name"];
                this.columntic_created_by_id_int = base.Columns["tic_created_by_id_int"];
                this.columntic_created_by_name = base.Columns["tic_created_by_name"];
                this.columntic_supervisor_id_int = base.Columns["tic_supervisor_id_int"];
                this.columntic_sign_off_user_id_int = base.Columns["tic_sign_off_user_id_int"];
                this.columntic_sign_off_user_name = base.Columns["tic_sign_off_user_name"];
                this.columntic_reinsp_sign_off_user_id = base.Columns["tic_reinsp_sign_off_user_id"];
                this.columntic_reinsp_sign_off_user_name = base.Columns["tic_reinsp_sign_off_user_name"];
                this.columntic_esc_user_sign_off_Id_int = base.Columns["tic_esc_user_sign_off_Id_int"];
                this.columntic_esc_user_sign_off_name = base.Columns["tic_esc_user_sign_off_name"];
                this.columntic_Construction_Phase = base.Columns["tic_Construction_Phase"];
                this.columntic_inspection_type_id_int = base.Columns["tic_inspection_type_id_int"];
                this.columntic_inspection_type = base.Columns["tic_inspection_type"];
                this.columntic_scope = base.Columns["tic_scope"];
                this.columnTIC_Corrective_Action_Required = base.Columns["TIC_Corrective_Action_Required"];
                this.columnDate_Complete = base.Columns["Date_Complete"];
                this.columnNotes = base.Columns["Notes"];
                this.columntic_supervisor_name = base.Columns["tic_supervisor_name"];
                this.columnstatus = base.Columns["status"];
                this.columnTIC_Corr_Action_Doc_Location = base.Columns["TIC_Corr_Action_Doc_Location"];
                this.columnTIC_Corrective_Action_Status = base.Columns["TIC_Corrective_Action_Status"];
                this.columntic_submitted_by_id = base.Columns["tic_submitted_by_id"];
                this.columntic_submitted_by_user_name = base.Columns["tic_submitted_by_user_name"];
                this.columnTIC_Reinsp_Submitted_By_Id = base.Columns["TIC_Reinsp_Submitted_By_Id"];
                this.columnTIC_Reinsp_Submitted_By_name = base.Columns["TIC_Reinsp_Submitted_By_name"];
                this.columntic_reinspection_due_date = base.Columns["tic_reinspection_due_date"];
                this.columntic_reinspection_complete_date = base.Columns["tic_reinspection_complete_date"];
                this.columnscheduled_date = base.Columns["scheduled_date"];
                this.columndate_assigned = base.Columns["date_assigned"];
                this.columnTIC_Last_Saved_By_Id = base.Columns["TIC_Last_Saved_By_Id"];
                this.columnTIC_Last_Saved_By_Name = base.Columns["TIC_Last_Saved_By_Name"];
                this.columnTIC_Reinspected_By_Id = base.Columns["TIC_Reinspected_By_Id"];
                this.columnTIC_Reinspected_By_Name = base.Columns["TIC_Reinspected_By_Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUniqueKey = new global::System.Data.DataColumn("UniqueKey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUniqueKey);
                this.columninspection_id_int = new global::System.Data.DataColumn("inspection_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_id_int);
                this.columninspection_name = new global::System.Data.DataColumn("inspection_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_name);
                this.columnconstruction_project_id_int = new global::System.Data.DataColumn("construction_project_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstruction_project_id_int);
                this.columntic_construction_project_name = new global::System.Data.DataColumn("tic_construction_project_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_name);
                this.columntic_inspector_id_int = new global::System.Data.DataColumn("tic_inspector_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_inspector_id_int);
                this.columntic_inspector_name = new global::System.Data.DataColumn("tic_inspector_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_inspector_name);
                this.columntic_created_by_id_int = new global::System.Data.DataColumn("tic_created_by_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_created_by_id_int);
                this.columntic_created_by_name = new global::System.Data.DataColumn("tic_created_by_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_created_by_name);
                this.columntic_supervisor_id_int = new global::System.Data.DataColumn("tic_supervisor_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_supervisor_id_int);
                this.columntic_sign_off_user_id_int = new global::System.Data.DataColumn("tic_sign_off_user_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_sign_off_user_id_int);
                this.columntic_sign_off_user_name = new global::System.Data.DataColumn("tic_sign_off_user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_sign_off_user_name);
                this.columntic_reinsp_sign_off_user_id = new global::System.Data.DataColumn("tic_reinsp_sign_off_user_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_reinsp_sign_off_user_id);
                this.columntic_reinsp_sign_off_user_name = new global::System.Data.DataColumn("tic_reinsp_sign_off_user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_reinsp_sign_off_user_name);
                this.columntic_esc_user_sign_off_Id_int = new global::System.Data.DataColumn("tic_esc_user_sign_off_Id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_esc_user_sign_off_Id_int);
                this.columntic_esc_user_sign_off_name = new global::System.Data.DataColumn("tic_esc_user_sign_off_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_esc_user_sign_off_name);
                this.columntic_Construction_Phase = new global::System.Data.DataColumn("tic_Construction_Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_Construction_Phase);
                this.columntic_inspection_type_id_int = new global::System.Data.DataColumn("tic_inspection_type_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_inspection_type_id_int);
                this.columntic_inspection_type = new global::System.Data.DataColumn("tic_inspection_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_inspection_type);
                this.columntic_scope = new global::System.Data.DataColumn("tic_scope", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_scope);
                this.columnTIC_Corrective_Action_Required = new global::System.Data.DataColumn("TIC_Corrective_Action_Required", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Corrective_Action_Required);
                this.columnDate_Complete = new global::System.Data.DataColumn("Date_Complete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate_Complete);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columntic_supervisor_name = new global::System.Data.DataColumn("tic_supervisor_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_supervisor_name);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnTIC_Corr_Action_Doc_Location = new global::System.Data.DataColumn("TIC_Corr_Action_Doc_Location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Corr_Action_Doc_Location);
                this.columnTIC_Corrective_Action_Status = new global::System.Data.DataColumn("TIC_Corrective_Action_Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Corrective_Action_Status);
                this.columntic_submitted_by_id = new global::System.Data.DataColumn("tic_submitted_by_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_submitted_by_id);
                this.columntic_submitted_by_user_name = new global::System.Data.DataColumn("tic_submitted_by_user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_submitted_by_user_name);
                this.columnTIC_Reinsp_Submitted_By_Id = new global::System.Data.DataColumn("TIC_Reinsp_Submitted_By_Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Reinsp_Submitted_By_Id);
                this.columnTIC_Reinsp_Submitted_By_name = new global::System.Data.DataColumn("TIC_Reinsp_Submitted_By_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Reinsp_Submitted_By_name);
                this.columntic_reinspection_due_date = new global::System.Data.DataColumn("tic_reinspection_due_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_reinspection_due_date);
                this.columntic_reinspection_complete_date = new global::System.Data.DataColumn("tic_reinspection_complete_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_reinspection_complete_date);
                this.columnscheduled_date = new global::System.Data.DataColumn("scheduled_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscheduled_date);
                this.columndate_assigned = new global::System.Data.DataColumn("date_assigned", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_assigned);
                this.columnTIC_Last_Saved_By_Id = new global::System.Data.DataColumn("TIC_Last_Saved_By_Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Last_Saved_By_Id);
                this.columnTIC_Last_Saved_By_Name = new global::System.Data.DataColumn("TIC_Last_Saved_By_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Last_Saved_By_Name);
                this.columnTIC_Reinspected_By_Id = new global::System.Data.DataColumn("TIC_Reinspected_By_Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Reinspected_By_Id);
                this.columnTIC_Reinspected_By_Name = new global::System.Data.DataColumn("TIC_Reinspected_By_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Reinspected_By_Name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUniqueKey}, true));
                this.columnUniqueKey.AutoIncrement = true;
                this.columnUniqueKey.AutoIncrementSeed = -1;
                this.columnUniqueKey.AutoIncrementStep = -1;
                this.columnUniqueKey.AllowDBNull = false;
                this.columnUniqueKey.Unique = true;
                this.columninspection_id_int.ReadOnly = true;
                this.columninspection_name.MaxLength = 100;
                this.columnconstruction_project_id_int.ReadOnly = true;
                this.columntic_construction_project_name.MaxLength = 100;
                this.columntic_inspector_id_int.ReadOnly = true;
                this.columntic_inspector_id_int.DefaultValue = ((int)(0));
                this.columntic_inspector_name.ReadOnly = true;
                this.columntic_inspector_name.MaxLength = 61;
                this.columntic_created_by_id_int.ReadOnly = true;
                this.columntic_created_by_id_int.DefaultValue = ((int)(0));
                this.columntic_created_by_name.ReadOnly = true;
                this.columntic_created_by_name.MaxLength = 61;
                this.columntic_supervisor_id_int.ReadOnly = true;
                this.columntic_supervisor_id_int.DefaultValue = ((int)(0));
                this.columntic_sign_off_user_id_int.ReadOnly = true;
                this.columntic_sign_off_user_id_int.DefaultValue = ((int)(0));
                this.columntic_sign_off_user_name.ReadOnly = true;
                this.columntic_sign_off_user_name.MaxLength = 61;
                this.columntic_reinsp_sign_off_user_id.ReadOnly = true;
                this.columntic_reinsp_sign_off_user_id.DefaultValue = ((int)(0));
                this.columntic_reinsp_sign_off_user_name.ReadOnly = true;
                this.columntic_reinsp_sign_off_user_name.MaxLength = 61;
                this.columntic_esc_user_sign_off_Id_int.ReadOnly = true;
                this.columntic_esc_user_sign_off_Id_int.DefaultValue = ((int)(0));
                this.columntic_esc_user_sign_off_name.ReadOnly = true;
                this.columntic_esc_user_sign_off_name.MaxLength = 61;
                this.columntic_Construction_Phase.MaxLength = 20;
                this.columntic_inspection_type_id_int.ReadOnly = true;
                this.columntic_inspection_type.MaxLength = 100;
                this.columntic_scope.MaxLength = 30;
                this.columnTIC_Corrective_Action_Required.DefaultValue = ((byte)(0));
                this.columnNotes.MaxLength = 2147483647;
                this.columntic_supervisor_name.ReadOnly = true;
                this.columntic_supervisor_name.MaxLength = 61;
                this.columnstatus.MaxLength = 40;
                this.columnTIC_Corr_Action_Doc_Location.MaxLength = 15;
                this.columnTIC_Corrective_Action_Status.MaxLength = 20;
                this.columntic_submitted_by_id.ReadOnly = true;
                this.columntic_submitted_by_user_name.ReadOnly = true;
                this.columntic_submitted_by_user_name.MaxLength = 61;
                this.columnTIC_Reinsp_Submitted_By_Id.ReadOnly = true;
                this.columnTIC_Reinsp_Submitted_By_name.ReadOnly = true;
                this.columnTIC_Reinsp_Submitted_By_name.MaxLength = 61;
                this.columnTIC_Last_Saved_By_Id.ReadOnly = true;
                this.columnTIC_Last_Saved_By_Name.ReadOnly = true;
                this.columnTIC_Last_Saved_By_Name.MaxLength = 61;
                this.columnTIC_Reinspected_By_Id.ReadOnly = true;
                this.columnTIC_Reinspected_By_Name.ReadOnly = true;
                this.columnTIC_Reinspected_By_Name.MaxLength = 61;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionRow NewInspectionRow() {
                return ((InspectionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectionRowChanged != null)) {
                    this.InspectionRowChanged(this, new InspectionRowChangeEvent(((InspectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectionRowChanging != null)) {
                    this.InspectionRowChanging(this, new InspectionRowChangeEvent(((InspectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectionRowDeleted != null)) {
                    this.InspectionRowDeleted(this, new InspectionRowChangeEvent(((InspectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectionRowDeleting != null)) {
                    this.InspectionRowDeleting(this, new InspectionRowChangeEvent(((InspectionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectionRow(InspectionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectionStepDataTable : global::System.Data.TypedTableBase<InspectionStepRow> {
            
            private global::System.Data.DataColumn columninspection_step_id_int;
            
            private global::System.Data.DataColumn columncategory_ordinal;
            
            private global::System.Data.DataColumn columncategory_desc;
            
            private global::System.Data.DataColumn columnstep_ordinal;
            
            private global::System.Data.DataColumn columndescription;
            
            private global::System.Data.DataColumn columninspection_id_int;
            
            private global::System.Data.DataColumn columntic_acknowledgement;
            
            private global::System.Data.DataColumn columncategory_id_int;
            
            private global::System.Data.DataColumn columntic_acknowledgement_status;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepDataTable() {
                this.TableName = "InspectionStep";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionStepDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectionStepDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_step_id_intColumn {
                get {
                    return this.columninspection_step_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_ordinalColumn {
                get {
                    return this.columncategory_ordinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_descColumn {
                get {
                    return this.columncategory_desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn step_ordinalColumn {
                get {
                    return this.columnstep_ordinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn descriptionColumn {
                get {
                    return this.columndescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_id_intColumn {
                get {
                    return this.columninspection_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_acknowledgementColumn {
                get {
                    return this.columntic_acknowledgement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_id_intColumn {
                get {
                    return this.columncategory_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_acknowledgement_statusColumn {
                get {
                    return this.columntic_acknowledgement_status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepRow this[int index] {
                get {
                    return ((InspectionStepRow)(this.Rows[index]));
                }
            }
            
            public event InspectionStepRowChangeEventHandler InspectionStepRowChanging;
            
            public event InspectionStepRowChangeEventHandler InspectionStepRowChanged;
            
            public event InspectionStepRowChangeEventHandler InspectionStepRowDeleting;
            
            public event InspectionStepRowChangeEventHandler InspectionStepRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectionStepRow(InspectionStepRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepRow AddInspectionStepRow(int inspection_step_id_int, int category_ordinal, string category_desc, int step_ordinal, string description, int inspection_id_int, byte tic_acknowledgement, int category_id_int, string tic_acknowledgement_status) {
                InspectionStepRow rowInspectionStepRow = ((InspectionStepRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inspection_step_id_int,
                        category_ordinal,
                        category_desc,
                        step_ordinal,
                        description,
                        inspection_id_int,
                        tic_acknowledgement,
                        category_id_int,
                        tic_acknowledgement_status};
                rowInspectionStepRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectionStepRow);
                return rowInspectionStepRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectionStepDataTable cln = ((InspectionStepDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectionStepDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninspection_step_id_int = base.Columns["inspection_step_id_int"];
                this.columncategory_ordinal = base.Columns["category_ordinal"];
                this.columncategory_desc = base.Columns["category_desc"];
                this.columnstep_ordinal = base.Columns["step_ordinal"];
                this.columndescription = base.Columns["description"];
                this.columninspection_id_int = base.Columns["inspection_id_int"];
                this.columntic_acknowledgement = base.Columns["tic_acknowledgement"];
                this.columncategory_id_int = base.Columns["category_id_int"];
                this.columntic_acknowledgement_status = base.Columns["tic_acknowledgement_status"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninspection_step_id_int = new global::System.Data.DataColumn("inspection_step_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_step_id_int);
                this.columncategory_ordinal = new global::System.Data.DataColumn("category_ordinal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_ordinal);
                this.columncategory_desc = new global::System.Data.DataColumn("category_desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_desc);
                this.columnstep_ordinal = new global::System.Data.DataColumn("step_ordinal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstep_ordinal);
                this.columndescription = new global::System.Data.DataColumn("description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndescription);
                this.columninspection_id_int = new global::System.Data.DataColumn("inspection_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_id_int);
                this.columntic_acknowledgement = new global::System.Data.DataColumn("tic_acknowledgement", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_acknowledgement);
                this.columncategory_id_int = new global::System.Data.DataColumn("category_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_id_int);
                this.columntic_acknowledgement_status = new global::System.Data.DataColumn("tic_acknowledgement_status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_acknowledgement_status);
                this.columninspection_step_id_int.ReadOnly = true;
                this.columncategory_desc.MaxLength = 150;
                this.columndescription.MaxLength = 150;
                this.columninspection_id_int.ReadOnly = true;
                this.columncategory_id_int.ReadOnly = true;
                this.columntic_acknowledgement_status.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepRow NewInspectionStepRow() {
                return ((InspectionStepRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectionStepRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectionStepRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectionStepRowChanged != null)) {
                    this.InspectionStepRowChanged(this, new InspectionStepRowChangeEvent(((InspectionStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectionStepRowChanging != null)) {
                    this.InspectionStepRowChanging(this, new InspectionStepRowChangeEvent(((InspectionStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectionStepRowDeleted != null)) {
                    this.InspectionStepRowDeleted(this, new InspectionStepRowChangeEvent(((InspectionStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectionStepRowDeleting != null)) {
                    this.InspectionStepRowDeleting(this, new InspectionStepRowChangeEvent(((InspectionStepRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectionStepRow(InspectionStepRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectionStepDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ScopeItemsDataTable : global::System.Data.TypedTableBase<ScopeItemsRow> {
            
            private global::System.Data.DataColumn columnscope_item_id;
            
            private global::System.Data.DataColumn columnconstruction_project_id_int;
            
            private global::System.Data.DataColumn columntic_Construction_Project_name;
            
            private global::System.Data.DataColumn columnphase_nbr;
            
            private global::System.Data.DataColumn columninspection_type_id_int;
            
            private global::System.Data.DataColumn columninspection_type;
            
            private global::System.Data.DataColumn columnscope_item_nbr;
            
            private global::System.Data.DataColumn columninspection_id_int;
            
            private global::System.Data.DataColumn columnInspection_Scope;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScopeItemsDataTable() {
                this.TableName = "ScopeItems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScopeItemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ScopeItemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scope_item_idColumn {
                get {
                    return this.columnscope_item_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn construction_project_id_intColumn {
                get {
                    return this.columnconstruction_project_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_Construction_Project_nameColumn {
                get {
                    return this.columntic_Construction_Project_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn phase_nbrColumn {
                get {
                    return this.columnphase_nbr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_type_id_intColumn {
                get {
                    return this.columninspection_type_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_typeColumn {
                get {
                    return this.columninspection_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn scope_item_nbrColumn {
                get {
                    return this.columnscope_item_nbr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_id_intColumn {
                get {
                    return this.columninspection_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Inspection_ScopeColumn {
                get {
                    return this.columnInspection_Scope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScopeItemsRow this[int index] {
                get {
                    return ((ScopeItemsRow)(this.Rows[index]));
                }
            }
            
            public event ScopeItemsRowChangeEventHandler ScopeItemsRowChanging;
            
            public event ScopeItemsRowChangeEventHandler ScopeItemsRowChanged;
            
            public event ScopeItemsRowChangeEventHandler ScopeItemsRowDeleting;
            
            public event ScopeItemsRowChangeEventHandler ScopeItemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddScopeItemsRow(ScopeItemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScopeItemsRow AddScopeItemsRow(int scope_item_id, int construction_project_id_int, string tic_Construction_Project_name, string phase_nbr, int inspection_type_id_int, string inspection_type, string scope_item_nbr, int inspection_id_int, string Inspection_Scope) {
                ScopeItemsRow rowScopeItemsRow = ((ScopeItemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        scope_item_id,
                        construction_project_id_int,
                        tic_Construction_Project_name,
                        phase_nbr,
                        inspection_type_id_int,
                        inspection_type,
                        scope_item_nbr,
                        inspection_id_int,
                        Inspection_Scope};
                rowScopeItemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowScopeItemsRow);
                return rowScopeItemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ScopeItemsDataTable cln = ((ScopeItemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ScopeItemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnscope_item_id = base.Columns["scope_item_id"];
                this.columnconstruction_project_id_int = base.Columns["construction_project_id_int"];
                this.columntic_Construction_Project_name = base.Columns["tic_Construction_Project_name"];
                this.columnphase_nbr = base.Columns["phase_nbr"];
                this.columninspection_type_id_int = base.Columns["inspection_type_id_int"];
                this.columninspection_type = base.Columns["inspection_type"];
                this.columnscope_item_nbr = base.Columns["scope_item_nbr"];
                this.columninspection_id_int = base.Columns["inspection_id_int"];
                this.columnInspection_Scope = base.Columns["Inspection_Scope"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnscope_item_id = new global::System.Data.DataColumn("scope_item_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscope_item_id);
                this.columnconstruction_project_id_int = new global::System.Data.DataColumn("construction_project_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnconstruction_project_id_int);
                this.columntic_Construction_Project_name = new global::System.Data.DataColumn("tic_Construction_Project_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_Construction_Project_name);
                this.columnphase_nbr = new global::System.Data.DataColumn("phase_nbr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnphase_nbr);
                this.columninspection_type_id_int = new global::System.Data.DataColumn("inspection_type_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_type_id_int);
                this.columninspection_type = new global::System.Data.DataColumn("inspection_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_type);
                this.columnscope_item_nbr = new global::System.Data.DataColumn("scope_item_nbr", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnscope_item_nbr);
                this.columninspection_id_int = new global::System.Data.DataColumn("inspection_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_id_int);
                this.columnInspection_Scope = new global::System.Data.DataColumn("Inspection_Scope", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInspection_Scope);
                this.columnscope_item_id.ReadOnly = true;
                this.columnconstruction_project_id_int.ReadOnly = true;
                this.columntic_Construction_Project_name.MaxLength = 100;
                this.columnphase_nbr.MaxLength = 10;
                this.columninspection_type_id_int.ReadOnly = true;
                this.columninspection_type.MaxLength = 100;
                this.columnscope_item_nbr.MaxLength = 10;
                this.columninspection_id_int.ReadOnly = true;
                this.columnInspection_Scope.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScopeItemsRow NewScopeItemsRow() {
                return ((ScopeItemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ScopeItemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ScopeItemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScopeItemsRowChanged != null)) {
                    this.ScopeItemsRowChanged(this, new ScopeItemsRowChangeEvent(((ScopeItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScopeItemsRowChanging != null)) {
                    this.ScopeItemsRowChanging(this, new ScopeItemsRowChangeEvent(((ScopeItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScopeItemsRowDeleted != null)) {
                    this.ScopeItemsRowDeleted(this, new ScopeItemsRowChangeEvent(((ScopeItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScopeItemsRowDeleting != null)) {
                    this.ScopeItemsRowDeleting(this, new ScopeItemsRowChangeEvent(((ScopeItemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveScopeItemsRow(ScopeItemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ScopeItemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectionListDataTable : global::System.Data.TypedTableBase<InspectionListRow> {
            
            private global::System.Data.DataColumn columntic_construction_project_id_int;
            
            private global::System.Data.DataColumn columntic_construction_project_name;
            
            private global::System.Data.DataColumn columnTIC_Construction_Phase;
            
            private global::System.Data.DataColumn columntic_scope;
            
            private global::System.Data.DataColumn columntic_inspection_type_id_int;
            
            private global::System.Data.DataColumn columninspection_type_name;
            
            private global::System.Data.DataColumn columndue_date;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columninspection_id_int;
            
            private global::System.Data.DataColumn columndate_complete;
            
            private global::System.Data.DataColumn columnlast_saved_by_id;
            
            private global::System.Data.DataColumn columnlast_saved_by_user_name;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionListDataTable() {
                this.TableName = "InspectionList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectionListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_id_intColumn {
                get {
                    return this.columntic_construction_project_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_construction_project_nameColumn {
                get {
                    return this.columntic_construction_project_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TIC_Construction_PhaseColumn {
                get {
                    return this.columnTIC_Construction_Phase;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_scopeColumn {
                get {
                    return this.columntic_scope;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_inspection_type_id_intColumn {
                get {
                    return this.columntic_inspection_type_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_type_nameColumn {
                get {
                    return this.columninspection_type_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn due_dateColumn {
                get {
                    return this.columndue_date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_id_intColumn {
                get {
                    return this.columninspection_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_completeColumn {
                get {
                    return this.columndate_complete;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn last_saved_by_idColumn {
                get {
                    return this.columnlast_saved_by_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn last_saved_by_user_nameColumn {
                get {
                    return this.columnlast_saved_by_user_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionListRow this[int index] {
                get {
                    return ((InspectionListRow)(this.Rows[index]));
                }
            }
            
            public event InspectionListRowChangeEventHandler InspectionListRowChanging;
            
            public event InspectionListRowChangeEventHandler InspectionListRowChanged;
            
            public event InspectionListRowChangeEventHandler InspectionListRowDeleting;
            
            public event InspectionListRowChangeEventHandler InspectionListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectionListRow(InspectionListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionListRow AddInspectionListRow(int tic_construction_project_id_int, string tic_construction_project_name, string TIC_Construction_Phase, string tic_scope, int tic_inspection_type_id_int, string inspection_type_name, System.DateTime due_date, string status, int inspection_id_int, System.DateTime date_complete, int last_saved_by_id, string last_saved_by_user_name) {
                InspectionListRow rowInspectionListRow = ((InspectionListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tic_construction_project_id_int,
                        tic_construction_project_name,
                        TIC_Construction_Phase,
                        tic_scope,
                        tic_inspection_type_id_int,
                        inspection_type_name,
                        due_date,
                        status,
                        inspection_id_int,
                        date_complete,
                        last_saved_by_id,
                        last_saved_by_user_name};
                rowInspectionListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectionListRow);
                return rowInspectionListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionListRow FindByinspection_id_int(int inspection_id_int) {
                return ((InspectionListRow)(this.Rows.Find(new object[] {
                            inspection_id_int})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectionListDataTable cln = ((InspectionListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectionListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntic_construction_project_id_int = base.Columns["tic_construction_project_id_int"];
                this.columntic_construction_project_name = base.Columns["tic_construction_project_name"];
                this.columnTIC_Construction_Phase = base.Columns["TIC_Construction_Phase"];
                this.columntic_scope = base.Columns["tic_scope"];
                this.columntic_inspection_type_id_int = base.Columns["tic_inspection_type_id_int"];
                this.columninspection_type_name = base.Columns["inspection_type_name"];
                this.columndue_date = base.Columns["due_date"];
                this.columnstatus = base.Columns["status"];
                this.columninspection_id_int = base.Columns["inspection_id_int"];
                this.columndate_complete = base.Columns["date_complete"];
                this.columnlast_saved_by_id = base.Columns["last_saved_by_id"];
                this.columnlast_saved_by_user_name = base.Columns["last_saved_by_user_name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntic_construction_project_id_int = new global::System.Data.DataColumn("tic_construction_project_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_id_int);
                this.columntic_construction_project_name = new global::System.Data.DataColumn("tic_construction_project_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_construction_project_name);
                this.columnTIC_Construction_Phase = new global::System.Data.DataColumn("TIC_Construction_Phase", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIC_Construction_Phase);
                this.columntic_scope = new global::System.Data.DataColumn("tic_scope", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_scope);
                this.columntic_inspection_type_id_int = new global::System.Data.DataColumn("tic_inspection_type_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_inspection_type_id_int);
                this.columninspection_type_name = new global::System.Data.DataColumn("inspection_type_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_type_name);
                this.columndue_date = new global::System.Data.DataColumn("due_date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndue_date);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columninspection_id_int = new global::System.Data.DataColumn("inspection_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_id_int);
                this.columndate_complete = new global::System.Data.DataColumn("date_complete", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_complete);
                this.columnlast_saved_by_id = new global::System.Data.DataColumn("last_saved_by_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlast_saved_by_id);
                this.columnlast_saved_by_user_name = new global::System.Data.DataColumn("last_saved_by_user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlast_saved_by_user_name);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columninspection_id_int}, true));
                this.columntic_construction_project_id_int.ReadOnly = true;
                this.columntic_construction_project_name.MaxLength = 100;
                this.columnTIC_Construction_Phase.MaxLength = 20;
                this.columntic_scope.MaxLength = 30;
                this.columntic_inspection_type_id_int.ReadOnly = true;
                this.columninspection_type_name.MaxLength = 100;
                this.columnstatus.MaxLength = 40;
                this.columninspection_id_int.AllowDBNull = false;
                this.columninspection_id_int.ReadOnly = true;
                this.columninspection_id_int.Unique = true;
                this.columnlast_saved_by_id.ReadOnly = true;
                this.columnlast_saved_by_user_name.ReadOnly = true;
                this.columnlast_saved_by_user_name.MaxLength = 61;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionListRow NewInspectionListRow() {
                return ((InspectionListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectionListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectionListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectionListRowChanged != null)) {
                    this.InspectionListRowChanged(this, new InspectionListRowChangeEvent(((InspectionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectionListRowChanging != null)) {
                    this.InspectionListRowChanging(this, new InspectionListRowChangeEvent(((InspectionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectionListRowDeleted != null)) {
                    this.InspectionListRowDeleted(this, new InspectionListRowChangeEvent(((InspectionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectionListRowDeleting != null)) {
                    this.InspectionListRowDeleting(this, new InspectionListRowChangeEvent(((InspectionListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectionListRow(InspectionListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectionListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MiscellaneousCategoryDataTable : global::System.Data.TypedTableBase<MiscellaneousCategoryRow> {
            
            private global::System.Data.DataColumn columncategory_id_int;
            
            private global::System.Data.DataColumn columnordinal;
            
            private global::System.Data.DataColumn columncategory_desc;
            
            private global::System.Data.DataColumn columninspection_id_int;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MiscellaneousCategoryDataTable() {
                this.TableName = "MiscellaneousCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MiscellaneousCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MiscellaneousCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_id_intColumn {
                get {
                    return this.columncategory_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ordinalColumn {
                get {
                    return this.columnordinal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn category_descColumn {
                get {
                    return this.columncategory_desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_id_intColumn {
                get {
                    return this.columninspection_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MiscellaneousCategoryRow this[int index] {
                get {
                    return ((MiscellaneousCategoryRow)(this.Rows[index]));
                }
            }
            
            public event MiscellaneousCategoryRowChangeEventHandler MiscellaneousCategoryRowChanging;
            
            public event MiscellaneousCategoryRowChangeEventHandler MiscellaneousCategoryRowChanged;
            
            public event MiscellaneousCategoryRowChangeEventHandler MiscellaneousCategoryRowDeleting;
            
            public event MiscellaneousCategoryRowChangeEventHandler MiscellaneousCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMiscellaneousCategoryRow(MiscellaneousCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MiscellaneousCategoryRow AddMiscellaneousCategoryRow(int category_id_int, int ordinal, string category_desc, int inspection_id_int) {
                MiscellaneousCategoryRow rowMiscellaneousCategoryRow = ((MiscellaneousCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        category_id_int,
                        ordinal,
                        category_desc,
                        inspection_id_int};
                rowMiscellaneousCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMiscellaneousCategoryRow);
                return rowMiscellaneousCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MiscellaneousCategoryDataTable cln = ((MiscellaneousCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MiscellaneousCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncategory_id_int = base.Columns["category_id_int"];
                this.columnordinal = base.Columns["ordinal"];
                this.columncategory_desc = base.Columns["category_desc"];
                this.columninspection_id_int = base.Columns["inspection_id_int"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncategory_id_int = new global::System.Data.DataColumn("category_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_id_int);
                this.columnordinal = new global::System.Data.DataColumn("ordinal", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnordinal);
                this.columncategory_desc = new global::System.Data.DataColumn("category_desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncategory_desc);
                this.columninspection_id_int = new global::System.Data.DataColumn("inspection_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_id_int);
                this.columncategory_id_int.ReadOnly = true;
                this.columncategory_desc.MaxLength = 150;
                this.columninspection_id_int.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MiscellaneousCategoryRow NewMiscellaneousCategoryRow() {
                return ((MiscellaneousCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MiscellaneousCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MiscellaneousCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MiscellaneousCategoryRowChanged != null)) {
                    this.MiscellaneousCategoryRowChanged(this, new MiscellaneousCategoryRowChangeEvent(((MiscellaneousCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MiscellaneousCategoryRowChanging != null)) {
                    this.MiscellaneousCategoryRowChanging(this, new MiscellaneousCategoryRowChangeEvent(((MiscellaneousCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MiscellaneousCategoryRowDeleted != null)) {
                    this.MiscellaneousCategoryRowDeleted(this, new MiscellaneousCategoryRowChangeEvent(((MiscellaneousCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MiscellaneousCategoryRowDeleting != null)) {
                    this.MiscellaneousCategoryRowDeleting(this, new MiscellaneousCategoryRowChangeEvent(((MiscellaneousCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMiscellaneousCategoryRow(MiscellaneousCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MiscellaneousCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QADocumentsDataTable : global::System.Data.TypedTableBase<QADocumentsRow> {
            
            private global::System.Data.DataColumn columnqa_documents_id_int;
            
            private global::System.Data.DataColumn columninspection_id_int;
            
            private global::System.Data.DataColumn columndocument_description;
            
            private global::System.Data.DataColumn columnqa_document_path;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QADocumentsDataTable() {
                this.TableName = "QADocuments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QADocumentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QADocumentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qa_documents_id_intColumn {
                get {
                    return this.columnqa_documents_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_id_intColumn {
                get {
                    return this.columninspection_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn document_descriptionColumn {
                get {
                    return this.columndocument_description;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn qa_document_pathColumn {
                get {
                    return this.columnqa_document_path;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QADocumentsRow this[int index] {
                get {
                    return ((QADocumentsRow)(this.Rows[index]));
                }
            }
            
            public event QADocumentsRowChangeEventHandler QADocumentsRowChanging;
            
            public event QADocumentsRowChangeEventHandler QADocumentsRowChanged;
            
            public event QADocumentsRowChangeEventHandler QADocumentsRowDeleting;
            
            public event QADocumentsRowChangeEventHandler QADocumentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQADocumentsRow(QADocumentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QADocumentsRow AddQADocumentsRow(int qa_documents_id_int, int inspection_id_int, string document_description, string qa_document_path) {
                QADocumentsRow rowQADocumentsRow = ((QADocumentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        qa_documents_id_int,
                        inspection_id_int,
                        document_description,
                        qa_document_path};
                rowQADocumentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQADocumentsRow);
                return rowQADocumentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QADocumentsDataTable cln = ((QADocumentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QADocumentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnqa_documents_id_int = base.Columns["qa_documents_id_int"];
                this.columninspection_id_int = base.Columns["inspection_id_int"];
                this.columndocument_description = base.Columns["document_description"];
                this.columnqa_document_path = base.Columns["qa_document_path"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnqa_documents_id_int = new global::System.Data.DataColumn("qa_documents_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqa_documents_id_int);
                this.columninspection_id_int = new global::System.Data.DataColumn("inspection_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_id_int);
                this.columndocument_description = new global::System.Data.DataColumn("document_description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndocument_description);
                this.columnqa_document_path = new global::System.Data.DataColumn("qa_document_path", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnqa_document_path);
                this.columnqa_documents_id_int.ReadOnly = true;
                this.columninspection_id_int.ReadOnly = true;
                this.columndocument_description.MaxLength = 150;
                this.columnqa_document_path.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QADocumentsRow NewQADocumentsRow() {
                return ((QADocumentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QADocumentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QADocumentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QADocumentsRowChanged != null)) {
                    this.QADocumentsRowChanged(this, new QADocumentsRowChangeEvent(((QADocumentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QADocumentsRowChanging != null)) {
                    this.QADocumentsRowChanging(this, new QADocumentsRowChangeEvent(((QADocumentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QADocumentsRowDeleted != null)) {
                    this.QADocumentsRowDeleted(this, new QADocumentsRowChangeEvent(((QADocumentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QADocumentsRowDeleting != null)) {
                    this.QADocumentsRowDeleting(this, new QADocumentsRowChangeEvent(((QADocumentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQADocumentsRow(QADocumentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QADocumentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class QAWeblinksDataTable : global::System.Data.TypedTableBase<QAWeblinksRow> {
            
            private global::System.Data.DataColumn columntic_qa_weblinks_id_int;
            
            private global::System.Data.DataColumn columninspection_id_int;
            
            private global::System.Data.DataColumn columnurl_desc;
            
            private global::System.Data.DataColumn columnurl;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QAWeblinksDataTable() {
                this.TableName = "QAWeblinks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QAWeblinksDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected QAWeblinksDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tic_qa_weblinks_id_intColumn {
                get {
                    return this.columntic_qa_weblinks_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_id_intColumn {
                get {
                    return this.columninspection_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn url_descColumn {
                get {
                    return this.columnurl_desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn urlColumn {
                get {
                    return this.columnurl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QAWeblinksRow this[int index] {
                get {
                    return ((QAWeblinksRow)(this.Rows[index]));
                }
            }
            
            public event QAWeblinksRowChangeEventHandler QAWeblinksRowChanging;
            
            public event QAWeblinksRowChangeEventHandler QAWeblinksRowChanged;
            
            public event QAWeblinksRowChangeEventHandler QAWeblinksRowDeleting;
            
            public event QAWeblinksRowChangeEventHandler QAWeblinksRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddQAWeblinksRow(QAWeblinksRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QAWeblinksRow AddQAWeblinksRow(int tic_qa_weblinks_id_int, int inspection_id_int, string url_desc, string url) {
                QAWeblinksRow rowQAWeblinksRow = ((QAWeblinksRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        tic_qa_weblinks_id_int,
                        inspection_id_int,
                        url_desc,
                        url};
                rowQAWeblinksRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowQAWeblinksRow);
                return rowQAWeblinksRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                QAWeblinksDataTable cln = ((QAWeblinksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new QAWeblinksDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntic_qa_weblinks_id_int = base.Columns["tic_qa_weblinks_id_int"];
                this.columninspection_id_int = base.Columns["inspection_id_int"];
                this.columnurl_desc = base.Columns["url_desc"];
                this.columnurl = base.Columns["url"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntic_qa_weblinks_id_int = new global::System.Data.DataColumn("tic_qa_weblinks_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntic_qa_weblinks_id_int);
                this.columninspection_id_int = new global::System.Data.DataColumn("inspection_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_id_int);
                this.columnurl_desc = new global::System.Data.DataColumn("url_desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnurl_desc);
                this.columnurl = new global::System.Data.DataColumn("url", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnurl);
                this.columntic_qa_weblinks_id_int.ReadOnly = true;
                this.columninspection_id_int.ReadOnly = true;
                this.columnurl_desc.MaxLength = 2147483647;
                this.columnurl.MaxLength = 150;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QAWeblinksRow NewQAWeblinksRow() {
                return ((QAWeblinksRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new QAWeblinksRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(QAWeblinksRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.QAWeblinksRowChanged != null)) {
                    this.QAWeblinksRowChanged(this, new QAWeblinksRowChangeEvent(((QAWeblinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.QAWeblinksRowChanging != null)) {
                    this.QAWeblinksRowChanging(this, new QAWeblinksRowChangeEvent(((QAWeblinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.QAWeblinksRowDeleted != null)) {
                    this.QAWeblinksRowDeleted(this, new QAWeblinksRowChangeEvent(((QAWeblinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.QAWeblinksRowDeleting != null)) {
                    this.QAWeblinksRowDeleting(this, new QAWeblinksRowChangeEvent(((QAWeblinksRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveQAWeblinksRow(QAWeblinksRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "QAWeblinksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectionStatusDataTable : global::System.Data.TypedTableBase<InspectionStatusRow> {
            
            private global::System.Data.DataColumn columninspection_id_int;
            
            private global::System.Data.DataColumn columninspection_name;
            
            private global::System.Data.DataColumn columnstatus;
            
            private global::System.Data.DataColumn columnlast_saved_by_id;
            
            private global::System.Data.DataColumn columnlast_saved_by_user_name;
            
            private global::System.Data.DataColumn columnrole_;
            
            private global::System.Data.DataColumn columncompany_Type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusDataTable() {
                this.TableName = "InspectionStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectionStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_id_intColumn {
                get {
                    return this.columninspection_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn inspection_nameColumn {
                get {
                    return this.columninspection_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn statusColumn {
                get {
                    return this.columnstatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn last_saved_by_idColumn {
                get {
                    return this.columnlast_saved_by_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn last_saved_by_user_nameColumn {
                get {
                    return this.columnlast_saved_by_user_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn role_Column {
                get {
                    return this.columnrole_;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn company_TypeColumn {
                get {
                    return this.columncompany_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusRow this[int index] {
                get {
                    return ((InspectionStatusRow)(this.Rows[index]));
                }
            }
            
            public event InspectionStatusRowChangeEventHandler InspectionStatusRowChanging;
            
            public event InspectionStatusRowChangeEventHandler InspectionStatusRowChanged;
            
            public event InspectionStatusRowChangeEventHandler InspectionStatusRowDeleting;
            
            public event InspectionStatusRowChangeEventHandler InspectionStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectionStatusRow(InspectionStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusRow AddInspectionStatusRow(int inspection_id_int, string inspection_name, string status, int last_saved_by_id, string last_saved_by_user_name, string role_, string company_Type) {
                InspectionStatusRow rowInspectionStatusRow = ((InspectionStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        inspection_id_int,
                        inspection_name,
                        status,
                        last_saved_by_id,
                        last_saved_by_user_name,
                        role_,
                        company_Type};
                rowInspectionStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectionStatusRow);
                return rowInspectionStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectionStatusDataTable cln = ((InspectionStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectionStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columninspection_id_int = base.Columns["inspection_id_int"];
                this.columninspection_name = base.Columns["inspection_name"];
                this.columnstatus = base.Columns["status"];
                this.columnlast_saved_by_id = base.Columns["last_saved_by_id"];
                this.columnlast_saved_by_user_name = base.Columns["last_saved_by_user_name"];
                this.columnrole_ = base.Columns["role_"];
                this.columncompany_Type = base.Columns["company_Type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columninspection_id_int = new global::System.Data.DataColumn("inspection_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_id_int);
                this.columninspection_name = new global::System.Data.DataColumn("inspection_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columninspection_name);
                this.columnstatus = new global::System.Data.DataColumn("status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstatus);
                this.columnlast_saved_by_id = new global::System.Data.DataColumn("last_saved_by_id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlast_saved_by_id);
                this.columnlast_saved_by_user_name = new global::System.Data.DataColumn("last_saved_by_user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlast_saved_by_user_name);
                this.columnrole_ = new global::System.Data.DataColumn("role_", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrole_);
                this.columncompany_Type = new global::System.Data.DataColumn("company_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncompany_Type);
                this.columninspection_id_int.ReadOnly = true;
                this.columninspection_name.MaxLength = 100;
                this.columnstatus.MaxLength = 40;
                this.columnlast_saved_by_id.ReadOnly = true;
                this.columnlast_saved_by_user_name.ReadOnly = true;
                this.columnlast_saved_by_user_name.MaxLength = 61;
                this.columnrole_.MaxLength = 40;
                this.columncompany_Type.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusRow NewInspectionStatusRow() {
                return ((InspectionStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectionStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectionStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectionStatusRowChanged != null)) {
                    this.InspectionStatusRowChanged(this, new InspectionStatusRowChangeEvent(((InspectionStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectionStatusRowChanging != null)) {
                    this.InspectionStatusRowChanging(this, new InspectionStatusRowChangeEvent(((InspectionStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectionStatusRowDeleted != null)) {
                    this.InspectionStatusRowDeleted(this, new InspectionStatusRowChangeEvent(((InspectionStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectionStatusRowDeleting != null)) {
                    this.InspectionStatusRowDeleting(this, new InspectionStatusRowChangeEvent(((InspectionStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectionStatusRow(InspectionStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectionStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class InspectionStatusesDataTable : global::System.Data.TypedTableBase<InspectionStatusesRow> {
            
            private global::System.Data.DataColumn columnuser_choice_choices_id;
            
            private global::System.Data.DataColumn columnrn_descriptor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusesDataTable() {
                this.TableName = "InspectionStatuses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionStatusesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected InspectionStatusesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_choice_choices_idColumn {
                get {
                    return this.columnuser_choice_choices_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rn_descriptorColumn {
                get {
                    return this.columnrn_descriptor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusesRow this[int index] {
                get {
                    return ((InspectionStatusesRow)(this.Rows[index]));
                }
            }
            
            public event InspectionStatusesRowChangeEventHandler InspectionStatusesRowChanging;
            
            public event InspectionStatusesRowChangeEventHandler InspectionStatusesRowChanged;
            
            public event InspectionStatusesRowChangeEventHandler InspectionStatusesRowDeleting;
            
            public event InspectionStatusesRowChangeEventHandler InspectionStatusesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddInspectionStatusesRow(InspectionStatusesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusesRow AddInspectionStatusesRow(byte[] user_choice_choices_id, string rn_descriptor) {
                InspectionStatusesRow rowInspectionStatusesRow = ((InspectionStatusesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        user_choice_choices_id,
                        rn_descriptor};
                rowInspectionStatusesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowInspectionStatusesRow);
                return rowInspectionStatusesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusesRow FindByuser_choice_choices_id(byte[] user_choice_choices_id) {
                return ((InspectionStatusesRow)(this.Rows.Find(new object[] {
                            user_choice_choices_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                InspectionStatusesDataTable cln = ((InspectionStatusesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new InspectionStatusesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuser_choice_choices_id = base.Columns["user_choice_choices_id"];
                this.columnrn_descriptor = base.Columns["rn_descriptor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuser_choice_choices_id = new global::System.Data.DataColumn("user_choice_choices_id", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_choice_choices_id);
                this.columnrn_descriptor = new global::System.Data.DataColumn("rn_descriptor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrn_descriptor);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnuser_choice_choices_id}, true));
                this.columnuser_choice_choices_id.AllowDBNull = false;
                this.columnuser_choice_choices_id.Unique = true;
                this.columnrn_descriptor.MaxLength = 80;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusesRow NewInspectionStatusesRow() {
                return ((InspectionStatusesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new InspectionStatusesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(InspectionStatusesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.InspectionStatusesRowChanged != null)) {
                    this.InspectionStatusesRowChanged(this, new InspectionStatusesRowChangeEvent(((InspectionStatusesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.InspectionStatusesRowChanging != null)) {
                    this.InspectionStatusesRowChanging(this, new InspectionStatusesRowChangeEvent(((InspectionStatusesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.InspectionStatusesRowDeleted != null)) {
                    this.InspectionStatusesRowDeleted(this, new InspectionStatusesRowChangeEvent(((InspectionStatusesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.InspectionStatusesRowDeleting != null)) {
                    this.InspectionStatusesRowDeleting(this, new InspectionStatusesRowChangeEvent(((InspectionStatusesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveInspectionStatusesRow(InspectionStatusesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "InspectionStatusesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContactDataTable : global::System.Data.TypedTableBase<ContactRow> {
            
            private global::System.Data.DataColumn columncontact_id_int;
            
            private global::System.Data.DataColumn columncompany_id_int;
            
            private global::System.Data.DataColumn columnlogin_name;
            
            private global::System.Data.DataColumn columnemail;
            
            private global::System.Data.DataColumn columncompany_type;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactDataTable() {
                this.TableName = "Contact";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContactDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContactDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn contact_id_intColumn {
                get {
                    return this.columncontact_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn company_id_intColumn {
                get {
                    return this.columncompany_id_int;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn login_nameColumn {
                get {
                    return this.columnlogin_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn emailColumn {
                get {
                    return this.columnemail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn company_typeColumn {
                get {
                    return this.columncompany_type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactRow this[int index] {
                get {
                    return ((ContactRow)(this.Rows[index]));
                }
            }
            
            public event ContactRowChangeEventHandler ContactRowChanging;
            
            public event ContactRowChangeEventHandler ContactRowChanged;
            
            public event ContactRowChangeEventHandler ContactRowDeleting;
            
            public event ContactRowChangeEventHandler ContactRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContactRow(ContactRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactRow AddContactRow(int contact_id_int, int company_id_int, string login_name, string email, string company_type) {
                ContactRow rowContactRow = ((ContactRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        contact_id_int,
                        company_id_int,
                        login_name,
                        email,
                        company_type};
                rowContactRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContactRow);
                return rowContactRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContactDataTable cln = ((ContactDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContactDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columncontact_id_int = base.Columns["contact_id_int"];
                this.columncompany_id_int = base.Columns["company_id_int"];
                this.columnlogin_name = base.Columns["login_name"];
                this.columnemail = base.Columns["email"];
                this.columncompany_type = base.Columns["company_type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columncontact_id_int = new global::System.Data.DataColumn("contact_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncontact_id_int);
                this.columncompany_id_int = new global::System.Data.DataColumn("company_id_int", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncompany_id_int);
                this.columnlogin_name = new global::System.Data.DataColumn("login_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlogin_name);
                this.columnemail = new global::System.Data.DataColumn("email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnemail);
                this.columncompany_type = new global::System.Data.DataColumn("company_type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncompany_type);
                this.columncontact_id_int.ReadOnly = true;
                this.columncompany_id_int.ReadOnly = true;
                this.columnlogin_name.MaxLength = 32;
                this.columnemail.MaxLength = 100;
                this.columncompany_type.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactRow NewContactRow() {
                return ((ContactRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContactRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContactRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContactRowChanged != null)) {
                    this.ContactRowChanged(this, new ContactRowChangeEvent(((ContactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContactRowChanging != null)) {
                    this.ContactRowChanging(this, new ContactRowChangeEvent(((ContactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContactRowDeleted != null)) {
                    this.ContactRowDeleted(this, new ContactRowChangeEvent(((ContactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContactRowDeleting != null)) {
                    this.ContactRowDeleting(this, new ContactRowChangeEvent(((ContactRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContactRow(ContactRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                PivotalED ds = new PivotalED();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContactDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRow : global::System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] contact_id {
                get {
                    return ((byte[])(this[this.tableUser.contact_idColumn]));
                }
                set {
                    this[this.tableUser.contact_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string login_name {
                get {
                    try {
                        return ((string)(this[this.tableUser.login_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'login_name\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.login_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableUser.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'email\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string password_encrypt {
                get {
                    try {
                        return ((string)(this[this.tableUser.password_encryptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'password_encrypt\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.password_encryptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string first_name {
                get {
                    if (this.Isfirst_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableUser.first_nameColumn]));
                    }
                }
                set {
                    this[this.tableUser.first_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string last_name {
                get {
                    if (this.Islast_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableUser.last_nameColumn]));
                    }
                }
                set {
                    this[this.tableUser.last_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string middle_initial {
                get {
                    if (this.Ismiddle_initialNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableUser.middle_initialColumn]));
                    }
                }
                set {
                    this[this.tableUser.middle_initialColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string title {
                get {
                    if (this.IstitleNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableUser.titleColumn]));
                    }
                }
                set {
                    this[this.tableUser.titleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string suffix {
                get {
                    if (this.IssuffixNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableUser.suffixColumn]));
                    }
                }
                set {
                    this[this.tableUser.suffixColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string company_name {
                get {
                    if (this.Iscompany_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableUser.company_nameColumn]));
                    }
                }
                set {
                    this[this.tableUser.company_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email1 {
                get {
                    if (this.Isemail1Null()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableUser.email1Column]));
                    }
                }
                set {
                    this[this.tableUser.email1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int contact_id_int {
                get {
                    try {
                        return ((int)(this[this.tableUser.contact_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'contact_id_int\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.contact_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string company_type {
                get {
                    try {
                        return ((string)(this[this.tableUser.company_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'company_type\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.company_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string role {
                get {
                    try {
                        return ((string)(this[this.tableUser.roleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'role\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.roleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islogin_nameNull() {
                return this.IsNull(this.tableUser.login_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlogin_nameNull() {
                this[this.tableUser.login_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableUser.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableUser.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ispassword_encryptNull() {
                return this.IsNull(this.tableUser.password_encryptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setpassword_encryptNull() {
                this[this.tableUser.password_encryptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isfirst_nameNull() {
                return this.IsNull(this.tableUser.first_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setfirst_nameNull() {
                this[this.tableUser.first_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islast_nameNull() {
                return this.IsNull(this.tableUser.last_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlast_nameNull() {
                this[this.tableUser.last_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismiddle_initialNull() {
                return this.IsNull(this.tableUser.middle_initialColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmiddle_initialNull() {
                this[this.tableUser.middle_initialColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstitleNull() {
                return this.IsNull(this.tableUser.titleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettitleNull() {
                this[this.tableUser.titleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssuffixNull() {
                return this.IsNull(this.tableUser.suffixColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsuffixNull() {
                this[this.tableUser.suffixColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscompany_nameNull() {
                return this.IsNull(this.tableUser.company_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcompany_nameNull() {
                this[this.tableUser.company_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isemail1Null() {
                return this.IsNull(this.tableUser.email1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setemail1Null() {
                this[this.tableUser.email1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscontact_id_intNull() {
                return this.IsNull(this.tableUser.contact_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcontact_id_intNull() {
                this[this.tableUser.contact_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscompany_typeNull() {
                return this.IsNull(this.tableUser.company_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcompany_typeNull() {
                this[this.tableUser.company_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsroleNull() {
                return this.IsNull(this.tableUser.roleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetroleNull() {
                this[this.tableUser.roleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConstructionProjectFilterRow : global::System.Data.DataRow {
            
            private ConstructionProjectFilterDataTable tableConstructionProjectFilter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConstructionProjectFilterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConstructionProjectFilter = ((ConstructionProjectFilterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] tic_construction_project_id {
                get {
                    return ((byte[])(this[this.tableConstructionProjectFilter.tic_construction_project_idColumn]));
                }
                set {
                    this[this.tableConstructionProjectFilter.tic_construction_project_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_construction_project_name {
                get {
                    if (this.Istic_construction_project_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableConstructionProjectFilter.tic_construction_project_nameColumn]));
                    }
                }
                set {
                    this[this.tableConstructionProjectFilter.tic_construction_project_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Inspection_Scope {
                get {
                    if (this.IsTIC_Inspection_ScopeNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableConstructionProjectFilter.TIC_Inspection_ScopeColumn]));
                    }
                }
                set {
                    this[this.tableConstructionProjectFilter.TIC_Inspection_ScopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_construction_project_id_int {
                get {
                    try {
                        return ((int)(this[this.tableConstructionProjectFilter.tic_construction_project_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_project_id_int\' in table \'ConstructionProj" +
                                "ectFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstructionProjectFilter.tic_construction_project_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_nameNull() {
                return this.IsNull(this.tableConstructionProjectFilter.tic_construction_project_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_nameNull() {
                this[this.tableConstructionProjectFilter.tic_construction_project_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Inspection_ScopeNull() {
                return this.IsNull(this.tableConstructionProjectFilter.TIC_Inspection_ScopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Inspection_ScopeNull() {
                this[this.tableConstructionProjectFilter.TIC_Inspection_ScopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_id_intNull() {
                return this.IsNull(this.tableConstructionProjectFilter.tic_construction_project_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_id_intNull() {
                this[this.tableConstructionProjectFilter.tic_construction_project_id_intColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PhaseFilterRow : global::System.Data.DataRow {
            
            private PhaseFilterDataTable tablePhaseFilter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PhaseFilterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePhaseFilter = ((PhaseFilterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_construction_project_id_int {
                get {
                    try {
                        return ((int)(this[this.tablePhaseFilter.tic_construction_project_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_project_id_int\' in table \'PhaseFilter\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhaseFilter.tic_construction_project_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] construction_phase_id {
                get {
                    try {
                        return ((byte[])(this[this.tablePhaseFilter.construction_phase_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'construction_phase_id\' in table \'PhaseFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePhaseFilter.construction_phase_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string construction_phase_number {
                get {
                    try {
                        return ((string)(this[this.tablePhaseFilter.construction_phase_numberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'construction_phase_number\' in table \'PhaseFilter\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tablePhaseFilter.construction_phase_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_id_intNull() {
                return this.IsNull(this.tablePhaseFilter.tic_construction_project_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_id_intNull() {
                this[this.tablePhaseFilter.tic_construction_project_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstruction_phase_idNull() {
                return this.IsNull(this.tablePhaseFilter.construction_phase_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstruction_phase_idNull() {
                this[this.tablePhaseFilter.construction_phase_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstruction_phase_numberNull() {
                return this.IsNull(this.tablePhaseFilter.construction_phase_numberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstruction_phase_numberNull() {
                this[this.tablePhaseFilter.construction_phase_numberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspTemplateFilterRow : global::System.Data.DataRow {
            
            private InspTemplateFilterDataTable tableInspTemplateFilter;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspTemplateFilterRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspTemplateFilter = ((InspTemplateFilterDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_description {
                get {
                    if (this.Isdate_descriptionNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspTemplateFilter.date_descriptionColumn]));
                    }
                }
                set {
                    this[this.tableInspTemplateFilter.date_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_construction_project_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspTemplateFilter.tic_construction_project_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_project_id_int\' in table \'InspTemplateFilt" +
                                "er\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspTemplateFilter.tic_construction_project_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_inspection_type_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspTemplateFilter.tic_inspection_type_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_inspection_type_id_int\' in table \'InspTemplateFilter\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspTemplateFilter.tic_inspection_type_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int uniqueKey {
                get {
                    try {
                        return ((int)(this[this.tableInspTemplateFilter.uniqueKeyColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'uniqueKey\' in table \'InspTemplateFilter\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspTemplateFilter.uniqueKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TIC_Const_Phase_Number {
                get {
                    try {
                        return ((int)(this[this.tableInspTemplateFilter.TIC_Const_Phase_NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIC_Const_Phase_Number\' in table \'InspTemplateFilter\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableInspTemplateFilter.TIC_Const_Phase_NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_descriptionNull() {
                return this.IsNull(this.tableInspTemplateFilter.date_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_descriptionNull() {
                this[this.tableInspTemplateFilter.date_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_id_intNull() {
                return this.IsNull(this.tableInspTemplateFilter.tic_construction_project_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_id_intNull() {
                this[this.tableInspTemplateFilter.tic_construction_project_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_inspection_type_id_intNull() {
                return this.IsNull(this.tableInspTemplateFilter.tic_inspection_type_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_inspection_type_id_intNull() {
                this[this.tableInspTemplateFilter.tic_inspection_type_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsuniqueKeyNull() {
                return this.IsNull(this.tableInspTemplateFilter.uniqueKeyColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetuniqueKeyNull() {
                this[this.tableInspTemplateFilter.uniqueKeyColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Const_Phase_NumberNull() {
                return this.IsNull(this.tableInspTemplateFilter.TIC_Const_Phase_NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Const_Phase_NumberNull() {
                this[this.tableInspTemplateFilter.TIC_Const_Phase_NumberColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScheduledInspectionsRow : global::System.Data.DataRow {
            
            private ScheduledInspectionsDataTable tableScheduledInspections;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScheduledInspectionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScheduledInspections = ((ScheduledInspectionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_construction_project_name {
                get {
                    if (this.Istic_construction_project_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableScheduledInspections.tic_construction_project_nameColumn]));
                    }
                }
                set {
                    this[this.tableScheduledInspections.tic_construction_project_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phase_name {
                get {
                    if (this.Isphase_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableScheduledInspections.phase_nameColumn]));
                    }
                }
                set {
                    this[this.tableScheduledInspections.phase_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lot_number {
                get {
                    if (this.Islot_numberNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableScheduledInspections.lot_numberColumn]));
                    }
                }
                set {
                    this[this.tableScheduledInspections.lot_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_description {
                get {
                    if (this.Isdate_descriptionNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableScheduledInspections.date_descriptionColumn]));
                    }
                }
                set {
                    this[this.tableScheduledInspections.date_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tract {
                get {
                    if (this.IstractNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableScheduledInspections.tractColumn]));
                    }
                }
                set {
                    this[this.tableScheduledInspections.tractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Scheduled_Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableScheduledInspections.Scheduled_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Scheduled_Date\' in table \'ScheduledInspections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInspections.Scheduled_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Unit {
                get {
                    if (this.IsUnitNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableScheduledInspections.UnitColumn]));
                    }
                }
                set {
                    this[this.tableScheduledInspections.UnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UniqueScheduledInspectionID {
                get {
                    return ((int)(this[this.tableScheduledInspections.UniqueScheduledInspectionIDColumn]));
                }
                set {
                    this[this.tableScheduledInspections.UniqueScheduledInspectionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string building {
                get {
                    try {
                        return ((string)(this[this.tableScheduledInspections.buildingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'building\' in table \'ScheduledInspections\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInspections.buildingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_construction_project_int {
                get {
                    try {
                        return ((int)(this[this.tableScheduledInspections.tic_construction_project_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_project_int\' in table \'ScheduledInspection" +
                                "s\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInspections.tic_construction_project_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_construction_dt_lookup_id_int {
                get {
                    try {
                        return ((int)(this[this.tableScheduledInspections.tic_construction_dt_lookup_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_dt_lookup_id_int\' in table \'ScheduledInspe" +
                                "ctions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScheduledInspections.tic_construction_dt_lookup_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_nameNull() {
                return this.IsNull(this.tableScheduledInspections.tic_construction_project_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_nameNull() {
                this[this.tableScheduledInspections.tic_construction_project_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isphase_nameNull() {
                return this.IsNull(this.tableScheduledInspections.phase_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setphase_nameNull() {
                this[this.tableScheduledInspections.phase_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islot_numberNull() {
                return this.IsNull(this.tableScheduledInspections.lot_numberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlot_numberNull() {
                this[this.tableScheduledInspections.lot_numberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_descriptionNull() {
                return this.IsNull(this.tableScheduledInspections.date_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_descriptionNull() {
                this[this.tableScheduledInspections.date_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstractNull() {
                return this.IsNull(this.tableScheduledInspections.tractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettractNull() {
                this[this.tableScheduledInspections.tractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsScheduled_DateNull() {
                return this.IsNull(this.tableScheduledInspections.Scheduled_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetScheduled_DateNull() {
                this[this.tableScheduledInspections.Scheduled_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitNull() {
                return this.IsNull(this.tableScheduledInspections.UnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitNull() {
                this[this.tableScheduledInspections.UnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbuildingNull() {
                return this.IsNull(this.tableScheduledInspections.buildingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbuildingNull() {
                this[this.tableScheduledInspections.buildingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_intNull() {
                return this.IsNull(this.tableScheduledInspections.tic_construction_project_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_intNull() {
                this[this.tableScheduledInspections.tic_construction_project_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_dt_lookup_id_intNull() {
                return this.IsNull(this.tableScheduledInspections.tic_construction_dt_lookup_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_dt_lookup_id_intNull() {
                this[this.tableScheduledInspections.tic_construction_dt_lookup_id_intColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectionStepTemplateRow : global::System.Data.DataRow {
            
            private InspectionStepTemplateDataTable tableInspectionStepTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionStepTemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectionStepTemplate = ((InspectionStepTemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] inspection_template_id {
                get {
                    try {
                        return ((byte[])(this[this.tableInspectionStepTemplate.inspection_template_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_template_id\' in table \'InspectionStepTemplate\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStepTemplate.inspection_template_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] inspection_step_template_id {
                get {
                    return ((byte[])(this[this.tableInspectionStepTemplate.inspection_step_template_idColumn]));
                }
                set {
                    this[this.tableInspectionStepTemplate.inspection_step_template_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Inspection_Item {
                get {
                    if (this.IsTIC_Inspection_ItemNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionStepTemplate.TIC_Inspection_ItemColumn]));
                    }
                }
                set {
                    this[this.tableInspectionStepTemplate.TIC_Inspection_ItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_step_template_int {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStepTemplate.inspection_step_template_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_step_template_int\' in table \'InspectionStepTempl" +
                                "ate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStepTemplate.inspection_step_template_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string category_desc {
                get {
                    if (this.Iscategory_descNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionStepTemplate.category_descColumn]));
                    }
                }
                set {
                    this[this.tableInspectionStepTemplate.category_descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int category_id {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStepTemplate.category_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_id\' in table \'InspectionStepTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStepTemplate.category_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int category_ordinal {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStepTemplate.category_ordinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_ordinal\' in table \'InspectionStepTemplate\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableInspectionStepTemplate.category_ordinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_Ordinal {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStepTemplate.tic_OrdinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_Ordinal\' in table \'InspectionStepTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStepTemplate.tic_OrdinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_template_idNull() {
                return this.IsNull(this.tableInspectionStepTemplate.inspection_template_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_template_idNull() {
                this[this.tableInspectionStepTemplate.inspection_template_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Inspection_ItemNull() {
                return this.IsNull(this.tableInspectionStepTemplate.TIC_Inspection_ItemColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Inspection_ItemNull() {
                this[this.tableInspectionStepTemplate.TIC_Inspection_ItemColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_step_template_intNull() {
                return this.IsNull(this.tableInspectionStepTemplate.inspection_step_template_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_step_template_intNull() {
                this[this.tableInspectionStepTemplate.inspection_step_template_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_descNull() {
                return this.IsNull(this.tableInspectionStepTemplate.category_descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_descNull() {
                this[this.tableInspectionStepTemplate.category_descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_idNull() {
                return this.IsNull(this.tableInspectionStepTemplate.category_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_idNull() {
                this[this.tableInspectionStepTemplate.category_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_ordinalNull() {
                return this.IsNull(this.tableInspectionStepTemplate.category_ordinalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_ordinalNull() {
                this[this.tableInspectionStepTemplate.category_ordinalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_OrdinalNull() {
                return this.IsNull(this.tableInspectionStepTemplate.tic_OrdinalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_OrdinalNull() {
                this[this.tableInspectionStepTemplate.tic_OrdinalColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectionTemplateRow : global::System.Data.DataRow {
            
            private InspectionTemplateDataTable tableInspectionTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionTemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectionTemplate = ((InspectionTemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] inspection_template_id {
                get {
                    return ((byte[])(this[this.tableInspectionTemplate.inspection_template_idColumn]));
                }
                set {
                    this[this.tableInspectionTemplate.inspection_template_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_template_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspectionTemplate.inspection_template_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_template_id_int\' in table \'InspectionTemplate\' i" +
                                "s DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionTemplate.inspection_template_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inspection_type {
                get {
                    try {
                        return ((string)(this[this.tableInspectionTemplate.inspection_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_type\' in table \'InspectionTemplate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionTemplate.inspection_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Template_Status {
                get {
                    try {
                        return ((string)(this[this.tableInspectionTemplate.TIC_Template_StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIC_Template_Status\' in table \'InspectionTemplate\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableInspectionTemplate.TIC_Template_StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Template_Version {
                get {
                    if (this.IsTIC_Template_VersionNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionTemplate.TIC_Template_VersionColumn]));
                    }
                }
                set {
                    this[this.tableInspectionTemplate.TIC_Template_VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_template_id_intNull() {
                return this.IsNull(this.tableInspectionTemplate.inspection_template_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_template_id_intNull() {
                this[this.tableInspectionTemplate.inspection_template_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_typeNull() {
                return this.IsNull(this.tableInspectionTemplate.inspection_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_typeNull() {
                this[this.tableInspectionTemplate.inspection_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Template_StatusNull() {
                return this.IsNull(this.tableInspectionTemplate.TIC_Template_StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Template_StatusNull() {
                this[this.tableInspectionTemplate.TIC_Template_StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Template_VersionNull() {
                return this.IsNull(this.tableInspectionTemplate.TIC_Template_VersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Template_VersionNull() {
                this[this.tableInspectionTemplate.TIC_Template_VersionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExplodedUnitsRow : global::System.Data.DataRow {
            
            private ExplodedUnitsDataTable tableExplodedUnits;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExplodedUnitsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExplodedUnits = ((ExplodedUnitsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_construction_project_name {
                get {
                    try {
                        return ((string)(this[this.tableExplodedUnits.tic_construction_project_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_project_name\' in table \'ExplodedUnits\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableExplodedUnits.tic_construction_project_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string lot_number {
                get {
                    try {
                        return ((string)(this[this.tableExplodedUnits.lot_numberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'lot_number\' in table \'ExplodedUnits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExplodedUnits.lot_numberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string building {
                get {
                    try {
                        return ((string)(this[this.tableExplodedUnits.buildingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'building\' in table \'ExplodedUnits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExplodedUnits.buildingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string unit {
                get {
                    try {
                        return ((string)(this[this.tableExplodedUnits.unitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'unit\' in table \'ExplodedUnits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExplodedUnits.unitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string date_description {
                get {
                    try {
                        return ((string)(this[this.tableExplodedUnits.date_descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date_description\' in table \'ExplodedUnits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExplodedUnits.date_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phase {
                get {
                    try {
                        return ((string)(this[this.tableExplodedUnits.phaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phase\' in table \'ExplodedUnits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExplodedUnits.phaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inspection_status {
                get {
                    try {
                        return ((string)(this[this.tableExplodedUnits.inspection_statusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_status\' in table \'ExplodedUnits\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExplodedUnits.inspection_statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_nameNull() {
                return this.IsNull(this.tableExplodedUnits.tic_construction_project_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_nameNull() {
                this[this.tableExplodedUnits.tic_construction_project_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islot_numberNull() {
                return this.IsNull(this.tableExplodedUnits.lot_numberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlot_numberNull() {
                this[this.tableExplodedUnits.lot_numberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbuildingNull() {
                return this.IsNull(this.tableExplodedUnits.buildingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbuildingNull() {
                this[this.tableExplodedUnits.buildingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsunitNull() {
                return this.IsNull(this.tableExplodedUnits.unitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetunitNull() {
                this[this.tableExplodedUnits.unitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_descriptionNull() {
                return this.IsNull(this.tableExplodedUnits.date_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_descriptionNull() {
                this[this.tableExplodedUnits.date_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsphaseNull() {
                return this.IsNull(this.tableExplodedUnits.phaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetphaseNull() {
                this[this.tableExplodedUnits.phaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_statusNull() {
                return this.IsNull(this.tableExplodedUnits.inspection_statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_statusNull() {
                this[this.tableExplodedUnits.inspection_statusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectionRow : global::System.Data.DataRow {
            
            private InspectionDataTable tableInspection;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspection = ((InspectionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UniqueKey {
                get {
                    return ((int)(this[this.tableInspection.UniqueKeyColumn]));
                }
                set {
                    this[this.tableInspection.UniqueKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspection.inspection_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_id_int\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.inspection_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inspection_name {
                get {
                    if (this.Isinspection_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.inspection_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.inspection_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int construction_project_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspection.construction_project_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'construction_project_id_int\' in table \'Inspection\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableInspection.construction_project_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_construction_project_name {
                get {
                    try {
                        return ((string)(this[this.tableInspection.tic_construction_project_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_project_name\' in table \'Inspection\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_construction_project_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_inspector_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspection.tic_inspector_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_inspector_id_int\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_inspector_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_inspector_name {
                get {
                    if (this.Istic_inspector_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.tic_inspector_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.tic_inspector_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_created_by_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspection.tic_created_by_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_created_by_id_int\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_created_by_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_created_by_name {
                get {
                    if (this.Istic_created_by_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.tic_created_by_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.tic_created_by_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_supervisor_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspection.tic_supervisor_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_supervisor_id_int\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_supervisor_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_sign_off_user_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspection.tic_sign_off_user_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_sign_off_user_id_int\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_sign_off_user_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_sign_off_user_name {
                get {
                    if (this.Istic_sign_off_user_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.tic_sign_off_user_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.tic_sign_off_user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_reinsp_sign_off_user_id {
                get {
                    try {
                        return ((int)(this[this.tableInspection.tic_reinsp_sign_off_user_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_reinsp_sign_off_user_id\' in table \'Inspection\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_reinsp_sign_off_user_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_reinsp_sign_off_user_name {
                get {
                    if (this.Istic_reinsp_sign_off_user_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.tic_reinsp_sign_off_user_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.tic_reinsp_sign_off_user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_esc_user_sign_off_Id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspection.tic_esc_user_sign_off_Id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_esc_user_sign_off_Id_int\' in table \'Inspection\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_esc_user_sign_off_Id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_esc_user_sign_off_name {
                get {
                    if (this.Istic_esc_user_sign_off_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.tic_esc_user_sign_off_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.tic_esc_user_sign_off_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_Construction_Phase {
                get {
                    try {
                        return ((string)(this[this.tableInspection.tic_Construction_PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_Construction_Phase\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_Construction_PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_inspection_type_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspection.tic_inspection_type_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_inspection_type_id_int\' in table \'Inspection\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_inspection_type_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_inspection_type {
                get {
                    try {
                        return ((string)(this[this.tableInspection.tic_inspection_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_inspection_type\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_inspection_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_scope {
                get {
                    try {
                        return ((string)(this[this.tableInspection.tic_scopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_scope\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_scopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte TIC_Corrective_Action_Required {
                get {
                    try {
                        return ((byte)(this[this.tableInspection.TIC_Corrective_Action_RequiredColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIC_Corrective_Action_Required\' in table \'Inspection\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableInspection.TIC_Corrective_Action_RequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Date_Complete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInspection.Date_CompleteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date_Complete\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.Date_CompleteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    if (this.IsNotesNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.NotesColumn]));
                    }
                }
                set {
                    this[this.tableInspection.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_supervisor_name {
                get {
                    if (this.Istic_supervisor_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.tic_supervisor_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.tic_supervisor_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    if (this.IsstatusNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.statusColumn]));
                    }
                }
                set {
                    this[this.tableInspection.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Corr_Action_Doc_Location {
                get {
                    if (this.IsTIC_Corr_Action_Doc_LocationNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.TIC_Corr_Action_Doc_LocationColumn]));
                    }
                }
                set {
                    this[this.tableInspection.TIC_Corr_Action_Doc_LocationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Corrective_Action_Status {
                get {
                    if (this.IsTIC_Corrective_Action_StatusNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.TIC_Corrective_Action_StatusColumn]));
                    }
                }
                set {
                    this[this.tableInspection.TIC_Corrective_Action_StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_submitted_by_id {
                get {
                    try {
                        return ((int)(this[this.tableInspection.tic_submitted_by_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_submitted_by_id\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_submitted_by_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_submitted_by_user_name {
                get {
                    if (this.Istic_submitted_by_user_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.tic_submitted_by_user_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.tic_submitted_by_user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TIC_Reinsp_Submitted_By_Id {
                get {
                    try {
                        return ((int)(this[this.tableInspection.TIC_Reinsp_Submitted_By_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIC_Reinsp_Submitted_By_Id\' in table \'Inspection\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInspection.TIC_Reinsp_Submitted_By_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Reinsp_Submitted_By_name {
                get {
                    if (this.IsTIC_Reinsp_Submitted_By_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.TIC_Reinsp_Submitted_By_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.TIC_Reinsp_Submitted_By_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime tic_reinspection_due_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInspection.tic_reinspection_due_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_reinspection_due_date\' in table \'Inspection\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_reinspection_due_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime tic_reinspection_complete_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInspection.tic_reinspection_complete_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_reinspection_complete_date\' in table \'Inspection\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableInspection.tic_reinspection_complete_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime scheduled_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInspection.scheduled_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scheduled_date\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.scheduled_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date_assigned {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInspection.date_assignedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date_assigned\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.date_assignedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TIC_Last_Saved_By_Id {
                get {
                    try {
                        return ((int)(this[this.tableInspection.TIC_Last_Saved_By_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIC_Last_Saved_By_Id\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.TIC_Last_Saved_By_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Last_Saved_By_Name {
                get {
                    if (this.IsTIC_Last_Saved_By_NameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.TIC_Last_Saved_By_NameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.TIC_Last_Saved_By_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TIC_Reinspected_By_Id {
                get {
                    try {
                        return ((int)(this[this.tableInspection.TIC_Reinspected_By_IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIC_Reinspected_By_Id\' in table \'Inspection\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspection.TIC_Reinspected_By_IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Reinspected_By_Name {
                get {
                    if (this.IsTIC_Reinspected_By_NameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspection.TIC_Reinspected_By_NameColumn]));
                    }
                }
                set {
                    this[this.tableInspection.TIC_Reinspected_By_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_id_intNull() {
                return this.IsNull(this.tableInspection.inspection_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_id_intNull() {
                this[this.tableInspection.inspection_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_nameNull() {
                return this.IsNull(this.tableInspection.inspection_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_nameNull() {
                this[this.tableInspection.inspection_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstruction_project_id_intNull() {
                return this.IsNull(this.tableInspection.construction_project_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstruction_project_id_intNull() {
                this[this.tableInspection.construction_project_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_nameNull() {
                return this.IsNull(this.tableInspection.tic_construction_project_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_nameNull() {
                this[this.tableInspection.tic_construction_project_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_inspector_id_intNull() {
                return this.IsNull(this.tableInspection.tic_inspector_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_inspector_id_intNull() {
                this[this.tableInspection.tic_inspector_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_inspector_nameNull() {
                return this.IsNull(this.tableInspection.tic_inspector_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_inspector_nameNull() {
                this[this.tableInspection.tic_inspector_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_created_by_id_intNull() {
                return this.IsNull(this.tableInspection.tic_created_by_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_created_by_id_intNull() {
                this[this.tableInspection.tic_created_by_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_created_by_nameNull() {
                return this.IsNull(this.tableInspection.tic_created_by_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_created_by_nameNull() {
                this[this.tableInspection.tic_created_by_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_supervisor_id_intNull() {
                return this.IsNull(this.tableInspection.tic_supervisor_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_supervisor_id_intNull() {
                this[this.tableInspection.tic_supervisor_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_sign_off_user_id_intNull() {
                return this.IsNull(this.tableInspection.tic_sign_off_user_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_sign_off_user_id_intNull() {
                this[this.tableInspection.tic_sign_off_user_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_sign_off_user_nameNull() {
                return this.IsNull(this.tableInspection.tic_sign_off_user_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_sign_off_user_nameNull() {
                this[this.tableInspection.tic_sign_off_user_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_reinsp_sign_off_user_idNull() {
                return this.IsNull(this.tableInspection.tic_reinsp_sign_off_user_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_reinsp_sign_off_user_idNull() {
                this[this.tableInspection.tic_reinsp_sign_off_user_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_reinsp_sign_off_user_nameNull() {
                return this.IsNull(this.tableInspection.tic_reinsp_sign_off_user_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_reinsp_sign_off_user_nameNull() {
                this[this.tableInspection.tic_reinsp_sign_off_user_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_esc_user_sign_off_Id_intNull() {
                return this.IsNull(this.tableInspection.tic_esc_user_sign_off_Id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_esc_user_sign_off_Id_intNull() {
                this[this.tableInspection.tic_esc_user_sign_off_Id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_esc_user_sign_off_nameNull() {
                return this.IsNull(this.tableInspection.tic_esc_user_sign_off_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_esc_user_sign_off_nameNull() {
                this[this.tableInspection.tic_esc_user_sign_off_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_Construction_PhaseNull() {
                return this.IsNull(this.tableInspection.tic_Construction_PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_Construction_PhaseNull() {
                this[this.tableInspection.tic_Construction_PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_inspection_type_id_intNull() {
                return this.IsNull(this.tableInspection.tic_inspection_type_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_inspection_type_id_intNull() {
                this[this.tableInspection.tic_inspection_type_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_inspection_typeNull() {
                return this.IsNull(this.tableInspection.tic_inspection_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_inspection_typeNull() {
                this[this.tableInspection.tic_inspection_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_scopeNull() {
                return this.IsNull(this.tableInspection.tic_scopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_scopeNull() {
                this[this.tableInspection.tic_scopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Corrective_Action_RequiredNull() {
                return this.IsNull(this.tableInspection.TIC_Corrective_Action_RequiredColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Corrective_Action_RequiredNull() {
                this[this.tableInspection.TIC_Corrective_Action_RequiredColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDate_CompleteNull() {
                return this.IsNull(this.tableInspection.Date_CompleteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDate_CompleteNull() {
                this[this.tableInspection.Date_CompleteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableInspection.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableInspection.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_supervisor_nameNull() {
                return this.IsNull(this.tableInspection.tic_supervisor_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_supervisor_nameNull() {
                this[this.tableInspection.tic_supervisor_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNull() {
                return this.IsNull(this.tableInspection.statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNull() {
                this[this.tableInspection.statusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Corr_Action_Doc_LocationNull() {
                return this.IsNull(this.tableInspection.TIC_Corr_Action_Doc_LocationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Corr_Action_Doc_LocationNull() {
                this[this.tableInspection.TIC_Corr_Action_Doc_LocationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Corrective_Action_StatusNull() {
                return this.IsNull(this.tableInspection.TIC_Corrective_Action_StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Corrective_Action_StatusNull() {
                this[this.tableInspection.TIC_Corrective_Action_StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_submitted_by_idNull() {
                return this.IsNull(this.tableInspection.tic_submitted_by_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_submitted_by_idNull() {
                this[this.tableInspection.tic_submitted_by_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_submitted_by_user_nameNull() {
                return this.IsNull(this.tableInspection.tic_submitted_by_user_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_submitted_by_user_nameNull() {
                this[this.tableInspection.tic_submitted_by_user_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Reinsp_Submitted_By_IdNull() {
                return this.IsNull(this.tableInspection.TIC_Reinsp_Submitted_By_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Reinsp_Submitted_By_IdNull() {
                this[this.tableInspection.TIC_Reinsp_Submitted_By_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Reinsp_Submitted_By_nameNull() {
                return this.IsNull(this.tableInspection.TIC_Reinsp_Submitted_By_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Reinsp_Submitted_By_nameNull() {
                this[this.tableInspection.TIC_Reinsp_Submitted_By_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_reinspection_due_dateNull() {
                return this.IsNull(this.tableInspection.tic_reinspection_due_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_reinspection_due_dateNull() {
                this[this.tableInspection.tic_reinspection_due_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_reinspection_complete_dateNull() {
                return this.IsNull(this.tableInspection.tic_reinspection_complete_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_reinspection_complete_dateNull() {
                this[this.tableInspection.tic_reinspection_complete_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscheduled_dateNull() {
                return this.IsNull(this.tableInspection.scheduled_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscheduled_dateNull() {
                this[this.tableInspection.scheduled_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_assignedNull() {
                return this.IsNull(this.tableInspection.date_assignedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_assignedNull() {
                this[this.tableInspection.date_assignedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Last_Saved_By_IdNull() {
                return this.IsNull(this.tableInspection.TIC_Last_Saved_By_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Last_Saved_By_IdNull() {
                this[this.tableInspection.TIC_Last_Saved_By_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Last_Saved_By_NameNull() {
                return this.IsNull(this.tableInspection.TIC_Last_Saved_By_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Last_Saved_By_NameNull() {
                this[this.tableInspection.TIC_Last_Saved_By_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Reinspected_By_IdNull() {
                return this.IsNull(this.tableInspection.TIC_Reinspected_By_IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Reinspected_By_IdNull() {
                this[this.tableInspection.TIC_Reinspected_By_IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Reinspected_By_NameNull() {
                return this.IsNull(this.tableInspection.TIC_Reinspected_By_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Reinspected_By_NameNull() {
                this[this.tableInspection.TIC_Reinspected_By_NameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectionStepRow : global::System.Data.DataRow {
            
            private InspectionStepDataTable tableInspectionStep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionStepRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectionStep = ((InspectionStepDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_step_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStep.inspection_step_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_step_id_int\' in table \'InspectionStep\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInspectionStep.inspection_step_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int category_ordinal {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStep.category_ordinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_ordinal\' in table \'InspectionStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStep.category_ordinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string category_desc {
                get {
                    try {
                        return ((string)(this[this.tableInspectionStep.category_descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_desc\' in table \'InspectionStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStep.category_descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int step_ordinal {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStep.step_ordinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'step_ordinal\' in table \'InspectionStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStep.step_ordinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string description {
                get {
                    try {
                        return ((string)(this[this.tableInspectionStep.descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'description\' in table \'InspectionStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStep.descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStep.inspection_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_id_int\' in table \'InspectionStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStep.inspection_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte tic_acknowledgement {
                get {
                    try {
                        return ((byte)(this[this.tableInspectionStep.tic_acknowledgementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_acknowledgement\' in table \'InspectionStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStep.tic_acknowledgementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int category_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStep.category_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_id_int\' in table \'InspectionStep\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStep.category_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_acknowledgement_status {
                get {
                    if (this.Istic_acknowledgement_statusNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionStep.tic_acknowledgement_statusColumn]));
                    }
                }
                set {
                    this[this.tableInspectionStep.tic_acknowledgement_statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_step_id_intNull() {
                return this.IsNull(this.tableInspectionStep.inspection_step_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_step_id_intNull() {
                this[this.tableInspectionStep.inspection_step_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_ordinalNull() {
                return this.IsNull(this.tableInspectionStep.category_ordinalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_ordinalNull() {
                this[this.tableInspectionStep.category_ordinalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_descNull() {
                return this.IsNull(this.tableInspectionStep.category_descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_descNull() {
                this[this.tableInspectionStep.category_descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isstep_ordinalNull() {
                return this.IsNull(this.tableInspectionStep.step_ordinalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setstep_ordinalNull() {
                this[this.tableInspectionStep.step_ordinalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdescriptionNull() {
                return this.IsNull(this.tableInspectionStep.descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdescriptionNull() {
                this[this.tableInspectionStep.descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_id_intNull() {
                return this.IsNull(this.tableInspectionStep.inspection_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_id_intNull() {
                this[this.tableInspectionStep.inspection_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_acknowledgementNull() {
                return this.IsNull(this.tableInspectionStep.tic_acknowledgementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_acknowledgementNull() {
                this[this.tableInspectionStep.tic_acknowledgementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_id_intNull() {
                return this.IsNull(this.tableInspectionStep.category_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_id_intNull() {
                this[this.tableInspectionStep.category_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_acknowledgement_statusNull() {
                return this.IsNull(this.tableInspectionStep.tic_acknowledgement_statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_acknowledgement_statusNull() {
                this[this.tableInspectionStep.tic_acknowledgement_statusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ScopeItemsRow : global::System.Data.DataRow {
            
            private ScopeItemsDataTable tableScopeItems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ScopeItemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableScopeItems = ((ScopeItemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int scope_item_id {
                get {
                    try {
                        return ((int)(this[this.tableScopeItems.scope_item_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'scope_item_id\' in table \'ScopeItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScopeItems.scope_item_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int construction_project_id_int {
                get {
                    try {
                        return ((int)(this[this.tableScopeItems.construction_project_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'construction_project_id_int\' in table \'ScopeItems\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableScopeItems.construction_project_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_Construction_Project_name {
                get {
                    try {
                        return ((string)(this[this.tableScopeItems.tic_Construction_Project_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_Construction_Project_name\' in table \'ScopeItems\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableScopeItems.tic_Construction_Project_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string phase_nbr {
                get {
                    try {
                        return ((string)(this[this.tableScopeItems.phase_nbrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'phase_nbr\' in table \'ScopeItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScopeItems.phase_nbrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_type_id_int {
                get {
                    try {
                        return ((int)(this[this.tableScopeItems.inspection_type_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_type_id_int\' in table \'ScopeItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScopeItems.inspection_type_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inspection_type {
                get {
                    try {
                        return ((string)(this[this.tableScopeItems.inspection_typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_type\' in table \'ScopeItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScopeItems.inspection_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string scope_item_nbr {
                get {
                    if (this.Isscope_item_nbrNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableScopeItems.scope_item_nbrColumn]));
                    }
                }
                set {
                    this[this.tableScopeItems.scope_item_nbrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_id_int {
                get {
                    try {
                        return ((int)(this[this.tableScopeItems.inspection_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_id_int\' in table \'ScopeItems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScopeItems.inspection_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Inspection_Scope {
                get {
                    if (this.IsInspection_ScopeNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableScopeItems.Inspection_ScopeColumn]));
                    }
                }
                set {
                    this[this.tableScopeItems.Inspection_ScopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscope_item_idNull() {
                return this.IsNull(this.tableScopeItems.scope_item_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscope_item_idNull() {
                this[this.tableScopeItems.scope_item_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isconstruction_project_id_intNull() {
                return this.IsNull(this.tableScopeItems.construction_project_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setconstruction_project_id_intNull() {
                this[this.tableScopeItems.construction_project_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_Construction_Project_nameNull() {
                return this.IsNull(this.tableScopeItems.tic_Construction_Project_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_Construction_Project_nameNull() {
                this[this.tableScopeItems.tic_Construction_Project_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isphase_nbrNull() {
                return this.IsNull(this.tableScopeItems.phase_nbrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setphase_nbrNull() {
                this[this.tableScopeItems.phase_nbrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_type_id_intNull() {
                return this.IsNull(this.tableScopeItems.inspection_type_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_type_id_intNull() {
                this[this.tableScopeItems.inspection_type_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_typeNull() {
                return this.IsNull(this.tableScopeItems.inspection_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_typeNull() {
                this[this.tableScopeItems.inspection_typeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isscope_item_nbrNull() {
                return this.IsNull(this.tableScopeItems.scope_item_nbrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setscope_item_nbrNull() {
                this[this.tableScopeItems.scope_item_nbrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_id_intNull() {
                return this.IsNull(this.tableScopeItems.inspection_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_id_intNull() {
                this[this.tableScopeItems.inspection_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInspection_ScopeNull() {
                return this.IsNull(this.tableScopeItems.Inspection_ScopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInspection_ScopeNull() {
                this[this.tableScopeItems.Inspection_ScopeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectionListRow : global::System.Data.DataRow {
            
            private InspectionListDataTable tableInspectionList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectionList = ((InspectionListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_construction_project_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspectionList.tic_construction_project_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_project_id_int\' in table \'InspectionList\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionList.tic_construction_project_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_construction_project_name {
                get {
                    try {
                        return ((string)(this[this.tableInspectionList.tic_construction_project_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_construction_project_name\' in table \'InspectionList\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionList.tic_construction_project_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TIC_Construction_Phase {
                get {
                    try {
                        return ((string)(this[this.tableInspectionList.TIC_Construction_PhaseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIC_Construction_Phase\' in table \'InspectionList\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableInspectionList.TIC_Construction_PhaseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tic_scope {
                get {
                    try {
                        return ((string)(this[this.tableInspectionList.tic_scopeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_scope\' in table \'InspectionList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionList.tic_scopeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_inspection_type_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspectionList.tic_inspection_type_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_inspection_type_id_int\' in table \'InspectionList\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableInspectionList.tic_inspection_type_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inspection_type_name {
                get {
                    try {
                        return ((string)(this[this.tableInspectionList.inspection_type_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_type_name\' in table \'InspectionList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionList.inspection_type_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime due_date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInspectionList.due_dateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'due_date\' in table \'InspectionList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionList.due_dateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    if (this.IsstatusNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionList.statusColumn]));
                    }
                }
                set {
                    this[this.tableInspectionList.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_id_int {
                get {
                    return ((int)(this[this.tableInspectionList.inspection_id_intColumn]));
                }
                set {
                    this[this.tableInspectionList.inspection_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date_complete {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableInspectionList.date_completeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date_complete\' in table \'InspectionList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionList.date_completeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int last_saved_by_id {
                get {
                    try {
                        return ((int)(this[this.tableInspectionList.last_saved_by_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'last_saved_by_id\' in table \'InspectionList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionList.last_saved_by_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string last_saved_by_user_name {
                get {
                    if (this.Islast_saved_by_user_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionList.last_saved_by_user_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspectionList.last_saved_by_user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_id_intNull() {
                return this.IsNull(this.tableInspectionList.tic_construction_project_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_id_intNull() {
                this[this.tableInspectionList.tic_construction_project_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_construction_project_nameNull() {
                return this.IsNull(this.tableInspectionList.tic_construction_project_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_construction_project_nameNull() {
                this[this.tableInspectionList.tic_construction_project_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTIC_Construction_PhaseNull() {
                return this.IsNull(this.tableInspectionList.TIC_Construction_PhaseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTIC_Construction_PhaseNull() {
                this[this.tableInspectionList.TIC_Construction_PhaseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_scopeNull() {
                return this.IsNull(this.tableInspectionList.tic_scopeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_scopeNull() {
                this[this.tableInspectionList.tic_scopeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_inspection_type_id_intNull() {
                return this.IsNull(this.tableInspectionList.tic_inspection_type_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_inspection_type_id_intNull() {
                this[this.tableInspectionList.tic_inspection_type_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_type_nameNull() {
                return this.IsNull(this.tableInspectionList.inspection_type_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_type_nameNull() {
                this[this.tableInspectionList.inspection_type_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdue_dateNull() {
                return this.IsNull(this.tableInspectionList.due_dateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdue_dateNull() {
                this[this.tableInspectionList.due_dateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNull() {
                return this.IsNull(this.tableInspectionList.statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNull() {
                this[this.tableInspectionList.statusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_completeNull() {
                return this.IsNull(this.tableInspectionList.date_completeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_completeNull() {
                this[this.tableInspectionList.date_completeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islast_saved_by_idNull() {
                return this.IsNull(this.tableInspectionList.last_saved_by_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlast_saved_by_idNull() {
                this[this.tableInspectionList.last_saved_by_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islast_saved_by_user_nameNull() {
                return this.IsNull(this.tableInspectionList.last_saved_by_user_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlast_saved_by_user_nameNull() {
                this[this.tableInspectionList.last_saved_by_user_nameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MiscellaneousCategoryRow : global::System.Data.DataRow {
            
            private MiscellaneousCategoryDataTable tableMiscellaneousCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MiscellaneousCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMiscellaneousCategory = ((MiscellaneousCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int category_id_int {
                get {
                    try {
                        return ((int)(this[this.tableMiscellaneousCategory.category_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_id_int\' in table \'MiscellaneousCategory\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMiscellaneousCategory.category_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ordinal {
                get {
                    try {
                        return ((int)(this[this.tableMiscellaneousCategory.ordinalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ordinal\' in table \'MiscellaneousCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMiscellaneousCategory.ordinalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string category_desc {
                get {
                    try {
                        return ((string)(this[this.tableMiscellaneousCategory.category_descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'category_desc\' in table \'MiscellaneousCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMiscellaneousCategory.category_descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_id_int {
                get {
                    try {
                        return ((int)(this[this.tableMiscellaneousCategory.inspection_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_id_int\' in table \'MiscellaneousCategory\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableMiscellaneousCategory.inspection_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_id_intNull() {
                return this.IsNull(this.tableMiscellaneousCategory.category_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_id_intNull() {
                this[this.tableMiscellaneousCategory.category_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsordinalNull() {
                return this.IsNull(this.tableMiscellaneousCategory.ordinalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetordinalNull() {
                this[this.tableMiscellaneousCategory.ordinalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscategory_descNull() {
                return this.IsNull(this.tableMiscellaneousCategory.category_descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcategory_descNull() {
                this[this.tableMiscellaneousCategory.category_descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_id_intNull() {
                return this.IsNull(this.tableMiscellaneousCategory.inspection_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_id_intNull() {
                this[this.tableMiscellaneousCategory.inspection_id_intColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QADocumentsRow : global::System.Data.DataRow {
            
            private QADocumentsDataTable tableQADocuments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QADocumentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQADocuments = ((QADocumentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int qa_documents_id_int {
                get {
                    try {
                        return ((int)(this[this.tableQADocuments.qa_documents_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qa_documents_id_int\' in table \'QADocuments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQADocuments.qa_documents_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_id_int {
                get {
                    try {
                        return ((int)(this[this.tableQADocuments.inspection_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_id_int\' in table \'QADocuments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQADocuments.inspection_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string document_description {
                get {
                    try {
                        return ((string)(this[this.tableQADocuments.document_descriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'document_description\' in table \'QADocuments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQADocuments.document_descriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string qa_document_path {
                get {
                    try {
                        return ((string)(this[this.tableQADocuments.qa_document_pathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'qa_document_path\' in table \'QADocuments\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQADocuments.qa_document_pathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isqa_documents_id_intNull() {
                return this.IsNull(this.tableQADocuments.qa_documents_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setqa_documents_id_intNull() {
                this[this.tableQADocuments.qa_documents_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_id_intNull() {
                return this.IsNull(this.tableQADocuments.inspection_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_id_intNull() {
                this[this.tableQADocuments.inspection_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdocument_descriptionNull() {
                return this.IsNull(this.tableQADocuments.document_descriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdocument_descriptionNull() {
                this[this.tableQADocuments.document_descriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isqa_document_pathNull() {
                return this.IsNull(this.tableQADocuments.qa_document_pathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setqa_document_pathNull() {
                this[this.tableQADocuments.qa_document_pathColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class QAWeblinksRow : global::System.Data.DataRow {
            
            private QAWeblinksDataTable tableQAWeblinks;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal QAWeblinksRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableQAWeblinks = ((QAWeblinksDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tic_qa_weblinks_id_int {
                get {
                    try {
                        return ((int)(this[this.tableQAWeblinks.tic_qa_weblinks_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tic_qa_weblinks_id_int\' in table \'QAWeblinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQAWeblinks.tic_qa_weblinks_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_id_int {
                get {
                    try {
                        return ((int)(this[this.tableQAWeblinks.inspection_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_id_int\' in table \'QAWeblinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQAWeblinks.inspection_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string url_desc {
                get {
                    try {
                        return ((string)(this[this.tableQAWeblinks.url_descColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'url_desc\' in table \'QAWeblinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQAWeblinks.url_descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string url {
                get {
                    try {
                        return ((string)(this[this.tableQAWeblinks.urlColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'url\' in table \'QAWeblinks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableQAWeblinks.urlColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istic_qa_weblinks_id_intNull() {
                return this.IsNull(this.tableQAWeblinks.tic_qa_weblinks_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settic_qa_weblinks_id_intNull() {
                this[this.tableQAWeblinks.tic_qa_weblinks_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_id_intNull() {
                return this.IsNull(this.tableQAWeblinks.inspection_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_id_intNull() {
                this[this.tableQAWeblinks.inspection_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isurl_descNull() {
                return this.IsNull(this.tableQAWeblinks.url_descColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Seturl_descNull() {
                this[this.tableQAWeblinks.url_descColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsurlNull() {
                return this.IsNull(this.tableQAWeblinks.urlColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SeturlNull() {
                this[this.tableQAWeblinks.urlColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectionStatusRow : global::System.Data.DataRow {
            
            private InspectionStatusDataTable tableInspectionStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectionStatus = ((InspectionStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int inspection_id_int {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStatus.inspection_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_id_int\' in table \'InspectionStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStatus.inspection_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string inspection_name {
                get {
                    try {
                        return ((string)(this[this.tableInspectionStatus.inspection_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'inspection_name\' in table \'InspectionStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStatus.inspection_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string status {
                get {
                    try {
                        return ((string)(this[this.tableInspectionStatus.statusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'status\' in table \'InspectionStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStatus.statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int last_saved_by_id {
                get {
                    try {
                        return ((int)(this[this.tableInspectionStatus.last_saved_by_idColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'last_saved_by_id\' in table \'InspectionStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStatus.last_saved_by_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string last_saved_by_user_name {
                get {
                    if (this.Islast_saved_by_user_nameNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionStatus.last_saved_by_user_nameColumn]));
                    }
                }
                set {
                    this[this.tableInspectionStatus.last_saved_by_user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string role_ {
                get {
                    if (this.Isrole_Null()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionStatus.role_Column]));
                    }
                }
                set {
                    this[this.tableInspectionStatus.role_Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string company_Type {
                get {
                    if (this.Iscompany_TypeNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableInspectionStatus.company_TypeColumn]));
                    }
                }
                set {
                    this[this.tableInspectionStatus.company_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_id_intNull() {
                return this.IsNull(this.tableInspectionStatus.inspection_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_id_intNull() {
                this[this.tableInspectionStatus.inspection_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isinspection_nameNull() {
                return this.IsNull(this.tableInspectionStatus.inspection_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setinspection_nameNull() {
                this[this.tableInspectionStatus.inspection_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstatusNull() {
                return this.IsNull(this.tableInspectionStatus.statusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstatusNull() {
                this[this.tableInspectionStatus.statusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islast_saved_by_idNull() {
                return this.IsNull(this.tableInspectionStatus.last_saved_by_idColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlast_saved_by_idNull() {
                this[this.tableInspectionStatus.last_saved_by_idColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islast_saved_by_user_nameNull() {
                return this.IsNull(this.tableInspectionStatus.last_saved_by_user_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlast_saved_by_user_nameNull() {
                this[this.tableInspectionStatus.last_saved_by_user_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrole_Null() {
                return this.IsNull(this.tableInspectionStatus.role_Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrole_Null() {
                this[this.tableInspectionStatus.role_Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscompany_TypeNull() {
                return this.IsNull(this.tableInspectionStatus.company_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcompany_TypeNull() {
                this[this.tableInspectionStatus.company_TypeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class InspectionStatusesRow : global::System.Data.DataRow {
            
            private InspectionStatusesDataTable tableInspectionStatuses;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal InspectionStatusesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableInspectionStatuses = ((InspectionStatusesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] user_choice_choices_id {
                get {
                    return ((byte[])(this[this.tableInspectionStatuses.user_choice_choices_idColumn]));
                }
                set {
                    this[this.tableInspectionStatuses.user_choice_choices_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string rn_descriptor {
                get {
                    try {
                        return ((string)(this[this.tableInspectionStatuses.rn_descriptorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rn_descriptor\' in table \'InspectionStatuses\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInspectionStatuses.rn_descriptorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrn_descriptorNull() {
                return this.IsNull(this.tableInspectionStatuses.rn_descriptorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrn_descriptorNull() {
                this[this.tableInspectionStatuses.rn_descriptorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContactRow : global::System.Data.DataRow {
            
            private ContactDataTable tableContact;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContactRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContact = ((ContactDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int contact_id_int {
                get {
                    try {
                        return ((int)(this[this.tableContact.contact_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'contact_id_int\' in table \'Contact\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContact.contact_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int company_id_int {
                get {
                    try {
                        return ((int)(this[this.tableContact.company_id_intColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'company_id_int\' in table \'Contact\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContact.company_id_intColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string login_name {
                get {
                    try {
                        return ((string)(this[this.tableContact.login_nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'login_name\' in table \'Contact\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContact.login_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string email {
                get {
                    try {
                        return ((string)(this[this.tableContact.emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'email\' in table \'Contact\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContact.emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string company_type {
                get {
                    if (this.Iscompany_typeNull()) {
                        return null;
                    }
                    else {
                        return ((string)(this[this.tableContact.company_typeColumn]));
                    }
                }
                set {
                    this[this.tableContact.company_typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscontact_id_intNull() {
                return this.IsNull(this.tableContact.contact_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcontact_id_intNull() {
                this[this.tableContact.contact_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscompany_id_intNull() {
                return this.IsNull(this.tableContact.company_id_intColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcompany_id_intNull() {
                this[this.tableContact.company_id_intColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Islogin_nameNull() {
                return this.IsNull(this.tableContact.login_nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setlogin_nameNull() {
                this[this.tableContact.login_nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsemailNull() {
                return this.IsNull(this.tableContact.emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetemailNull() {
                this[this.tableContact.emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Iscompany_typeNull() {
                return this.IsNull(this.tableContact.company_typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setcompany_typeNull() {
                this[this.tableContact.company_typeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRowChangeEvent : global::System.EventArgs {
            
            private UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConstructionProjectFilterRowChangeEvent : global::System.EventArgs {
            
            private ConstructionProjectFilterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstructionProjectFilterRowChangeEvent(ConstructionProjectFilterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstructionProjectFilterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PhaseFilterRowChangeEvent : global::System.EventArgs {
            
            private PhaseFilterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhaseFilterRowChangeEvent(PhaseFilterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PhaseFilterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspTemplateFilterRowChangeEvent : global::System.EventArgs {
            
            private InspTemplateFilterRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspTemplateFilterRowChangeEvent(InspTemplateFilterRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspTemplateFilterRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScheduledInspectionsRowChangeEvent : global::System.EventArgs {
            
            private ScheduledInspectionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInspectionsRowChangeEvent(ScheduledInspectionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScheduledInspectionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectionStepTemplateRowChangeEvent : global::System.EventArgs {
            
            private InspectionStepTemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepTemplateRowChangeEvent(InspectionStepTemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectionTemplateRowChangeEvent : global::System.EventArgs {
            
            private InspectionTemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionTemplateRowChangeEvent(InspectionTemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionTemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExplodedUnitsRowChangeEvent : global::System.EventArgs {
            
            private ExplodedUnitsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExplodedUnitsRowChangeEvent(ExplodedUnitsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExplodedUnitsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectionRowChangeEvent : global::System.EventArgs {
            
            private InspectionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionRowChangeEvent(InspectionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectionStepRowChangeEvent : global::System.EventArgs {
            
            private InspectionStepRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepRowChangeEvent(InspectionStepRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStepRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ScopeItemsRowChangeEvent : global::System.EventArgs {
            
            private ScopeItemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScopeItemsRowChangeEvent(ScopeItemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ScopeItemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectionListRowChangeEvent : global::System.EventArgs {
            
            private InspectionListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionListRowChangeEvent(InspectionListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MiscellaneousCategoryRowChangeEvent : global::System.EventArgs {
            
            private MiscellaneousCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MiscellaneousCategoryRowChangeEvent(MiscellaneousCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MiscellaneousCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QADocumentsRowChangeEvent : global::System.EventArgs {
            
            private QADocumentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QADocumentsRowChangeEvent(QADocumentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QADocumentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class QAWeblinksRowChangeEvent : global::System.EventArgs {
            
            private QAWeblinksRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QAWeblinksRowChangeEvent(QAWeblinksRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public QAWeblinksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectionStatusRowChangeEvent : global::System.EventArgs {
            
            private InspectionStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusRowChangeEvent(InspectionStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class InspectionStatusesRowChangeEvent : global::System.EventArgs {
            
            private InspectionStatusesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusesRowChangeEvent(InspectionStatusesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public InspectionStatusesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContactRowChangeEvent : global::System.EventArgs {
            
            private ContactRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactRowChangeEvent(ContactRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace TICPivotalQADataAccess.PivotalEDTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "User";
            tableMapping.ColumnMappings.Add("contact_id", "contact_id");
            tableMapping.ColumnMappings.Add("login_name", "login_name");
            tableMapping.ColumnMappings.Add("email", "email");
            tableMapping.ColumnMappings.Add("password_encrypt", "password_encrypt");
            tableMapping.ColumnMappings.Add("first_name", "first_name");
            tableMapping.ColumnMappings.Add("last_name", "last_name");
            tableMapping.ColumnMappings.Add("middle_initial", "middle_initial");
            tableMapping.ColumnMappings.Add("title", "title");
            tableMapping.ColumnMappings.Add("suffix", "suffix");
            tableMapping.ColumnMappings.Add("company_name", "company_name");
            tableMapping.ColumnMappings.Add("email1", "email1");
            tableMapping.ColumnMappings.Add("contact_id_int", "contact_id_int");
            tableMapping.ColumnMappings.Add("company_type", "company_type");
            tableMapping.ColumnMappings.Add("role", "role");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select 
c.contact_id, 
convert(int, c.contact_id) as contact_id_int,
cwd.login_name, 
c.email,
cwd.password_encrypt, 
c.first_name, 
c.last_name,
c.middle_initial,
c.title,
c.suffix,
co.company_name,
c.email,
c.type as company_type,
c.job_title as role
from contact c
inner join contact_web_details cwd on c.contact_id = cwd.contact_id
inner join company co on c.company_id = co.company_id
where cwd.login_name = @userLogin";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"select 
c.contact_id, 
convert(int, c.contact_id) as contact_id_int,
cwd.login_name, 
cwd.password_encrypt, 
c.first_name, 
c.last_name,
c.middle_initial,
c.title,
c.suffix,
co.company_name,
c.email,c.type as company_type,
c.job_title as role
from contact c
inner join contact_web_details cwd on c.contact_id = cwd.contact_id
inner join company co on c.company_id = co.company_id
inner join tic_contact_admin ca on c.contact_id = ca.inspector_contact_id
inner join contact ci on ca.contact_admin_id = ci.contact_id
inner join contact_web_details cwdi on ci.contact_id = cwdi.contact_id 
where cwdi.login_name = @userLogin";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillUser(PivotalED.UserDataTable dataTable, string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.UserDataTable GetUserByLogin(string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            PivotalED.UserDataTable dataTable = new PivotalED.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillContactsAdminByUserLogin(PivotalED.UserDataTable dataTable, string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.UserDataTable GetContactAdminsByUserLogin(string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            PivotalED.UserDataTable dataTable = new PivotalED.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ConstructionProjectFilterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConstructionProjectFilterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ConstructionProjectFilter";
            tableMapping.ColumnMappings.Add("tic_construction_project_id", "tic_construction_project_id");
            tableMapping.ColumnMappings.Add("tic_construction_project_name", "tic_construction_project_name");
            tableMapping.ColumnMappings.Add("TIC_Inspection_Scope", "TIC_Inspection_Scope");
            tableMapping.ColumnMappings.Add("tic_construction_project_id_int", "tic_construction_project_id_int");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select cp.tic_construction_project_id, cp.tic_construction_project_name, TIC_Inspection_Scope,
convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int
from tic_construction_project cp
inner join tic_cp__company cpc on cp.tic_construction_project_id = cpc.tic_construction_project_id
inner join tic_cp__company__contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id
inner join contact c on cpcc.contact_id = c.contact_id
inner join contact_web_details cwd on cwd.contact_id = c.contact_id
where cwd.login_name = @userLogin";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillProjectFilterByUserLogin(PivotalED.ConstructionProjectFilterDataTable dataTable, string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.ConstructionProjectFilterDataTable GetProjectFilterByUserLogin(string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            PivotalED.ConstructionProjectFilterDataTable dataTable = new PivotalED.ConstructionProjectFilterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class PhaseFilterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PhaseFilterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "PhaseFilter";
            tableMapping.ColumnMappings.Add("tic_construction_project_id_int", "tic_construction_project_id_int");
            tableMapping.ColumnMappings.Add("construction_phase_id", "construction_phase_id");
            tableMapping.ColumnMappings.Add("construction_phase_number", "construction_phase_number");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select ph.construction_phase_id, ph.construction_phase_number,
convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int
from tic_cp_construction_phase ph 
inner join tic_construction_project cp on ph.construction_project_id = cp.tic_construction_project_id
inner join tic_cp__company cpc on cp.tic_construction_project_id = cpc.tic_construction_project_id
inner join tic_cp__company__contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id
inner join contact c on cpcc.contact_id = c.contact_id
inner join contact_web_details cwd on cwd.contact_id = c.contact_id
where cwd.login_name = @userLogin
and not isnull(ph.active, 0) = 0
order by construction_phase_id asc";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillPhaseFilterByUserLogin(PivotalED.PhaseFilterDataTable dataTable, string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.PhaseFilterDataTable GetPhaseFilterByUserLogin(string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            PivotalED.PhaseFilterDataTable dataTable = new PivotalED.PhaseFilterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InspTemplateFilterTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspTemplateFilterTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InspTemplateFilter";
            tableMapping.ColumnMappings.Add("date_description", "date_description");
            tableMapping.ColumnMappings.Add("tic_construction_project_id_int", "tic_construction_project_id_int");
            tableMapping.ColumnMappings.Add("tic_inspection_type_id_int", "tic_inspection_type_id_int");
            tableMapping.ColumnMappings.Add("TIC_Const_Phase_Number", "TIC_Const_Phase_Number");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"
select distinct convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int, null as TIC_Const_Phase_Number,
 lk.date_description, 
convert(int, lk.tic_construction_dt_lookup_id) as tic_inspection_type_id_int
from tic_cp__insp_template tt
inner join tic_construction_project cp on tt.tic_construction_project_id = cp.tic_construction_project_id
inner join inspection_template tmp on tt.inspection_template_id = tmp.inspection_template_id
inner join tic_construction_date_lookup lk on tmp.tic_inspection_type_id = lk.tic_Construction_dt_lookup_id
inner join tic_cp__company cpc on cp.tic_construction_project_id = cpc.tic_construction_project_id
inner join tic_cp__company__contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id
inner join contact c on cpcc.contact_id = c.contact_id
inner join contact_web_details cwd on cwd.contact_id = c.contact_id
where cwd.login_name = @userLogin
order by lk.date_description asc";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"
select distinct convert(int, cpc.tic_construction_project_id) as tic_construction_project_id_int, null as TIC_Const_Phase_Number,
 lk.date_description, 
convert(int, lk.tic_construction_dt_lookup_id) as tic_inspection_type_id_int
from TIC_CP__Company_Insp_Type tt
inner join tic_construction_date_lookup lk on tt.tic_inspection_type_id = lk.tic_Construction_dt_lookup_id
inner join tic_cp__company cpc on tt.tic_cp__company_id = cpc.tic_cp__company_Id
inner join tic_cp__company__contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id
inner join contact c on cpcc.contact_id = c.contact_id
inner join contact_web_details cwd on cwd.contact_id = c.contact_id
where cwd.login_name = @userLogin
order by lk.date_description asc";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillInspTemplatesByUserLogin(PivotalED.InspTemplateFilterDataTable dataTable, string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.InspTemplateFilterDataTable GetInspTemplatesByUserLogin(string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            PivotalED.InspTemplateFilterDataTable dataTable = new PivotalED.InspTemplateFilterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInspectionTypeForInspector(PivotalED.InspTemplateFilterDataTable dataTable, string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.InspTemplateFilterDataTable GetInspectionTypeFilterForInspector(string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            PivotalED.InspTemplateFilterDataTable dataTable = new PivotalED.InspTemplateFilterDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ScheduledInspectionsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScheduledInspectionsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ScheduledInspections";
            tableMapping.ColumnMappings.Add("tic_construction_project_name", "tic_construction_project_name");
            tableMapping.ColumnMappings.Add("phase_name", "phase_name");
            tableMapping.ColumnMappings.Add("lot_number", "lot_number");
            tableMapping.ColumnMappings.Add("date_description", "date_description");
            tableMapping.ColumnMappings.Add("tract", "tract");
            tableMapping.ColumnMappings.Add("Scheduled_Date", "Scheduled_Date");
            tableMapping.ColumnMappings.Add("tic_construction_project_int", "tic_construction_project_int");
            tableMapping.ColumnMappings.Add("tic_construction_dt_lookup_id_int", "tic_construction_dt_lookup_id_int");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "\r\nselect convert(int, cp.tic_construction_project_id) as tic_construction_project" +
                "_int, \r\ncp.tic_construction_project_name,\r\nph.TIC_Const_Phase_Number as phase_na" +
                "me,\r\np.lot_number,\r\nlk.date_description,\r\nconvert(int, lk.tic_construction_dt_lo" +
                "okup_id) as tic_construction_dt_lookup_id_int,\r\np.tract,\r\nMIN(tt.Scheduled_Date)" +
                " As Scheduled_Date\r\nfrom tic_lot_construction_date tt\r\ninner join tic_constructi" +
                "on_date_lookup lk on tt.TIC_Construction_Date_LkUp_Id = lk.tic_construction_dt_l" +
                "ookup_id\r\ninner join product p on tt.lot_id = p.product_id\r\ninner join TIC_Const" +
                "ruction_Phase ph on p.phase = ph.TIC_Const_Phase_Number\r\ninner join tic_construc" +
                "tion_project cp on p.tic_construction_project_id = cp.tic_construction_project_i" +
                "d\r\ninner join TIC_CP_Construction_Phase cpph on (ph.tic_Construction_phase_id = " +
                "cpph.construction_phase_id \r\n\t\t\tand cp.tic_construction_project_id = cpph.constr" +
                "uction_project_id)\r\ninner join tic_cp__company cpc on cp.tic_construction_projec" +
                "t_id = cpc.tic_construction_project_id\r\ninner join tic_cp__company__contact cpcc" +
                " on cpc.tic_cp__company_id = cpcc.tic_cp__company_id\r\ninner join contact c on cp" +
                "cc.contact_id = c.contact_id\r\ninner join contact_web_details cwd on cwd.contact_" +
                "id = c.contact_id\r\nwhere cwd.login_name = @userLogin\r\nand cp.tic_construction_pr" +
                "oject_name = @cpName\r\nand not isnull(cpph.active, 0) = 0\r\nand ISNULL(tt.inspecti" +
                "on_status, \'\') = \'\'\r\ngroup by lot_number, cp.tic_construction_project_id, cp.tic" +
                "_construction_project_name,\r\nph.TIC_Const_Phase_Number,\r\np.lot_number,\r\nlk.date_" +
                "description,\r\nlk.tic_construction_dt_lookup_id,\r\np.tract\r\norder by cp.tic_constr" +
                "uction_project_name, ph.TIC_Const_Phase_Number, p.lot_number, lk.date_descriptio" +
                "n asc";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpName", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, "TIC_Construction_Project_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "select convert(int, cp.tic_construction_project_id) as tic_construction_project_i" +
                "nt, \r\ncp.tic_construction_project_name,\r\nph.TIC_Const_Phase_Number as phase_name" +
                ", \r\np.lot_number,\r\nlk.date_description,\r\nconvert(int, lk.tic_construction_dt_loo" +
                "kup_id) as tic_construction_dt_lookup_id_int,\r\np.tract,\r\np.building,\r\nMIN(tt.Sch" +
                "eduled_Date) As Scheduled_Date\r\nfrom tic_lot_construction_date tt\r\ninner join ti" +
                "c_construction_date_lookup lk on tt.TIC_Construction_Date_LkUp_Id = lk.tic_const" +
                "ruction_dt_lookup_id\r\ninner join product p on tt.lot_id = p.product_id\r\ninner jo" +
                "in TIC_Construction_Phase ph on p.phase = ph.TIC_Const_Phase_Number\r\ninner join " +
                "tic_construction_project cp on p.tic_construction_project_id = cp.tic_constructi" +
                "on_project_id\r\ninner join TIC_CP_Construction_Phase cpph on (ph.tic_Construction" +
                "_phase_id = cpph.construction_phase_id \r\n\t\t\tand cp.tic_construction_project_id =" +
                " cpph.construction_project_id)\r\ninner join tic_cp__company cpc on cp.tic_constru" +
                "ction_project_id = cpc.tic_construction_project_id\r\ninner join tic_cp__company__" +
                "contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id\r\ninner join TIC" +
                "_CP__Company_Insp_Type cit on cpc.TIC_CP__Company_Id = cit.TIC_CP__Company_Id\r\ni" +
                "nner join contact c on cpcc.contact_id = c.contact_id\r\ninner join contact_web_de" +
                "tails cwd on cwd.contact_id = c.contact_id\r\nwhere cwd.login_name = @userLogin\r\na" +
                "nd cp.tic_construction_project_name = @cpName\r\nand not isnull(cpph.active, 0) = " +
                "0\r\nand ISNULL(tt.inspection_status, \'\') = \'\'\r\nand tt.tic_construction_date_lkup_" +
                "id = cit.tic_inspection_type_id\r\ngroup by building, cp.tic_construction_project_" +
                "id, cp.tic_construction_project_name,\r\nph.TIC_Const_Phase_Number, \r\np.lot_number" +
                ",\r\nlk.date_description,\r\nlk.tic_construction_dt_lookup_id,\r\np.tract,\r\np.building" +
                "\r\norder by cp.tic_construction_project_name, ph.TIC_Const_Phase_Number, p.buildi" +
                "ng, lk.date_description asc\r\n\r\n\r\n";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpName", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, "TIC_Construction_Project_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "select convert(int, cp.tic_construction_project_id) as tic_construction_project_i" +
                "nt, \r\ncp.tic_construction_project_name,\r\nph.TIC_Const_Phase_Number as phase_name" +
                ", \r\np.lot_number,\r\nlk.date_description,\r\nconvert(int, lk.tic_construction_dt_loo" +
                "kup_id) as tic_construction_dt_lookup_id_int,\r\np.tract,\r\np.building,\r\nMIN(tt.Sch" +
                "eduled_Date) As Scheduled_Date\r\nfrom tic_lot_construction_date tt\r\ninner join ti" +
                "c_construction_date_lookup lk on tt.TIC_Construction_Date_LkUp_Id = lk.tic_const" +
                "ruction_dt_lookup_id\r\ninner join product p on tt.lot_id = p.product_id\r\ninner jo" +
                "in TIC_Construction_Phase ph on p.phase = ph.TIC_Const_Phase_Number\r\ninner join " +
                "tic_construction_project cp on p.tic_construction_project_id = cp.tic_constructi" +
                "on_project_id\r\ninner join TIC_CP_Construction_Phase cpph on (ph.tic_Construction" +
                "_phase_id = cpph.construction_phase_id \r\n\t\t\tand cp.tic_construction_project_id =" +
                " cpph.construction_project_id)\r\ninner join tic_cp__company cpc on cp.tic_constru" +
                "ction_project_id = cpc.tic_construction_project_id\r\ninner join tic_cp__company__" +
                "contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id\r\ninner join con" +
                "tact c on cpcc.contact_id = c.contact_id\r\ninner join contact_web_details cwd on " +
                "cwd.contact_id = c.contact_id\r\nwhere cwd.login_name = @userLogin\r\nand cp.tic_con" +
                "struction_project_name = @cpName\r\nand not isnull(cpph.active, 0) = 0\r\nand ISNULL" +
                "(tt.inspection_status, \'\') = \'\'\r\ngroup by building, cp.tic_construction_project_" +
                "id, cp.tic_construction_project_name,\r\nph.TIC_Const_Phase_Number, \r\np.lot_number" +
                ",\r\nlk.date_description,\r\nlk.tic_construction_dt_lookup_id,\r\np.tract,\r\np.building" +
                "\r\norder by cp.tic_construction_project_name, ph.TIC_Const_Phase_Number, p.buildi" +
                "ng, lk.date_description asc\r\n\r\n\r\n";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpName", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, "TIC_Construction_Project_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "\r\nselect convert(int, cp.tic_construction_project_id) as tic_construction_project" +
                "_int, \r\ncp.tic_construction_project_name,\r\nph.TIC_Const_Phase_Number as phase_na" +
                "me,\r\np.lot_number,\r\nlk.date_description,\r\nconvert(int, lk.tic_construction_dt_lo" +
                "okup_id) as tic_construction_dt_lookup_id_int,\r\np.tract,\r\nMIN(tt.Scheduled_Date)" +
                " As Scheduled_Date\r\nfrom tic_lot_construction_date tt\r\ninner join tic_constructi" +
                "on_date_lookup lk on tt.TIC_Construction_Date_LkUp_Id = lk.tic_construction_dt_l" +
                "ookup_id\r\ninner join product p on tt.lot_id = p.product_id\r\ninner join TIC_Const" +
                "ruction_Phase ph on p.phase = ph.TIC_Const_Phase_Number\r\ninner join tic_construc" +
                "tion_project cp on p.tic_construction_project_id = cp.tic_construction_project_i" +
                "d\r\ninner join TIC_CP_Construction_Phase cpph on (ph.tic_Construction_phase_id = " +
                "cpph.construction_phase_id \r\n\t\t\tand cp.tic_construction_project_id = cpph.constr" +
                "uction_project_id)\r\ninner join tic_cp__company cpc on cp.tic_construction_projec" +
                "t_id = cpc.tic_construction_project_id\r\ninner join tic_cp__company__contact cpcc" +
                " on cpc.tic_cp__company_id = cpcc.tic_cp__company_id\r\ninner join TIC_CP__Company" +
                "_Insp_Type cit on cpc.TIC_CP__Company_Id = cit.TIC_CP__Company_Id\r\ninner join co" +
                "ntact c on cpcc.contact_id = c.contact_id\r\ninner join contact_web_details cwd on" +
                " cwd.contact_id = c.contact_id\r\nwhere cwd.login_name = @userLogin\r\nand cp.tic_co" +
                "nstruction_project_name = @cpName\r\nand not isnull(cpph.active, 0) = 0\r\nand ISNUL" +
                "L(tt.inspection_status, \'\') = \'\'\r\nand tt.tic_construction_date_lkup_id = cit.tic" +
                "_inspection_type_id\r\ngroup by lot_number, cp.tic_construction_project_id, cp.tic" +
                "_construction_project_name,\r\nph.TIC_Const_Phase_Number,\r\np.lot_number,\r\nlk.date_" +
                "description,\r\nlk.tic_construction_dt_lookup_id,\r\np.tract\r\norder by cp.tic_constr" +
                "uction_project_name, ph.TIC_Const_Phase_Number, p.lot_number, lk.date_descriptio" +
                "n asc\r\n";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpName", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, "TIC_Construction_Project_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "select convert(int, cp.tic_construction_project_id) as tic_construction_project_i" +
                "nt, \r\ncp.tic_construction_project_name,\r\nph.TIC_Const_Phase_Number as phase_name" +
                ", \r\np.lot_number,\r\np.unit,\r\nlk.date_description,\r\nconvert(int, lk.tic_constructi" +
                "on_dt_lookup_id) as tic_construction_dt_lookup_id_int,\r\np.tract,\r\np.building,\r\nt" +
                "t.Scheduled_Date\r\nfrom tic_lot_construction_date tt\r\ninner join tic_construction" +
                "_date_lookup lk on tt.TIC_Construction_Date_LkUp_Id = lk.tic_construction_dt_loo" +
                "kup_id\r\ninner join product p on tt.lot_id = p.product_id\r\ninner join TIC_Constru" +
                "ction_Phase ph on p.phase = ph.TIC_Const_Phase_Number\r\ninner join tic_constructi" +
                "on_project cp on p.tic_construction_project_id = cp.tic_construction_project_id\r" +
                "\ninner join TIC_CP_Construction_Phase cpph on (ph.tic_Construction_phase_id = cp" +
                "ph.construction_phase_id \r\n\t\t\tand cp.tic_construction_project_id = cpph.construc" +
                "tion_project_id)\r\ninner join tic_cp__company cpc on cp.tic_construction_project_" +
                "id = cpc.tic_construction_project_id\r\ninner join tic_cp__company__contact cpcc o" +
                "n cpc.tic_cp__company_id = cpcc.tic_cp__company_id\r\ninner join TIC_CP__Company_I" +
                "nsp_Type cit on cpc.TIC_CP__Company_Id = cit.TIC_CP__Company_Id\r\ninner join cont" +
                "act c on cpcc.contact_id = c.contact_id\r\ninner join contact_web_details cwd on c" +
                "wd.contact_id = c.contact_id\r\nwhere cwd.login_name = @userLogin\r\nand cp.tic_cons" +
                "truction_project_name = @cpName\r\nand not isnull(cpph.active, 0) = 0\r\nand ISNULL(" +
                "tt.inspection_status, \'\') = \'\'\r\nand tt.tic_construction_date_lkup_id = cit.tic_i" +
                "nspection_type_id\r\norder by cp.tic_construction_project_name, ph.TIC_Const_Phase" +
                "_Number, p.unit, lk.date_description asc\r\n";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpName", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, "TIC_Construction_Project_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"
select convert(int, cp.tic_construction_project_id) as tic_construction_project_int, 
cp.tic_construction_project_name,
ph.TIC_Const_Phase_Number as phase_name, 
p.lot_number,
p.unit,
lk.date_description,
convert(int, lk.tic_construction_dt_lookup_id) as tic_construction_dt_lookup_id_int,
p.tract,
p.building,
tt.Scheduled_Date
from tic_lot_construction_date tt
inner join tic_construction_date_lookup lk on tt.TIC_Construction_Date_LkUp_Id = lk.tic_construction_dt_lookup_id
inner join product p on tt.lot_id = p.product_id
inner join TIC_Construction_Phase ph on p.phase = ph.TIC_Const_Phase_Number
inner join tic_construction_project cp on p.tic_construction_project_id = cp.tic_construction_project_id
inner join TIC_CP_Construction_Phase cpph on (ph.tic_Construction_phase_id = cpph.construction_phase_id 
			and cp.tic_construction_project_id = cpph.construction_project_id)
inner join tic_cp__company cpc on cp.tic_construction_project_id = cpc.tic_construction_project_id
inner join tic_cp__company__contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id
inner join contact c on cpcc.contact_id = c.contact_id
inner join contact_web_details cwd on cwd.contact_id = c.contact_id
where cwd.login_name = @userLogin
and cp.tic_construction_project_name = @cpName
and not isnull(cpph.active, 0) = 0
and ISNULL(tt.inspection_status, '') = ''
order by cp.tic_construction_project_name, ph.TIC_Const_Phase_Number, p.unit, lk.date_description asc";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpName", global::System.Data.SqlDbType.VarChar, 100, global::System.Data.ParameterDirection.Input, 0, 0, "TIC_Construction_Project_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillLotScheduledInspectionsByUserLogin(PivotalED.ScheduledInspectionsDataTable dataTable, string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.ScheduledInspectionsDataTable GetLotScheduledInspectionsByUserLogin(string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            PivotalED.ScheduledInspectionsDataTable dataTable = new PivotalED.ScheduledInspectionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBuildingScheduledInspectionsByInspectorLogin(PivotalED.ScheduledInspectionsDataTable dataTable, string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.ScheduledInspectionsDataTable GetBuildingScheduledInspectionsByInspectorLogin(string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            PivotalED.ScheduledInspectionsDataTable dataTable = new PivotalED.ScheduledInspectionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBuildingScheduledInspectionsByUserLogin(PivotalED.ScheduledInspectionsDataTable dataTable, string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.ScheduledInspectionsDataTable GetBuildingScheduledInspectionsByUserLogin(string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            PivotalED.ScheduledInspectionsDataTable dataTable = new PivotalED.ScheduledInspectionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillLotScheduledInspectionsByInspectorLogin(PivotalED.ScheduledInspectionsDataTable dataTable, string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.ScheduledInspectionsDataTable GetLotScheduledInspectionsByInspectorLogin(string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            PivotalED.ScheduledInspectionsDataTable dataTable = new PivotalED.ScheduledInspectionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillUnitByInspectorLogin(PivotalED.ScheduledInspectionsDataTable dataTable, string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.ScheduledInspectionsDataTable GetUnitScheduledInspectionsByInspectorLogin(string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            PivotalED.ScheduledInspectionsDataTable dataTable = new PivotalED.ScheduledInspectionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillUnitScheduledInspectionsByUserLogin(PivotalED.ScheduledInspectionsDataTable dataTable, string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.ScheduledInspectionsDataTable GetUnitScheduledInspectionsByUserLogin(string userLogin, string cpName) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((cpName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(cpName));
            }
            PivotalED.ScheduledInspectionsDataTable dataTable = new PivotalED.ScheduledInspectionsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InspectionStepTemplateTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspectionStepTemplateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InspectionStepTemplate";
            tableMapping.ColumnMappings.Add("inspection_template_id", "inspection_template_id");
            tableMapping.ColumnMappings.Add("inspection_step_template_id", "inspection_step_template_id");
            tableMapping.ColumnMappings.Add("TIC_Inspection_Item", "TIC_Inspection_Item");
            tableMapping.ColumnMappings.Add("inspection_step_template_int", "inspection_step_template_int");
            tableMapping.ColumnMappings.Add("category_desc", "category_desc");
            tableMapping.ColumnMappings.Add("category_id", "category_id");
            tableMapping.ColumnMappings.Add("category_ordinal", "category_ordinal");
            tableMapping.ColumnMappings.Add("tic_Ordinal", "tic_Ordinal");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select 
ct.category_desc,
convert(int, ct.tic_insp_category_template_id) as category_id,
ct.ordinal as category_ordinal,
st.tic_Ordinal,
st.inspection_template_id, 
st.inspection_step_template_id, 
st.TIC_Inspection_Item,
convert(int, st.inspection_step_template_id) as inspection_step_template_int
from inspection_step_template st
inner join tic_insp_category_template ct
inner join inspection_template it on ct.inspection_template_id = it.inspection_template_id
on st.tic_insp_category_template_id = ct.tic_insp_category_template_id
where convert(int, it.inspection_template_id) = @inspectionTemplateId
order by ct.ordinal, st.tic_ordinal asc";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionTemplateId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillCheckListItems(PivotalED.InspectionStepTemplateDataTable dataTable, int inspectionTemplateId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionTemplateId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.InspectionStepTemplateDataTable GetInspectionCheckListItems(int inspectionTemplateId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionTemplateId));
            PivotalED.InspectionStepTemplateDataTable dataTable = new PivotalED.InspectionStepTemplateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InspectionTemplateTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspectionTemplateTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InspectionTemplate";
            tableMapping.ColumnMappings.Add("inspection_template_id", "inspection_template_id");
            tableMapping.ColumnMappings.Add("inspection_template_id_int", "inspection_template_id_int");
            tableMapping.ColumnMappings.Add("inspection_type", "inspection_type");
            tableMapping.ColumnMappings.Add("TIC_Template_Status", "TIC_Template_Status");
            tableMapping.ColumnMappings.Add("TIC_Template_Version", "TIC_Template_Version");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select top 1
it.inspection_template_id,
convert(int, it.inspection_template_id) as inspection_template_id_int,
lk.date_description as inspection_type,
TIC_Template_Status,
TIC_Template_Version
from inspection_template it
inner join tic_construction_date_lookup lk on it.TIC_Inspection_Type_Id = lk.tic_construction_dt_lookup_id
where convert(int, it.tic_inspection_type_id) = @inspectionTypeId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionTypeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillInspectionTemplate(PivotalED.InspectionTemplateDataTable dataTable, int inspectionTypeId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionTypeId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.InspectionTemplateDataTable GetInspectionTemplate(int inspectionTypeId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionTypeId));
            PivotalED.InspectionTemplateDataTable dataTable = new PivotalED.InspectionTemplateDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ExplodedUnitsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ExplodedUnitsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ExplodedUnits";
            tableMapping.ColumnMappings.Add("tic_construction_project_name", "tic_construction_project_name");
            tableMapping.ColumnMappings.Add("lot_number", "lot_number");
            tableMapping.ColumnMappings.Add("building", "building");
            tableMapping.ColumnMappings.Add("unit", "unit");
            tableMapping.ColumnMappings.Add("date_description", "date_description");
            tableMapping.ColumnMappings.Add("phase", "phase");
            tableMapping.ColumnMappings.Add("inspection_status", "inspection_status");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"
select 
cp.tic_construction_project_name,
p.phase, 
p.lot_number,
p.building,
p.unit,
lk.date_description,
tt.inspection_status
from tic_lot_construction_date tt
inner join tic_construction_date_lookup lk on tt.TIC_Construction_Date_LkUp_Id = lk.tic_construction_dt_lookup_id
inner join product p on tt.lot_id = p.product_id
inner join tic_construction_project cp on p.tic_construction_project_id = cp.tic_construction_project_id
where convert(int, cp.tic_construction_project_id) = @cpId
and p.phase = @phaseName
and p.building = @building
and convert(int, lk.tic_construction_dt_lookup_id) = @inspTypeId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@phaseName", global::System.Data.SqlDbType.VarChar, 40, global::System.Data.ParameterDirection.Input, 0, 0, "Phase", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@building", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "Building", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspTypeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"select 
cp.tic_construction_project_name,
p.phase,
p.lot_number,
p.building,
p.unit,
lk.date_description,
tt.inspection_status
from tic_lot_construction_date tt
inner join tic_construction_date_lookup lk on tt.TIC_Construction_Date_LkUp_Id = lk.tic_construction_dt_lookup_id
inner join product p on tt.lot_id = p.product_id
inner join tic_construction_project cp on p.tic_construction_project_id = cp.tic_construction_project_id
where convert(int, cp.tic_construction_project_id) = @cpId
and p.phase = @phaseName
and p.lot_number = @lotNumber
and convert(int, lk.tic_construction_dt_lookup_id) = @inspTypeId";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cpId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@phaseName", global::System.Data.SqlDbType.VarChar, 40, global::System.Data.ParameterDirection.Input, 0, 0, "Phase", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lotNumber", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "Lot_Number", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspTypeId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillExplodedUnitsByBuilding(PivotalED.ExplodedUnitsDataTable dataTable, int cpId, string phaseName, string building, int inspTypeId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(cpId));
            if ((phaseName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(phaseName));
            }
            if ((building == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(building));
            }
            this.Adapter.SelectCommand.Parameters[3].Value = ((int)(inspTypeId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.ExplodedUnitsDataTable GetExplodedUnitsByBuilding(int cpId, string phaseName, string building, int inspTypeId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(cpId));
            if ((phaseName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(phaseName));
            }
            if ((building == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(building));
            }
            this.Adapter.SelectCommand.Parameters[3].Value = ((int)(inspTypeId));
            PivotalED.ExplodedUnitsDataTable dataTable = new PivotalED.ExplodedUnitsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillUnitsByLotNumber(PivotalED.ExplodedUnitsDataTable dataTable, int cpId, string phaseName, string lotNumber, int inspTypeId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(cpId));
            if ((phaseName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(phaseName));
            }
            if ((lotNumber == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(lotNumber));
            }
            this.Adapter.SelectCommand.Parameters[3].Value = ((int)(inspTypeId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.ExplodedUnitsDataTable GetExplodedUnitsByLotNumber(int cpId, string phaseName, string lotNumber, int inspTypeId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(cpId));
            if ((phaseName == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(phaseName));
            }
            if ((lotNumber == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(lotNumber));
            }
            this.Adapter.SelectCommand.Parameters[3].Value = ((int)(inspTypeId));
            PivotalED.ExplodedUnitsDataTable dataTable = new PivotalED.ExplodedUnitsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InspectionTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspectionTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Inspection";
            tableMapping.ColumnMappings.Add("inspection_id_int", "inspection_id_int");
            tableMapping.ColumnMappings.Add("inspection_name", "inspection_name");
            tableMapping.ColumnMappings.Add("construction_project_id_int", "construction_project_id_int");
            tableMapping.ColumnMappings.Add("tic_construction_project_name", "tic_construction_project_name");
            tableMapping.ColumnMappings.Add("tic_inspector_id_int", "tic_inspector_id_int");
            tableMapping.ColumnMappings.Add("tic_inspector_name", "tic_inspector_name");
            tableMapping.ColumnMappings.Add("tic_created_by_id_int", "tic_created_by_id_int");
            tableMapping.ColumnMappings.Add("tic_created_by_name", "tic_created_by_name");
            tableMapping.ColumnMappings.Add("tic_supervisor_id_int", "tic_supervisor_id_int");
            tableMapping.ColumnMappings.Add("tic_sign_off_user_id_int", "tic_sign_off_user_id_int");
            tableMapping.ColumnMappings.Add("tic_sign_off_user_name", "tic_sign_off_user_name");
            tableMapping.ColumnMappings.Add("tic_reinsp_sign_off_user_id", "tic_reinsp_sign_off_user_id");
            tableMapping.ColumnMappings.Add("tic_reinsp_sign_off_user_name", "tic_reinsp_sign_off_user_name");
            tableMapping.ColumnMappings.Add("tic_esc_user_sign_off_Id_int", "tic_esc_user_sign_off_Id_int");
            tableMapping.ColumnMappings.Add("tic_esc_user_sign_off_name", "tic_esc_user_sign_off_name");
            tableMapping.ColumnMappings.Add("tic_Construction_Phase", "tic_Construction_Phase");
            tableMapping.ColumnMappings.Add("tic_inspection_type_id_int", "tic_inspection_type_id_int");
            tableMapping.ColumnMappings.Add("tic_inspection_type", "tic_inspection_type");
            tableMapping.ColumnMappings.Add("tic_scope", "tic_scope");
            tableMapping.ColumnMappings.Add("TIC_Corrective_Action_Required", "TIC_Corrective_Action_Required");
            tableMapping.ColumnMappings.Add("Date_Complete", "Date_Complete");
            tableMapping.ColumnMappings.Add("Notes", "Notes");
            tableMapping.ColumnMappings.Add("tic_supervisor_name", "tic_supervisor_name");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("TIC_Corr_Action_Doc_Location", "TIC_Corr_Action_Doc_Location");
            tableMapping.ColumnMappings.Add("TIC_Corrective_Action_Status", "TIC_Corrective_Action_Status");
            tableMapping.ColumnMappings.Add("tic_submitted_by_id", "tic_submitted_by_id");
            tableMapping.ColumnMappings.Add("tic_submitted_by_user_name", "tic_submitted_by_user_name");
            tableMapping.ColumnMappings.Add("TIC_Reinsp_Submitted_By_Id", "TIC_Reinsp_Submitted_By_Id");
            tableMapping.ColumnMappings.Add("TIC_Reinsp_Submitted_By_name", "TIC_Reinsp_Submitted_By_name");
            tableMapping.ColumnMappings.Add("tic_reinspection_due_date", "tic_reinspection_due_date");
            tableMapping.ColumnMappings.Add("tic_reinspection_complete_date", "tic_reinspection_complete_date");
            tableMapping.ColumnMappings.Add("scheduled_date", "scheduled_date");
            tableMapping.ColumnMappings.Add("date_assigned", "date_assigned");
            tableMapping.ColumnMappings.Add("TIC_Last_Saved_By_Id", "TIC_Last_Saved_By_Id");
            tableMapping.ColumnMappings.Add("TIC_Last_Saved_By_Name", "TIC_Last_Saved_By_Name");
            tableMapping.ColumnMappings.Add("TIC_Reinspected_By_Id", "TIC_Reinspected_By_Id");
            tableMapping.ColumnMappings.Add("TIC_Reinspected_By_Name", "TIC_Reinspected_By_Name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select convert(int, inspection_id) as inspection_id_int, \r\ninspection_name, \r\ncon" +
                "vert(int, cp.tic_construction_Project_id) as construction_project_id_int,\r\ncp.ti" +
                "c_construction_project_name,\r\nconvert(int, i.tic_Inspector_Id) as tic_inspector_" +
                "id_int,\r\n(c1.first_name + \' \' + c1.last_name) as tic_inspector_name, \r\nconvert(i" +
                "nt, i.tic_created_By_Id) as tic_created_by_id_int,\r\n(c2.first_name + \' \' + c2.la" +
                "st_name) as tic_created_by_name,\r\nconvert(int, i.tic_supervisor_id) as tic_super" +
                "visor_id_int, \r\n(c3.first_name + \' \' + c3.last_name) as tic_supervisor_name,\r\nco" +
                "nvert(int, i.tic_sign_off_user_id) as tic_sign_off_user_id_int,\r\n(c4.first_name " +
                "+ \' \' + c4.last_name) as tic_sign_off_user_name,\r\nconvert(int, i.tic_reinsp_sign" +
                "_off_user_id) as tic_reinsp_sign_off_user_id,\r\n(c5.first_name + \' \' + c5.last_na" +
                "me) as tic_reinsp_sign_off_user_name,\r\nconvert(int, i.TIC_Esc_User_Sign_Off_Id) " +
                "as tic_esc_user_sign_off_Id_int,\r\n(c6.first_name + \' \' + c6.last_name) as tic_es" +
                "c_user_sign_off_name,\r\ni.tic_Construction_Phase, \r\nconvert(int, i.tic_inspection" +
                "_Type_id) as tic_inspection_type_id_int,\r\nit.date_description as tic_inspection_" +
                "type,\r\ni.tic_scope,\r\ni.TIC_Corrective_Action_Required,\r\ni.Date_Complete, \r\ni.Not" +
                "es,\r\ni.tic_inspection_status as status,\r\ni.TIC_Corr_Action_Doc_Location,\r\ni.TIC_" +
                "Corrective_Action_Status,\r\nconvert(int, i.TIC_Submitted_By_Id) as tic_submitted_" +
                "by_id,\r\n(c7.first_name + \' \' + c7.last_name) as tic_submitted_by_user_name,\r\ncon" +
                "vert(int, i.TIC_Reinsp_Submitted_By_Id) as TIC_Reinsp_Submitted_By_Id,\r\n(c8.firs" +
                "t_name + \' \' + c8.last_name) as TIC_Reinsp_Submitted_By_name,\r\nconvert(int, i.ti" +
                "c_last_Saved_By) as TIC_Last_Saved_By_Id,\r\n(c9.first_name + \' \' + c9.last_name) " +
                "as TIC_Last_Saved_By_Name,\r\nconvert(int, i.TIC_Reinspected_By_Id) as TIC_Reinspe" +
                "cted_By_Id,\r\n(c10.first_name + \' \' + c10.last_name) as TIC_Reinspected_By_Name,\r" +
                "\ni.tic_reinspection_due_date,\r\ni.tic_reinspection_complete_date,\r\ni.scheduled_da" +
                "te,\r\ni.date_assigned\r\nfrom inspection i\r\nleft join contact c1 on i.tic_inspector" +
                "_id = c1.contact_id\r\nleft join contact c2 on i.tic_created_by_id = c2.contact_id" +
                "\r\nleft join contact c3 on i.tic_supervisor_id = c3.contact_id\r\nleft join contact" +
                " c4 on i.TIC_Sign_Off_User_Id = c4.contact_id\r\nleft join contact c5 on i.TIC_Rei" +
                "nsp_Sign_Off_User_Id = c5.contact_id\r\nleft join contact c6 on i.TIC_Esc_User_Sig" +
                "n_Off_Id = c6.contact_id\r\nleft join contact c7 on i.TIC_Submitted_By_Id = c7.con" +
                "tact_id\r\nleft join contact c8 on i.TIC_Reinsp_Submitted_By_Id = c8.contact_id\r\nl" +
                "eft join contact c9 on i.TIC_Last_Saved_By = c9.contact_id\r\nleft join contact c1" +
                "0 on i.TIC_Reinspected_By_Id = c10.contact_id\r\ninner join tic_construction_proje" +
                "ct cp on i.tic_construction_project_id = cp.tic_construction_project_id\r\ninner j" +
                "oin TIC_Construction_Date_Lookup it on i.tic_inspection_type_id = it.tic_constru" +
                "ction_dt_lookup_id\r\nwhere convert(int, i.inspection_id) = @inspectionId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillInspectionById(PivotalED.InspectionDataTable dataTable, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.InspectionDataTable GetInspectionById(int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            PivotalED.InspectionDataTable dataTable = new PivotalED.InspectionDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InspectionStepTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspectionStepTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InspectionStep";
            tableMapping.ColumnMappings.Add("inspection_step_id_int", "inspection_step_id_int");
            tableMapping.ColumnMappings.Add("category_ordinal", "category_ordinal");
            tableMapping.ColumnMappings.Add("category_desc", "category_desc");
            tableMapping.ColumnMappings.Add("step_ordinal", "step_ordinal");
            tableMapping.ColumnMappings.Add("description", "description");
            tableMapping.ColumnMappings.Add("inspection_id_int", "inspection_id_int");
            tableMapping.ColumnMappings.Add("tic_acknowledgement", "tic_acknowledgement");
            tableMapping.ColumnMappings.Add("category_id_int", "category_id_int");
            tableMapping.ColumnMappings.Add("tic_acknowledgement_status", "tic_acknowledgement_status");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select 
convert(int, st.inspection_step_id) as inspection_step_id_int, 
ct.ordinal as category_ordinal, 
ct.category_desc, 
st.tic_ordinal as step_ordinal, 
st.description,
convert(int, i.inspection_id) as inspection_id_int,
st.tic_acknowledgement,
convert(int, ct.tic_insp_Category_id) as category_id_int,
st.tic_acknowledgement_status
from inspection_step st
inner join tic_insp_category ct on st.tic_insp_category_id = ct.tic_insp_category_id
inner join inspection i on ct.inspection_id = i.inspection_id
where convert(int, i.inspection_id) = @inspectionId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillInspectionStepByInspectionId(PivotalED.InspectionStepDataTable dataTable, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.InspectionStepDataTable GetInspectionStepByInspectionId(int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            PivotalED.InspectionStepDataTable dataTable = new PivotalED.InspectionStepDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ScopeItemsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ScopeItemsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ScopeItems";
            tableMapping.ColumnMappings.Add("scope_item_id", "scope_item_id");
            tableMapping.ColumnMappings.Add("construction_project_id_int", "construction_project_id_int");
            tableMapping.ColumnMappings.Add("tic_Construction_Project_name", "tic_Construction_Project_name");
            tableMapping.ColumnMappings.Add("phase_nbr", "phase_nbr");
            tableMapping.ColumnMappings.Add("inspection_type_id_int", "inspection_type_id_int");
            tableMapping.ColumnMappings.Add("inspection_type", "inspection_type");
            tableMapping.ColumnMappings.Add("scope_item_nbr", "scope_item_nbr");
            tableMapping.ColumnMappings.Add("inspection_id_int", "inspection_id_int");
            tableMapping.ColumnMappings.Add("Inspection_Scope", "Inspection_Scope");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select
convert(int, tic_inspected_scope_items_id) as scope_item_id,
convert(int, cp.tic_construction_project_id) as construction_project_id_int,
cp.tic_Construction_Project_name,
sc.phase_nbr,
convert(int, sc.inspection_type_id) as inspection_type_id_int,
lk.date_description as inspection_type,
sc.scope_item_nbr,
convert(Int, inspection_id) as inspection_id_int,
sc.Inspection_Scope
from tic_Inspected_Scope_items sc
inner join tic_construction_project cp on sc.construction_project_id = cp.tic_construction_project_id
inner join tic_construction_date_lookup lk on sc.inspection_type_id = lk.tic_construction_dt_lookup_id
where convert(Int, sc.inspection_id) = @inspectionId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillScopeItems(PivotalED.ScopeItemsDataTable dataTable, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.ScopeItemsDataTable GetSCopeItemsByInspectionId(int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            PivotalED.ScopeItemsDataTable dataTable = new PivotalED.ScopeItemsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InspectionListTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspectionListTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InspectionList";
            tableMapping.ColumnMappings.Add("tic_construction_project_id_int", "tic_construction_project_id_int");
            tableMapping.ColumnMappings.Add("tic_construction_project_name", "tic_construction_project_name");
            tableMapping.ColumnMappings.Add("TIC_Construction_Phase", "TIC_Construction_Phase");
            tableMapping.ColumnMappings.Add("tic_scope", "tic_scope");
            tableMapping.ColumnMappings.Add("tic_inspection_type_id_int", "tic_inspection_type_id_int");
            tableMapping.ColumnMappings.Add("inspection_type_name", "inspection_type_name");
            tableMapping.ColumnMappings.Add("due_date", "due_date");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("inspection_id_int", "inspection_id_int");
            tableMapping.ColumnMappings.Add("date_complete", "date_complete");
            tableMapping.ColumnMappings.Add("last_saved_by_id", "last_saved_by_id");
            tableMapping.ColumnMappings.Add("last_saved_by_user_name", "last_saved_by_user_name");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[6];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select 
convert(int, i.inspection_id) as inspection_id_int,
convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int,
cp.tic_construction_project_name,
i.TIC_Construction_Phase,
i.tic_scope,
convert(int, i.tic_inspection_type_id) as tic_inspection_type_id_int, 
lk.date_description as inspection_type_name,
i.due_date,
i.tic_inspection_status as status,
i.date_complete,
convert(int, i.TIC_Last_Saved_By) as last_saved_by_id,
(lsc.first_name + ' ' + lsc.last_name) as last_saved_by_user_name
from 
inspection i 
inner join tic_construction_project cp on i.tic_construction_project_id = cp.tic_construction_project_id
inner join tic_construction_date_lookup lk on i.tic_inspection_type_id = lk.tic_construction_dt_lookup_id
inner join tic_cp__company cpc on cp.tic_construction_project_id = cpc.tic_construction_project_id
inner join tic_cp__company__contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id
inner join contact c on cpcc.contact_id = c.contact_id
inner join contact_web_details cwd on cwd.contact_id = c.contact_id
left join contact lsc on i.tic_last_saved_by = lsc.contact_id
where cwd.login_name = @userLogin
and i.status = @status";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.VarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"select 
convert(int, i.inspection_id) as inspection_id_int,
convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int,
cp.tic_construction_project_name,
i.TIC_Construction_Phase,
i.tic_scope,
convert(int, i.tic_inspection_type_id) as tic_inspection_type_id_int, 
lk.date_description as inspection_type_name,
i.due_date,
i.tic_inspection_status as status,
i.date_complete,
convert(int, i.TIC_Last_Saved_By) as last_saved_by_id,
(lsc.first_name + ' ' + lsc.last_name) as last_saved_by_user_name
from 
inspection i 
inner join tic_construction_project cp on i.tic_construction_project_id = cp.tic_construction_project_id
inner join tic_construction_date_lookup lk on i.tic_inspection_type_id = lk.tic_construction_dt_lookup_id
inner join tic_cp__company cpc on cp.tic_construction_project_id = cpc.tic_construction_project_id
inner join tic_cp__company__contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id
inner join contact c on cpcc.contact_id = c.contact_id
inner join contact_web_details cwd on cwd.contact_id = c.contact_id
left join contact lsc on i.tic_last_saved_by = lsc.contact_id
where cwd.login_name = @userLogin
and convert(int, i.inspection_id) = @inspectionId";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"select 
convert(int, i.inspection_id) as inspection_id_int,
convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int,
cp.tic_construction_project_name,
i.TIC_Construction_Phase,
i.tic_scope,
convert(int, i.tic_inspection_type_id) as tic_inspection_type_id_int, 
lk.date_description as inspection_type_name,
i.due_date,
i.tic_inspection_status as status,
i.date_complete,
convert(int, i.TIC_Last_Saved_By) as last_saved_by_id,
(lsc.first_name + ' ' + lsc.last_name) as last_saved_by_user_name
from 
inspection i 
inner join tic_construction_project cp on i.tic_construction_project_id = cp.tic_construction_project_id
inner join tic_construction_date_lookup lk on i.tic_inspection_type_id = lk.tic_construction_dt_lookup_id
inner join contact c on i.tic_inspector_id = c.contact_id
left join contact lsc on i.tic_last_saved_by = lsc.contact_id
where convert(int, c.company_id) = @companyIdInt
and convert(int, i.inspection_id) = @inspectionId";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@companyIdInt", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"select 
convert(int, i.inspection_id) as inspection_id_int,
convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int,
cp.tic_construction_project_name,
i.TIC_Construction_Phase,
i.tic_scope,
convert(int, i.tic_inspection_type_id) as tic_inspection_type_id_int, 
lk.date_description as inspection_type_name,
i.due_date,
i.tic_inspection_status as status,
i.date_complete,
convert(int, i.TIC_Last_Saved_By) as last_saved_by_id,
(lsc.first_name + ' ' + lsc.last_name) as last_saved_by_user_name
from 
inspection i 
inner join tic_construction_project cp on i.tic_construction_project_id = cp.tic_construction_project_id
inner join tic_construction_date_lookup lk on i.tic_inspection_type_id = lk.tic_construction_dt_lookup_id
inner join contact c on i.tic_inspector_id = c.contact_id
left join contact lsc on i.tic_last_saved_by = lsc.contact_id
where convert(int, c.company_id) = @companyIdInt";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@companyIdInt", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"select 
convert(int, i.inspection_id) as inspection_id_int,
convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int,
cp.tic_construction_project_name,
i.TIC_Construction_Phase,
i.tic_scope,
convert(int, i.tic_inspection_type_id) as tic_inspection_type_id_int, 
lk.date_description as inspection_type_name,
i.due_date,
i.tic_inspection_status as status,
i.date_complete,
convert(int, i.TIC_Last_Saved_By) as last_saved_by_id,
(lsc.first_name + ' ' + lsc.last_name) as last_saved_by_user_name
from 
inspection i 
inner join tic_construction_project cp on i.tic_construction_project_id = cp.tic_construction_project_id
inner join tic_construction_date_lookup lk on i.tic_inspection_type_id = lk.tic_construction_dt_lookup_id
inner join contact c on i.tic_inspector_id = c.contact_id
left join contact lsc on i.tic_last_saved_by = lsc.contact_id
where convert(int, c.company_id) = @companyIdInt
and i.status = @status";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@companyIdInt", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@status", global::System.Data.SqlDbType.VarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"select 
convert(int, i.inspection_id) as inspection_id_int,
convert(int, cp.tic_construction_project_id) as tic_construction_project_id_int,
cp.tic_construction_project_name,
i.TIC_Construction_Phase,
i.tic_scope,
convert(int, i.tic_inspection_type_id) as tic_inspection_type_id_int, 
lk.date_description as inspection_type_name,
i.due_date,
i.tic_inspection_status as status,
i.date_complete,
convert(int, i.TIC_Last_Saved_By) as last_saved_by_id,
(lsc.first_name + ' ' + lsc.last_name) as last_saved_by_user_name
from 
inspection i 
inner join tic_construction_project cp on i.tic_construction_project_id = cp.tic_construction_project_id
inner join tic_construction_date_lookup lk on i.tic_inspection_type_id = lk.tic_construction_dt_lookup_id
inner join tic_cp__company cpc on cp.tic_construction_project_id = cpc.tic_construction_project_id
inner join tic_cp__company__contact cpcc on cpc.tic_cp__company_id = cpcc.tic_cp__company_id
inner join contact c on cpcc.contact_id = c.contact_id
inner join contact_web_details cwd on cwd.contact_id = c.contact_id
left join contact lsc on i.tic_last_saved_by = lsc.contact_id
where cwd.login_name = @userLogin
";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userLogin", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillInspectionListByLoginAndStatus(PivotalED.InspectionListDataTable dataTable, string userLogin, string status) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((status == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(status));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.InspectionListDataTable GetInspectionListByLoginAndStatus(string userLogin, string status) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((status == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(status));
            }
            PivotalED.InspectionListDataTable dataTable = new PivotalED.InspectionListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInspectionByLoginAndInspectionId(PivotalED.InspectionListDataTable dataTable, string userLogin, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.InspectionListDataTable GetInspectionByLoginAndInspectionId(string userLogin, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(inspectionId));
            PivotalED.InspectionListDataTable dataTable = new PivotalED.InspectionListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInspectionForCompanyAndInspectionId(PivotalED.InspectionListDataTable dataTable, int companyIdInt, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(companyIdInt));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.InspectionListDataTable GetInspectionForCompanyAndInspectionId(int companyIdInt, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(companyIdInt));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(inspectionId));
            PivotalED.InspectionListDataTable dataTable = new PivotalED.InspectionListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInspectionListByCompany(PivotalED.InspectionListDataTable dataTable, int companyIdInt) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(companyIdInt));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.InspectionListDataTable GetInspectionListByCompany(int companyIdInt) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(companyIdInt));
            PivotalED.InspectionListDataTable dataTable = new PivotalED.InspectionListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByInspectionListByCompanyAndStatus(PivotalED.InspectionListDataTable dataTable, int companyIdInt, string status) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(companyIdInt));
            if ((status == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(status));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.InspectionListDataTable GetInspectionListByCompanyAndStatus(int companyIdInt, string status) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(companyIdInt));
            if ((status == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(status));
            }
            PivotalED.InspectionListDataTable dataTable = new PivotalED.InspectionListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillInspectionListByLogin(PivotalED.InspectionListDataTable dataTable, string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual PivotalED.InspectionListDataTable GetInspectionListByLogin(string userLogin) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((userLogin == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userLogin));
            }
            PivotalED.InspectionListDataTable dataTable = new PivotalED.InspectionListDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MiscellaneousCategoryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MiscellaneousCategoryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MiscellaneousCategory";
            tableMapping.ColumnMappings.Add("category_id_int", "category_id_int");
            tableMapping.ColumnMappings.Add("ordinal", "ordinal");
            tableMapping.ColumnMappings.Add("category_desc", "category_desc");
            tableMapping.ColumnMappings.Add("inspection_id_int", "inspection_id_int");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select \r\nconvert(int, tic_insp_category_id) as category_id_int,\r\nordinal,\r\ncatego" +
                "ry_desc,\r\nconvert(int, inspection_id) as inspection_id_int\r\nfrom tic_insp_catego" +
                "ry\r\nwhere convert(int, inspection_Id) = @inspectionId\r\nand category_desc = \'Misc" +
                "ellaneous\'";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillMiscellaneousCategory(PivotalED.MiscellaneousCategoryDataTable dataTable, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.MiscellaneousCategoryDataTable GetMiscellaneousCategoryByInspectionId(int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            PivotalED.MiscellaneousCategoryDataTable dataTable = new PivotalED.MiscellaneousCategoryDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QADocumentsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QADocumentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "QADocuments";
            tableMapping.ColumnMappings.Add("qa_documents_id_int", "qa_documents_id_int");
            tableMapping.ColumnMappings.Add("inspection_id_int", "inspection_id_int");
            tableMapping.ColumnMappings.Add("document_description", "document_description");
            tableMapping.ColumnMappings.Add("qa_document_path", "qa_document_path");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select
convert(int, tic_qa_documents_id) as qa_documents_id_int,
convert(int, inspection_id) as inspection_id_int,
document_description,
qa_document_path
from
tic_qa_documents
where convert(int, inspection_id) = @inspectionId
and isnull(ready_for_delete, 0) = 0";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillQADocumentsByInspectionId(PivotalED.QADocumentsDataTable dataTable, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.QADocumentsDataTable GetQADocumentsByInspectionId(int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            PivotalED.QADocumentsDataTable dataTable = new PivotalED.QADocumentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class QAWeblinksTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public QAWeblinksTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "QAWeblinks";
            tableMapping.ColumnMappings.Add("tic_qa_weblinks_id_int", "tic_qa_weblinks_id_int");
            tableMapping.ColumnMappings.Add("inspection_id_int", "inspection_id_int");
            tableMapping.ColumnMappings.Add("url_desc", "url_desc");
            tableMapping.ColumnMappings.Add("url", "url");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select\r\nconvert(int, tic_qa_weblinks_id) as tic_qa_weblinks_id_int,\r\nconvert(int," +
                " inspection_id) as inspection_id_int,\r\nurl_desc,\r\nurl\r\nfrom\r\ntic_qa_weblinks\r\nwh" +
                "ere convert(int, inspection_id) = @inspectionId\r\nand isnull(ready_for_delete, 0)" +
                " = 0";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillQAWeblinksByInspectionId(PivotalED.QAWeblinksDataTable dataTable, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.QAWeblinksDataTable GetQAWeblinksByInspectionId(int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            PivotalED.QAWeblinksDataTable dataTable = new PivotalED.QAWeblinksDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InspectionStatusTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspectionStatusTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InspectionStatus";
            tableMapping.ColumnMappings.Add("inspection_id_int", "inspection_id_int");
            tableMapping.ColumnMappings.Add("inspection_name", "inspection_name");
            tableMapping.ColumnMappings.Add("status", "status");
            tableMapping.ColumnMappings.Add("last_saved_by_id", "last_saved_by_id");
            tableMapping.ColumnMappings.Add("last_saved_by_user_name", "last_saved_by_user_name");
            tableMapping.ColumnMappings.Add("role_", "role_");
            tableMapping.ColumnMappings.Add("company_Type", "company_Type");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select convert(int, inspection_id) as inspection_id_int, 
inspection_name, 
convert(int, c.contact_id) as last_saved_by_id,
(c.first_name + ' ' + c.last_name) as last_saved_by_user_name,
c.job_title as role_,
c.type as company_Type,
i.tic_inspection_status as status
from inspection i
left join contact c on i.tic_last_saved_by = c.contact_id
left join company co on c.company_id = co.company_id
where convert(int, i.inspection_id) = @inspectionId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@inspectionId", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillInspectionStatusById(PivotalED.InspectionStatusDataTable dataTable, int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.InspectionStatusDataTable GetInspectionStatusByInspectionId(int inspectionId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(inspectionId));
            PivotalED.InspectionStatusDataTable dataTable = new PivotalED.InspectionStatusDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class InspectionStatusesTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public InspectionStatusesTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "InspectionStatuses";
            tableMapping.ColumnMappings.Add("user_choice_choices_id", "user_choice_choices_id");
            tableMapping.ColumnMappings.Add("rn_descriptor", "rn_descriptor");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select uc.user_choice_choices_id, uc.rn_descriptor from user_choice_choices uc\r\ni" +
                "nner join user_choice_names un on uc.user_choice_names_id = un.user_choice_names" +
                "_id\r\nwhere un.rn_descriptor = \'TIC Inspection Statuses\'";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillInspectionStatuses(PivotalED.InspectionStatusesDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.InspectionStatusesDataTable GetInspectionStatuses() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            PivotalED.InspectionStatusesDataTable dataTable = new PivotalED.InspectionStatusesDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ContactTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ContactTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Contact";
            tableMapping.ColumnMappings.Add("contact_id_int", "contact_id_int");
            tableMapping.ColumnMappings.Add("company_id_int", "company_id_int");
            tableMapping.ColumnMappings.Add("login_name", "login_name");
            tableMapping.ColumnMappings.Add("email", "email");
            tableMapping.ColumnMappings.Add("company_type", "company_type");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::TICPivotalQADataAccess.Properties.Settings.Default.IP_EDConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"select convert(int, c.contact_id) as contact_id_int, 
convert(int, c.company_id) as company_id_int,
cwd.login_name,
c.email,
c.type as company_type
from contact c
inner join contact_web_details cwd on c.contact_id = cwd.contact_id
inner join company co on c.company_id = co.company_id
where cwd.login_name = @loginName";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@loginName", global::System.Data.SqlDbType.VarChar, 32, global::System.Data.ParameterDirection.Input, 0, 0, "Login_Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillContactById(PivotalED.ContactDataTable dataTable, string loginName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((loginName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(loginName));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual PivotalED.ContactDataTable GetContactByLogin(string loginName) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((loginName == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(loginName));
            }
            PivotalED.ContactDataTable dataTable = new PivotalED.ContactDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(PivotalED dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(PivotalED dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(PivotalED dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(PivotalED dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591