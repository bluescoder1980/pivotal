
/****************************************************************************
 PBSComms.cs : Implementation of communication with PBS.
 Generated by Pivotal Web Services Generator r5.9.
 Do not modify  the contents of this file with the code editor.
 Copyright (c) 2006, Pivotal Corporation
 ***************************************************************************/
using System;
using System.Text;
using System.Xml;
using System.Security;
using System.Reflection;
using System.Collections;
using System.Diagnostics;
using System.Net;
using System.IO;
using System.Web.Services.Protocols;
using System.Configuration;
using System.Collections.Specialized;
using System.Resources;
using System.Globalization;

// custom namespaces
using WebServiceSecurity;
using Pivotal.Interop.RDALib;


    public class PBSComms
    {
        private GenericData genData;
        public enum CommandType
        {
            Insert,
            Update,
            Delete,
            getSearchData,
            getFormData
        }

        public enum ConditionType
        {
            Equals,
            GreaterThan,
            GreaterThanEqual,
            LessThan,
            LessThanEqual,
            NotEqual
        }

        public PBSComms()
        {
            genData = new GenericData();
            pbsResponse = new XmlDocument();
            nsManager = new XmlNamespaceManager(pbsResponse.NameTable);
        }

        internal bool DoPBSRequest()
        {
            bool tempDoPBSRequest = false;
            try
            {
                XmlNode pbsError = null;

                bool pbsInfo = GetPBSInfo();
                if (pbsInfo)
                {
                    //Send XML Command to  PBS and get the response.
                    SubmitToPBS(xmlRequest.ToString());
                }
                //else
                //Throw soap exception

                nsManager.AddNamespace("ls", pbsResponse.LastChild.NamespaceURI);
                // Find if there was an error or not
                pbsError = pbsResponse.SelectSingleNode("/ls:commandResult/ls:error", nsManager);
                if (pbsError == null)
                {
                    // Success
                    tempDoPBSRequest = true;
                }
                else
                {
                    // Failure
                    tempDoPBSRequest = false;
                }
            }
            catch (SoapException ex)
            {
                throw ex;
            }
            return tempDoPBSRequest;
        }

        /// <summary>
        ///  Uses .net reflection to create data structures on the fly.
        /// </summary>
        /// <param name="DataClass"></param>

        internal void FillDataClass(ref object DataClass)
        {
            try
            {
                FieldInfo[] myFieldInfo = null;
                int i = 0;
                int j = 0;
                string fieldName = null;
                Hashtable afFields = new Hashtable(); // Collection of Active Form fields
                XmlNodeList afFormFieldMeta = null;
                XmlNode afFieldName = null;
                XmlNodeList afFieldValues = null;
                bool foundValue = false;
                string fieldValue = null;

                // Parse the PBS XML into a set of field names and values

                // Get lists of primary field names and values
                afFormFieldMeta = pbsResponse.SelectNodes("//ls:segmentFields/ls:formFieldMeta[not(../../ls:secondaryMeta) and ../../ls:visible=1]", nsManager); // This can contain buttons and separators too, but it will match the number & position of the field values in the next line:
                afFieldValues = pbsResponse.SelectNodes("//ls:primary/ls:fieldValue[../../ls:segmentMeta/ls:visible=1]", nsManager);

                // Add fields to collection

                int tempFor1 = afFieldValues.Count;
                for (i = 0; i < tempFor1; i++)
                {
                    afFieldName = afFormFieldMeta[i].SelectSingleNode("ls:fieldMeta/ls:fieldName", nsManager); // Only fields have fieldMeta/fieldName
                    if (afFieldName != null)
                    {

                        fieldName = afFieldName.InnerText;
                        if (!(afFields.ContainsKey(fieldName)))
                        {

                            foundValue = false;
                            int numAttrs = afFieldValues[i].Attributes.Count;

                            int tempFor2 = numAttrs;
                            for (j = 0; j < tempFor2; j++)
                            {
                                if (RECORD_ID_ATTRIBUTE_NAME == afFieldValues[i].Attributes[j].Name)
                                {
                                    fieldValue = afFieldValues[i].Attributes[j].InnerText;
                                    foundValue = true;
                                    break;
                                }
                            }
                            if (!foundValue)
                            {
                                fieldValue = afFieldValues[i].InnerText;
                            }

                            // Add to collection
                            afFields.Add(fieldName, fieldValue);
                        }
                    }
                }

                myFieldInfo = DataClass.GetType().GetFields();

                int tempFor3 = myFieldInfo.Length;
                for (i = 0; i < tempFor3; i++)
                {
                    fieldName = myFieldInfo[i].Name;
                    DataClass.GetType().GetField(fieldName).SetValue(DataClass, afFields[fieldName]);
                }

            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        #region Accessor Functions

        /// <summary>
        /// Returns record id generated by PBS when an "Insert" request is executed.
        /// </summary>
        /// <returns>Record id </returns>
        internal string GetResponseNewRecordId()
        {
            string recordId = null;
            try
            {
                recordId = pbsResponse.SelectSingleNode("/ls:commandResult/ls:data/ls:newRecordId", nsManager).InnerText;
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
            return recordId;
        }

        /// <summary>
        /// Returns count of the active searches.
        /// </summary>
        /// <returns>count</returns>
        internal int GetSearchRecordCount()
        {
            int count = 0;
            try
            {
                count = System.Convert.ToInt32(pbsResponse.SelectSingleNode("/ls:commandResult/ls:data/ls:searchData/ls:searchResults/ls:resultsListCount", nsManager).InnerText);

            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
            return count;
        }

        /// <summary>
        /// Returns the active search record id.This is used to execute Active search web nethods.
        /// </summary>
        /// <returns>record id</returns>
        internal string GetSearchRecordId()
        {
            string recordId = null;
            try
            {
                recordId = pbsResponse.SelectSingleNode("/ls:commandResult/ls:data/ls:searchData/ls:searchResults/ls:searchRow/ls:recordId", nsManager).InnerText;

            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
            return recordId;
        }

        /// <summary>
        /// Returns a list of active search record ids.Used for batch processing of search execution.
        /// </summary>
        /// <returns>List containing record ids.</returns>
        internal ArrayList GetSearchRecordIds()
        {
            ArrayList recordIds = new ArrayList();
            try
            {
                System.Xml.XmlNodeList recordNodes = null;

                recordNodes = pbsResponse.SelectNodes("/ls:commandResult/ls:data/ls:searchData/ls:searchResults/ls:searchRow/ls:recordId", nsManager);
                foreach (System.Xml.XmlNode resultRow in recordNodes)
                {
                    string recId = resultRow.InnerText;
                    recordIds.Add(recId);
                }

            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message,
                    "", Enumerations.FaultCode.Server);
            }
            return recordIds;
        }

        #endregion

        #region Error Response APIs

        /// <summary>
        /// Returns error number sent by PBS.Reads errorNumber element to retreive the same.
        /// </summary>
        /// <returns>Error Number parsed to int.</returns>
        internal int GetResponseErrorNumber()
        {
            int errorNumber = 0;
            try
            {
                string errorNumberStr = null;
                errorNumberStr = pbsResponse.SelectSingleNode("/ls:commandResult/ls:error/ls:errorNumber", nsManager).InnerText;
                errorNumber = int.Parse(errorNumberStr, System.Globalization.NumberStyles.HexNumber);
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
            return errorNumber;
        }

        /// <summary>
        /// Returns error text sent by PBS.Reads errorText element to retreive the same.
        /// This is short description of the error generated.
        /// </summary>
        /// <returns>Short Error Description</returns>
        internal string GetResponseErrorText()
        {
            string errorText = null;
            try
            {
                errorText = pbsResponse.SelectSingleNode("/ls:commandResult/ls:error/ls:errorText", nsManager).InnerText;
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
            return errorText;
        }

        /// <summary>
        /// Returns error details sent by PBS.Reads errorDetails element to retreive the same.
        /// This is long description of the error generated.
        /// </summary>
        /// <returns>Long error description</returns>
        internal string GetResponseErrorDetails()
        {
            string errorDetails = null;
            try
            {
                errorDetails = pbsResponse.SelectSingleNode("/ls:commandResult/ls:error/ls:errorDetails", nsManager).InnerText;
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
            return errorDetails;
        }

        #endregion

        #region XML Command Builder

        /// <summary>
        /// Generates PBS XML command header.The header elements are:
        /// 1) xml processing instruction
        /// 2) namespace
        /// 3) system name
        /// 4) Login Type.
        /// </summary>
        /// <param name="System">Pivotal System Name</param>
        internal void AddRequestHeader(string System)
        {
            try
            {
                xmlRequest.Append("<?xml version='1.0'?>");
                xmlRequest.Append("<command xmlns='" + PBS_NAMESPACE + "'>");
                xmlRequest.Append("<systemName>" + SecurityElement.Escape(System) + "</systemName>");
                xmlRequest.Append("<loginType>Active Client</loginType>");
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        /// <summary>
        /// Generates PBS XML command elements for the following operations:
        /// a) Insert/Update
        /// b) Save
        /// c) Search
        /// d) Delete.                 
        /// </summary>
        /// <param name="Command">Command Type</param>
        /// <param name="CommandParameters">Parameters, if any</param>
        /// <param name="Target">Business Object</param>
        internal void AddRequestCommandStart(CommandType Command, ref string[] CommandParameters, string Target)
        {
            try
            {
                switch (Command)
                {
                    case CommandType.Insert:
                    case CommandType.Update:
                        xmlRequest.Append("<saveFormData>");
                        if (CommandParameters != null)
                            AddRequestCommandParameters(ref CommandParameters);
                        xmlRequest.Append("<formUpdate>");
                        xmlRequest.Append("<formName>" + SecurityElement.Escape(Target) + "</formName>");
                        break;
                    case CommandType.getSearchData:
                        xmlRequest.Append("<getSearchData>");
                        xmlRequest.Append("<quickSearchTableName>" + SecurityElement.Escape(Target) + "</quickSearchTableName> ");
                        xmlRequest.Append("<searchCriteria>");
                        break;
                    case CommandType.getFormData:
                        xmlRequest.Append("<getFormData>");
                        xmlRequest.Append("<formName>" + SecurityElement.Escape(Target) + "</formName>");
                        xmlRequest.Append("<formDetailFlag>includeTableData</formDetailFlag>");
                        break;
                    case CommandType.Delete:
                        xmlRequest.Append("<deleteFormData>");
                        if (CommandParameters != null)
                            AddRequestCommandParameters(ref CommandParameters);
                        xmlRequest.Append("<formName>" + SecurityElement.Escape(Target) + "</formName>");
                        break;
                }
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        /// <summary>
        /// Generates PBS XML command for end elements.
        /// </summary>
        /// <param name="Command">Command Type</param>
        internal void AddRequestCommandEnd(CommandType Command)
        {
            try
            {
                switch (Command)
                {
                    case CommandType.Insert:
                    case CommandType.Update:
                        xmlRequest.Append("</formUpdate>");
                        xmlRequest.Append("</saveFormData>");
                        xmlRequest.Append("</command>");
                        break;
                    case CommandType.getSearchData:
                        xmlRequest.Append("</searchCriteria>");
                        xmlRequest.Append("<searchDetailFlag>dataOnly</searchDetailFlag>");
                        xmlRequest.Append("</getSearchData>");
                        xmlRequest.Append("</command>");
                        break;
                    case CommandType.getFormData:
                        xmlRequest.Append("</getFormData>");
                        xmlRequest.Append("</command>");
                        break;
                    case CommandType.Delete:
                        xmlRequest.Append("</deleteFormData>");
                        xmlRequest.Append("</command>");
                        break;
                }
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        /// <summary>
        /// Generates PBS XML Command for segments in a form.Applicable for Active Forms with 
        /// segments defined.
        /// </summary>
        /// <param name="SegmentName">Segment name(secondary)</param>
        internal void AddSegmentUpdateStart(string SegmentName)
        {
            try
            {
                xmlRequest.Append("<segmentUpdate>");
                xmlRequest.Append("<segmentName>" + SecurityElement.Escape(SegmentName) + "</segmentName>");
                xmlRequest.Append("<primaryUpdate>");
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        /// <summary>
        /// Generates PBS XML Command for fields within an Active Form.Applicable
        /// when executing Active Search Web Methods.
        /// </summary>
        /// <param name="FieldName">Field name within a form</param>
        /// <param name="FieldValue">Value to be inserted into the field.</param>
        internal void AddFieldUpdate(string FieldName, string FieldValue)
        {
            try
            {
                xmlRequest.Append("<fieldUpdate>");
                xmlRequest.Append("<fieldName>" + SecurityElement.Escape(FieldName) + "</fieldName>");
                xmlRequest.Append("<value>" + SecurityElement.Escape(FieldValue) + "</value>");
                xmlRequest.Append("</fieldUpdate>");
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        /// <summary>
        /// Generates PBS XML end Command for segments in a form.Applicable for Active Forms with 
        /// segments defined.
        /// </summary>
        internal void AddSegmentUpdateEnd()
        {
            try
            {
                xmlRequest.Append("</primaryUpdate>");
                xmlRequest.Append("</segmentUpdate>");
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        /// <summary>
        /// Generates Condition format for load by multiple key/value pairs.
        /// The conditions supported are:
        /// a) Equals
        /// b) Greater than
        /// c) Greater than or equal to
        /// d) Less than
        /// e) Less than or equal to
        /// f) Not equal to.
        /// </summary>
        /// <param name="FieldName"></param>
        /// <param name="Operator"></param>
        /// <param name="FieldValue"></param>
        internal void AddCondition(string[] FieldName, PBSComms.ConditionType[] Operator, string[] FieldValue)
        {
            try
            {
                ExceptionHandler exHandler;
                int fieldCount = FieldName.Length;
                int fieldValCount = FieldValue.Length;
                int operCount = Operator.Length;
                string oper = "";
                string errorMsg = string.Empty;
                if (fieldCount == fieldValCount)
                {
                    if (operCount == fieldCount)
                    {
                        for (int i = 0; i < fieldCount; i++)
                        {
                            //oper = SecurityElement.Escape(Operator[i]);
                            switch (Operator[i])
                            {
                                case PBSComms.ConditionType.Equals:
                                    oper = "Equals";
                                    break;
                                case PBSComms.ConditionType.GreaterThan:
                                    oper = "Greater Than";
                                    break;
                                case PBSComms.ConditionType.GreaterThanEqual:
                                    oper = "Greater Than or Equal";
                                    break;
                                case PBSComms.ConditionType.LessThan:
                                    oper = "Less Than";
                                    break;
                                case PBSComms.ConditionType.LessThanEqual:
                                    oper = "Less Than or Equal";
                                    break;
                                case PBSComms.ConditionType.NotEqual:
                                    oper = "Does Not Equal";
                                    break;
                            }
                            xmlRequest.Append("<condition>");
                            xmlRequest.Append("<fieldName>" + SecurityElement.Escape(FieldName[i]) + "</fieldName>");
                            xmlRequest.Append("<operator>");
                            xmlRequest.Append(oper);
                            xmlRequest.Append("</operator>");
                            xmlRequest.Append("<value>" + SecurityElement.Escape(FieldValue[i]) + "</value>");
                            xmlRequest.Append("</condition>");
                        }
                    }
                    else
                    {
                        exHandler = new ExceptionHandler();
                        errorMsg = genData.GetString("MSG_FIELDS_OPERATORS_DONOT_MATCH");
                        throw exHandler.RaiseException("", errorMsg, "", Enumerations.FaultCode.Client);
                    }
                }
                else
                {
                    exHandler = new ExceptionHandler();
                    errorMsg = genData.GetString("MSG_KEY_VALUE_PAIR_DONOT_MATCH");
                    throw exHandler.RaiseException("", errorMsg, "", Enumerations.FaultCode.Client);
                }
            }
            catch (SoapException ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Generates PBS XML Command for Save form data.If record id is specified,
        /// PBS shall not return the newly generated Recordid.
        /// </summary>
        /// <param name="RecordId"></param>
        internal void AddRequestRecordSource(string RecordId)
        {
            try
            {
                xmlRequest.Append("<recordSource>");
                xmlRequest.Append("<recordId>" + RecordId + "</recordId>");
                xmlRequest.Append("</recordSource>");
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        public void AddRequestRecordId(string RecordId)
        {
            try
            {
                xmlRequest.Append("<recordId>" + RecordId + "</recordId>");
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        /// <summary>
        /// Generates PBS XML Command for Active Search web methods.
        /// </summary>
        /// <param name="System">Pivotal System Configured</param>
        /// <param name="SearchID">Active Search ID</param>
        /// <param name="SRLID">ASRL ID</param>
        /// <param name="CommandParameters">Parameters,if any</param>
        internal void SearchesXMLCommand(string System, string SearchID, string SRLID, string[] CommandParameters)
        {
            try
            {
                long i = 0;
                xmlRequest.Append("<?xml version='1.0'?>");
                xmlRequest.Append("<command xmlns='" + PBS_NAMESPACE + "'>");
                xmlRequest.Append("<systemName>" + System + "</systemName>");
                xmlRequest.Append("<loginType>Active Client</loginType>");

                xmlRequest.Append("<getSearchData>");
                xmlRequest.Append("<searchId>" + SearchID + "</searchId>");

                if (CommandParameters != null)
                {
                    xmlRequest.Append("<searchCriteria>");
                    int paramsCount = CommandParameters.Length;
                    for (i = 0; i < paramsCount; i++)
                    {
                        xmlRequest.Append("<parameterValue>" + CommandParameters[i] + "</parameterValue>");
                    }
                    xmlRequest.Append("</searchCriteria>");
                }
                xmlRequest.Append("<listView>");
                xmlRequest.Append("<rId>" + SRLID + "</rId>");
                xmlRequest.Append("</listView>");

                xmlRequest.Append("<searchDetailFlag>dataOnly</searchDetailFlag>");
                xmlRequest.Append("</getSearchData>");

                xmlRequest.Append("</command>");
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }

        }

        /// <summary>
        /// Generates PBS XML Command for sending parameters to PBS.
        /// For some xml commands we can pass parameters if requires.
        /// </summary>
        /// <param name="CommandParameters"></param>
        private void AddRequestCommandParameters(ref string[] CommandParameters)
        {
            try
            {

                if (CommandParameters.GetType().IsArray)
                {
                    xmlRequest.Append("<commandParameters>");
                    // 6 system parameters - fill up blank
                    xmlRequest.Append("<stringParameter></stringParameter>");
                    xmlRequest.Append("<stringParameter></stringParameter>");
                    xmlRequest.Append("<stringParameter></stringParameter>");
                    xmlRequest.Append("<stringParameter></stringParameter>");
                    xmlRequest.Append("<stringParameter></stringParameter>");
                    xmlRequest.Append("<stringParameter></stringParameter>");

                    long i = 0;

                    long tempFor1 = CommandParameters.Length;
                    for (i = 0; i < tempFor1; i++)
                    {
                        xmlRequest.Append("<stringParameter>" + SecurityElement.Escape(CommandParameters[i]) + "</stringParameter>");
                    }

                    xmlRequest.Append("</commandParameters>");
                }
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        #endregion

        /// <summary>
        /// Reads the ConfigFilePath custom entry from Web.Config file.
        ///	NOTE: Any changes to Web.Config should appropriately reflect the custom entry.
        /// </summary>
        /// <returns>string
        /// </returns>
        /// 

        private string GetWebSvcConfigurationPath()
        {
            // NOTE: ConfigurationSettings class is obsolete in .NET Framework 2.0. When using the web services
            // for Visual studio 2005 use WebConfigurationManager class instead.

            // VS 2003
            NameValueCollection collection = ConfigurationSettings.AppSettings;

            // VS2005: NameValueCollection collection = WebConfigurationManager.AppSettings;
            string filepath = collection.Get(CONFIGFILEELEMENT);
            string errorMsg = string.Empty;
            if (filepath == null || filepath.CompareTo("") == 0)
            {
                errorMsg = genData.GetString("MSG_FAILED_TO_READ_CONFIG_FILE");
                throw new Exception(errorMsg);
            }
            return filepath;
        }

        /// <summary>
        /// Parses WebSvcConfiguration.xml to read the PBS information.
        /// </summary>
        /// <returns>true, if success
        ///			 false,on error.
        /// </returns>
        private bool GetPBSInfo()
        {
            ExceptionHandler exHandler = null;
            bool pbsInfo = false;
            System.Xml.XmlNode path = null;
            string errorMsg = string.Empty;
            try
            {
                System.Xml.XmlDocument webConfiguration = new System.Xml.XmlDocument();

                // Retreive the WebSvcConfiguration.xml file path from the custom entry added in Web.Config file.
                string configFilePath = GetWebSvcConfigurationPath();

                // load the file
                webConfiguration.Load(configFilePath);

                System.Xml.XmlNamespaceManager nsManager = new System.Xml.XmlNamespaceManager(webConfiguration.NameTable);
                nsManager.AddNamespace("ls", webConfiguration.LastChild.NamespaceURI);
                path = webConfiguration.SelectSingleNode("/WebSvcConfiguration/PBS/PBSPath");
                // if path is null implies the config file is corrupt or not valid
                if (path == null)
                {
                    ExceptionHandler pathEH = new ExceptionHandler();
                    errorMsg = genData.GetString("MSG_INVALID_CONFIG_FILE");
                    throw pathEH.RaiseException("", errorMsg, "", Enumerations.FaultCode.Client);
                }


                pbsPath = path.InnerText;
                XmlNode type = null;
                type = webConfiguration.SelectSingleNode("/WebSvcConfiguration/PBS/authenticationtype");
                // if authtype is null implies the config file is corrupt or not valid
                if (type == null)
                {
                    ExceptionHandler authTypeEH = new ExceptionHandler();
                    errorMsg = genData.GetString("MSG_INVALID_CONFIG_FILE");
                    throw authTypeEH.RaiseException("", errorMsg, "", Enumerations.FaultCode.Client);
                }
                authType = type.InnerText;

                if (authType == BASIC)
                {
                    XmlNode name = null;
                    name = webConfiguration.SelectSingleNode("/WebSvcConfiguration/PBS/username");
                    // if username element is null implies the config file is corrupt or not valid
                    if (name == null)
                    {
                        ExceptionHandler usernameEH = new ExceptionHandler();
                        errorMsg = genData.GetString("MSG_INVALID_CONFIG_FILE");
                        throw usernameEH.RaiseException("", errorMsg, "", Enumerations.FaultCode.Client);
                    }
                    userName = name.InnerText;
                    XmlNode pwd = null;
                    pwd = webConfiguration.SelectSingleNode("/WebSvcConfiguration/PBS/password");
                    // if password element is null implies the config file is corrupt or not valid
                    if (pwd == null)
                    {
                        ExceptionHandler passwordEH = new ExceptionHandler();
                        errorMsg = genData.GetString("MSG_INVALID_CONFIG_FILE");
                        throw passwordEH.RaiseException("", errorMsg, "", Enumerations.FaultCode.Client);
                    }

                    // encrypt the password
                    string plainTextPwd = "";
                    GetDecryptedPassword(pwd.InnerText, ref plainTextPwd);
                    password = plainTextPwd;

                    XmlNode domain = null;
                    domain = webConfiguration.SelectSingleNode("/WebSvcConfiguration/PBS/domain");
                    // if domain element is null implies the config file is corrupt or not valid
                    if (domain == null)
                    {
                        ExceptionHandler domainEH = new ExceptionHandler();
                        errorMsg = genData.GetString("MSG_INVALID_CONFIG_FILE");
                        throw domainEH.RaiseException("", errorMsg, "", Enumerations.FaultCode.Client);
                    }
                    domainName = domain.InnerText;
                }
                pbsInfo = true;

            }
            catch (Exception ex)
            {
                exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
            return pbsInfo;
        }

        /// <summary>
        /// Invokes Web Security component to decrypt the password in the WebSvcConfiguration.xml.
        /// </summary>
        /// <param name="encryptPwd">encrypted password</param>
        /// <param name="plainTextPwd">plain text</param>
        /// <returns></returns>
        private bool GetDecryptedPassword(string encryptPwd, ref string plainTextPwd)
        {
            try
            {
                WebServiceSecurity.Security.Decrypt(encryptPwd, ref plainTextPwd);
                return true;
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        #region PBS Proxy

        /// <summary>
        /// This is the main function which communicates with PBS.Uses HTTP Protocol for communication.
        /// It also handles unicode streaming response.The authentication types supported are:
        /// a) Anonymous Access (no username ,password required)
        /// b) Basic
        /// c) Windows Integrated
        /// </summary>
        /// <param name="pbsCommand">PBS XML Command</param>
        private void SubmitToPBS(string pbsCommand)
        {
            ExceptionHandler exHandler;
            HttpWebRequest webRequest = null;
            System.Uri pbsURI = null;

            pbsURI = new Uri(pbsPath);
            try
            {
                // create the web request
                webRequest = (HttpWebRequest)HttpWebRequest.Create(pbsURI);

                //set the properties
                // Set the authentication security.
                if (authType == WINDOWS)
                {
                    webRequest.KeepAlive = true;  // do not edit this property
                }
                else
                {
                    webRequest.KeepAlive = false; // do not edit this property
                }
                webRequest.Method = "POST";
                webRequest.PreAuthenticate = true;
                webRequest.ContentType = "text/html";

                if (authType == WINDOWS)
                {
                    // set the default credentials
                    webRequest.Credentials = CredentialCache.DefaultCredentials;


                }
                else if (authType == BASIC)
                {
                    // set the credentials
                    CredentialCache userCache = new CredentialCache();
                    NetworkCredential network = new NetworkCredential(domainName + "\\" + userName, password);
                    userCache.Add(pbsURI, authType, network);
                    webRequest.Credentials = userCache;

                }

                // build the http request
                BuildRequestStream(ref webRequest, pbsCommand);

                // get the response
                HttpWebResponse webResponse = null;
                Encoding enc = null;
                StreamReader pbsResponseStream = null;
                string response = null;
                webResponse = (HttpWebResponse)webRequest.GetResponse();
                // for handling unicode responses
                enc = System.Text.Encoding.UTF8;
                pbsResponseStream = new StreamReader(webResponse.GetResponseStream(), enc);
                response = pbsResponseStream.ReadToEnd();
                pbsResponseStream.Close();
                webResponse.Close();
                pbsResponse.LoadXml(response);
            }
            catch (WebException ex)
            {
                exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }

        }
        private void BuildRequestStream(ref HttpWebRequest webRequest, string request)
        {
            try
            {
                //This method build the request stream for WebRequest
                byte[] bytes = null;
                Stream dataStream = null;
                // for handling unicode responses
                bytes = Encoding.UTF8.GetBytes(request);
                webRequest.ContentLength = bytes.Length;

                dataStream = webRequest.GetRequestStream();
                dataStream.Write(bytes, 0, bytes.Length);
                dataStream.Close();
            }
            catch (Exception ex)
            {
                ExceptionHandler exHandler = new ExceptionHandler();
                throw exHandler.RaiseException("", ex.Message, "", Enumerations.FaultCode.Server);
            }
        }

        #endregion

        #region private members
        private StringBuilder xmlRequest = new StringBuilder();
        private RXMLSystemWrite rdaXML = new RXMLSystemWrite();
        public XmlDocument pbsResponse;
        private XmlNamespaceManager nsManager;
        private const string CONFIGFILEELEMENT = "ConfigFilePath";

        //PBS information
        private string pbsPath;
        private string userName;
        private string password;
        private string authType;
        private string domainName;
        private const string RECORD_ID_ATTRIBUTE_NAME = "recordId";
        private const string PBS_NAMESPACE = "urn:schemas-pivotal-com/LifecycleServer50";

        //Authentication Methods
        private const string BASIC = "Basic";
        private const string WINDOWS = "Windows";

        #endregion
    }

